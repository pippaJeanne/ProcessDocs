<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet xmlns="http://www.tei-c.org/ns/1.0" xmlns:tei="http://www.tei-c.org/ns/1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl"
    exclude-result-prefixes="xd tei" version="2.0">
    <xsl:output method="xml" indent="yes" encoding="UTF-8" version="1.0"
        xmlns="http://www.tei-c.org/ns/1.0"/>




<xd:doc type="stylesheet">
    <xd:short>
        Script de dissimilation/détildage pour des textes en Français de la Renaissance
  </xd:short>
  <xd:detail>Programme de recherche des Bibliothèques Virtuelles Humanistes (sous la direction de Marie-Luce Demonet)
     CESR, 59 rue Néricault-Destouches, BP 12050, 37020 Tours Cedex France.
  </xd:detail>  
  <xd:author>Jorge Fins jorge.fins@univ-tours.fr</xd:author>
    <xd:copyright>CC BY-NC-SA 3.0 France</xd:copyright>
  </xd:doc>

    <!--    phasage des template
    1 : tout copier
    2 : tokénisation
    3 : 1er passage : ajout de reg/reg@type=modernisation pour le contenu ciblé des <w> étant enfant de <reg> en supprimant <w>. Si pas de règle appliqué, on laisse <w>
    4 : 2ème passage : ajout de reg/reg@type=modernisation pour le contenu ciblé des <w> n'étant pas enfant de <reg> en supprimant <w>. suppression des <w>
    5 : gestion de ceux ayant déjà été concernés par une 1ère règle en modifiant le contenu des <reg@type=modernisation>.
    -->
    <xsl:template match="/">
        <xsl:variable name="pass1">
            <xsl:apply-templates/>
        </xsl:variable>
        <xsl:variable name="pass2">
            <xsl:for-each select="$pass1">
                <xsl:apply-templates mode="pass2"/>
            </xsl:for-each>
        </xsl:variable>
        <xsl:variable name="pass3">
            <xsl:for-each select="$pass2">
                <xsl:apply-templates mode="pass3"/>
            </xsl:for-each>
        </xsl:variable>
        <xsl:for-each select="$pass3">
            <xsl:apply-templates mode="pass4"/>
        </xsl:for-each>
    </xsl:template>
    <!--copie 1 : tout contenu et balisage-->
    <xsl:template match="tei:*">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:apply-templates select="tei:* | comment() | text()"/>
        </xsl:copy>
    </xsl:template>
    <xsl:template match="@*|processing-instruction()|comment()">
        <xsl:copy/>
    </xsl:template>
    <!--copie 2 : tout contenu et balisage-->
    <xsl:template match="tei:*" mode="pass2">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:apply-templates select="tei:*|processing-instruction()|comment()|text()"
                mode="pass2"/>
        </xsl:copy>
    </xsl:template>
    <!--copie 3 : tout contenu et balisage-->
    <xsl:template match="tei:*" mode="pass3">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:apply-templates select="tei:*|processing-instruction()|comment()|text()"
                mode="pass3"/>
        </xsl:copy>
    </xsl:template>
    <!--copie 4 : tout contenu et balisage-->
    <xsl:template match="tei:*" mode="pass4">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:apply-templates select="tei:*|processing-instruction()|comment()|text()"
                mode="pass4"/>
        </xsl:copy>
    </xsl:template>
    <!--1° tokenisation : chaque mot mis dans une balise <w>, sauf si ce mot est contenu dans :
        - une balise ayant un @xml:lang, un @type="sig" 
        - ou bien dans un sic, corr ou orig (NB : les <reg> seront concernés dans le 2ème passage donc à supprimer avant passage de la feuille)-->
   <xsl:template match="tei:text//tei:*[not(@xml:lang or @type='sig' or self::tei:orig or self::tei:corr  or self::tei:sic or self::tei:name or self::tei:placeName or self::tei:geogName or self::tei:persName or self::tei:orgName)]/text()">
  <!--<xsl:template match="tei:text//tei:*/text()"> -->
          <xsl:analyze-string select="." regex="\w+">
            <xsl:matching-substring>
                <w>
                    <xsl:value-of select="."/>
                </w>
            </xsl:matching-substring>
            <xsl:non-matching-substring>
                <xsl:value-of select="."/>
            </xsl:non-matching-substring>
        </xsl:analyze-string>
    </xsl:template> 
  
   <!--NB : Pour les opérations suivantes, l'ordre des règles a son importance-->
   
    <!--2° 1er passage pour les <reg>. Application de règle pour chaque w (ici dès qu'un règle est appliquée, 
        les autres ne le sont pas et plus de <w> mais du choice    -->
   
   <!--Avec <reg>-->
  <xsl:template match="tei:choice[tei:reg/tei:w]" mode="pass2">
        <xsl:for-each select="tei:reg/tei:w[1]"><xsl:choose> 
            <!--Termes fréquents (parmi les 5000 mots mots les plus fréquents du corpus Epistemon au 23/01/14)-->
          <xsl:when test="matches(.,'^treshaultz$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/>
                        <reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg>
                        <reg type="modernisation">
                                <xsl:if test="matches(.,'^[Tt]reshaultz$')">
                                <xsl:value-of select="substring-before(.,'reshaultz')"/>rès hauts</xsl:if>
                                <xsl:if test="matches(.,'^TRESHAULTZ$')">TRÈS HAUTS</xsl:if>
                         </reg>
                                </choice>
                </xsl:when>
<xsl:when test="matches(.,'^plustost$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]lustost$')"><xsl:value-of select="substring-before(.,'lustost')"/>lutôt</xsl:if>
       <xsl:if test="matches(.,'^PLUSTOST$')">PLUTÔT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)esfoys$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)esfoys$')"><xsl:value-of select="substring-before(.,'esfoys')"/>efois<xsl:value-of select="substring-after(.,'esfoys')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ESFOYS$')"><xsl:value-of select="substring-before(.,'ESFOYS')"/>EFOIS<xsl:value-of select="substring-after(.,'ESFOYS')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ainsin$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]insin$')"><xsl:value-of select="substring-before(.,'insin')"/>insi</xsl:if>
       <xsl:if test="matches(.,'^AINSIN$')">AINSI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^croy$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]roy$')"><xsl:value-of select="substring-before(.,'roy')"/>rois</xsl:if>
       <xsl:if test="matches(.,'^CROY$')">CROIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^royne(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]oyne(\w*)$')"><xsl:value-of select="substring-before(.,'oyne')"/>eine<xsl:value-of select="substring-after(.,'oyne')"/></xsl:if>
       <xsl:if test="matches(.,'^ROYNE(\w*)$')">REINE<xsl:value-of select="substring-after(.,'ROYNE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^quilz$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Qq]uilz$')"><xsl:value-of select="substring-before(.,'uilz')"/>u'ils</xsl:if>
       <xsl:if test="matches(.,'^QUILZ$')">QU'ILS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^myeulx$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]yeulx$')"><xsl:value-of select="substring-before(.,'yeulx')"/>ieux</xsl:if>
       <xsl:if test="matches(.,'^MYEULX$')">MIEUX</xsl:if></reg></choice>
            </xsl:when>
<!--Mon addition ceult => ceux-->
<xsl:when test="matches(.,'^ceulx$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]eulx$')"><xsl:value-of select="substring-before(.,'eulx')"/>eux</xsl:if>
       <xsl:if test="matches(.,'^CEULX$')">CEUX</xsl:if></reg></choice>
            </xsl:when>            
<xsl:when test="matches(.,'^demonstr(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]emonstr(\w*)$')"><xsl:value-of select="substring-before(.,'emonstr')"/>émonstr<xsl:value-of select="substring-after(.,'emonstr')"/></xsl:if>
       <xsl:if test="matches(.,'^DEMONSTR(\w*)$')">DÉMONSTR<xsl:value-of select="substring-after(.,'DEMONSTR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^soymesme(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]oymesme(\w*)$')"><xsl:value-of select="substring-before(.,'oymesme')"/>oi-même<xsl:value-of select="substring-after(.,'oymesme')"/></xsl:if>
       <xsl:if test="matches(.,'^SOYMESME(\w*)$')">SOI-MÊME<xsl:value-of select="substring-after(.,'SOYMESME')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pourtraict(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ourtraict(\w*)$')"><xsl:value-of select="substring-before(.,'ourtraict')"/>ortrait<xsl:value-of select="substring-after(.,'ourtraict')"/></xsl:if>
       <xsl:if test="matches(.,'^POURTRAICT(\w*)$')">PORTRAIT<xsl:value-of select="substring-after(.,'POURTRAICT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pensemen(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ensemen(\w*)$')"><xsl:value-of select="substring-before(.,'ensemen')"/>ensée<xsl:value-of select="substring-after(.,'ensemen')"/></xsl:if>
       <xsl:if test="matches(.,'^PENSEMEN(\w*)$')">PENSÉE<xsl:value-of select="substring-after(.,'PENSEMEN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^chault$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]hault$')"><xsl:value-of select="substring-before(.,'hault')"/>haut</xsl:if>
       <xsl:if test="matches(.,'^MYEULX$')">MIEUX</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)paroistr(\w+)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Pp]aroistr(\w+)$')"><xsl:value-of select="substring-before(.,'aroistr')"/>araîtr<xsl:value-of select="substring-after(.,'aroistr')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)PAROISTR(\w+)$')"><xsl:value-of select="substring-before(.,'PAROISTR')"/>PARAÎTR<xsl:value-of select="substring-after(.,'PAROISTR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^peust$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]eust$')"><xsl:value-of select="substring-before(.,'eust')"/>ut</xsl:if>
       <xsl:if test="matches(.,'^PEUST$')">PUT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^[vp]eult$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[vpVP]eult$')"><xsl:value-of select="substring-before(.,'eult')"/>eut</xsl:if>
       <xsl:if test="matches(.,'^[VP]EULT$')">EUT</xsl:if></reg></choice>
            </xsl:when>
<!--Addition pour peulvent => peuvent-->
<xsl:when test="matches(.,'^peulvent$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[pP]eulvent$')"><xsl:value-of select="substring-before(.,'eulvent')"/>euvent</xsl:if>
       <xsl:if test="matches(.,'^PEULVENT$')">PEUVENT</xsl:if></reg></choice>
            </xsl:when>            
<xsl:when test="matches(.,'^maniere(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]aniere(\w*)$')"><xsl:value-of select="substring-before(.,'aniere')"/>anière<xsl:value-of select="substring-after(.,'aniere')"/></xsl:if>
       <xsl:if test="matches(.,'^MANIERE(\w*)$')">MANIÈRE<xsl:value-of select="substring-after(.,'MANIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estat(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^estat(\w*)$')">état<xsl:value-of select="substring-after(.,'estat')"/></xsl:if>
       <xsl:if test="matches(.,'^Estat(\w*)$')">État<xsl:value-of select="substring-after(.,'Estat')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTAT(\w*)$')">ÉTAT<xsl:value-of select="substring-after(.,'ESTAT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^toutesfois$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]outesfois$')"><xsl:value-of select="substring-before(.,'outesfois')"/>outefois</xsl:if>
       <xsl:if test="matches(.,'^TOUTESFOIS$')">TOUTEFOIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fortunez$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ortunez$')"><xsl:value-of select="substring-before(.,'ortunez')"/>ortunés</xsl:if>
       <xsl:if test="matches(.,'^FORTUNEZ$')">FORTUNÉS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^encor$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]ncor$')"><xsl:value-of select="substring-before(.,'ncor')"/>ncore</xsl:if>
       <xsl:if test="matches(.,'^ENCOR$')">ENCORE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^premiere(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]remiere(\w*)$')"><xsl:value-of select="substring-before(.,'remiere')"/>remière<xsl:value-of select="substring-after(.,'remiere')"/></xsl:if>
       <xsl:if test="matches(.,'^PREMIERE(\w*)$')">PREMIÈRE<xsl:value-of select="substring-after(.,'PREMIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^verité(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]erité(\w*)$')"><xsl:value-of select="substring-before(.,'erité')"/>érité<xsl:value-of select="substring-after(.,'erité')"/></xsl:if>
       <xsl:if test="matches(.,'^VERITÉ(\w*)$')">VÉRITÉ<xsl:value-of select="substring-after(.,'VERITÉ')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^desiroi(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esiroi(\w*)$')"><xsl:value-of select="substring-before(.,'esiroi')"/>ésirai<xsl:value-of select="substring-after(.,'esiroi')"/></xsl:if>
       <xsl:if test="matches(.,'^DESIROI(\w*)$')">DÉSIRAI<xsl:value-of select="substring-after(.,'DESIROI')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^desir(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esir(\w*)$')"><xsl:value-of select="substring-before(.,'esir')"/>ésir<xsl:value-of select="substring-after(.,'esir')"/></xsl:if>
       <xsl:if test="matches(.,'^DESIR(\w*)$')">DÉSIR<xsl:value-of select="substring-after(.,'DESIR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ja$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^ja$')"><xsl:value-of select="substring-before(.,'ja')"/>déjà</xsl:if>
       <xsl:if test="matches(.,'^Ja$')"><xsl:value-of select="substring-before(.,'Ja')"/>Déjà</xsl:if>
       <xsl:if test="matches(.,'^JA$')">DÉJÀ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(p|m|fr)eres?$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
     <xsl:if test="matches(.,'^(P|p|M|m|fr|Fr)eres?$')"><xsl:value-of select="substring-before(.,'ere')"/>ère<xsl:value-of select="substring-after(.,'^ere')"/></xsl:if>
     <xsl:if test="matches(.,'^P|M|FR)ERES?$')"><xsl:value-of select="substring-before(.,'ERE')"/>ÈRE<xsl:value-of select="substring-after(.,'ERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estoi[st]$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^estoi[st]$')">étai<xsl:value-of select="substring-after(.,'estoi')"/></xsl:if>
         <xsl:if test="matches(.,'^Estoi[st]$')">Étai<xsl:value-of select="substring-after(.,'Estoi')"/></xsl:if>
         <xsl:if test="matches(.,'^ESTOI[ST]$')">ÉTAI<xsl:value-of select="substring-after(.,'ESTOI')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estre$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^estre$')">être</xsl:if>
         <xsl:if test="matches(.,'^Estre$')">Être</xsl:if>
         <xsl:if test="matches(.,'^ESTRE$')">ÊTRE</xsl:if></reg></choice>
            </xsl:when>
                <xsl:when test="matches(.,'^cest$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Cc]est$')"><xsl:value-of select="substring-before(.,'est')"/>et</xsl:if>
                                <xsl:if test="matches(.,'^CEST$')">CET</xsl:if></reg></choice>
                </xsl:when>
<xsl:when test="matches(.,'^ceste$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^[Cc]este$')"><xsl:value-of select="substring-before(.,'este')"/>ette</xsl:if>
         <xsl:if test="matches(.,'^CESTE$')">CETTE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^avoit$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^[Aa]voit$')"><xsl:value-of select="substring-before(.,'voit')"/>vait</xsl:if>
         <xsl:if test="matches(.,'^AVOIT$')">AVAIT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^apres$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^[Aa]pres$')"><xsl:value-of select="substring-before(.,'pres')"/>près</xsl:if>
         <xsl:if test="matches(.,'^APRES$')">APRÈS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^esté$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^esté$')"><xsl:value-of select="substring-before(.,'esté')"/>été</xsl:if>
         <xsl:if test="matches(.,'^Esté$')"><xsl:value-of select="substring-before(.,'Esté')"/>Été</xsl:if>
         <xsl:if test="matches(.,'^ESTÉ$')">ÉTÉ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^este$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^este$')"><xsl:value-of select="substring-before(.,'este')"/>été</xsl:if>
       <xsl:if test="matches(.,'^Este$')"><xsl:value-of select="substring-before(.,'Este')"/>Été</xsl:if>
       <xsl:if test="matches(.,'^ESTE$')">ÉTÉ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estoient$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^estoient$')"><xsl:value-of select="substring-before(.,'estoient')"/>étaient</xsl:if>
         <xsl:if test="matches(.,'^Estoient$')"><xsl:value-of select="substring-before(.,'Estoient')"/>Étaient</xsl:if>
         <xsl:if test="matches(.,'^ESTOIENT$')">ÉTAIENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pource$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^[pP]ource$')"><xsl:value-of select="substring-before(.,'ource')"/>arce</xsl:if>
         <xsl:if test="matches(.,'^POURCE$')">PARCE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ames?$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^ames?$')">âme<xsl:value-of select="substring-after(.,'^ame')"/></xsl:if>
         <xsl:if test="matches(.,'^Ames?$')">Âme<xsl:value-of select="substring-after(.,'Ame')"/></xsl:if>
         <xsl:if test="matches(.,'^AMES?$')">ÂME<xsl:value-of select="substring-after(.,'AME')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^grace$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^[Gg]race$')"><xsl:value-of select="substring-before(.,'race')"/>râce</xsl:if>
         <xsl:if test="matches(.,'^GRACE$')">GRÂCE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^faisoit$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^[Ff]aisoit$')"><xsl:value-of select="substring-before(.,'aisoit')"/>aisait</xsl:if>
         <xsl:if test="matches(.,'^FAISOIT$')">FAISAIT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^avois$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^[Aa]vois$')"><xsl:value-of select="substring-before(.,'vois')"/>vais</xsl:if>
         <xsl:if test="matches(.,'^AVOIS$')">AVAIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^doib[tv](\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]oib[tv](\w*)$')"><xsl:value-of select="substring-before(.,'oib')"/>oi<xsl:value-of select="substring-after(.,'oib')"/></xsl:if>
       <xsl:if test="matches(.,'^DOIB[TV](\w*)$')">DOI<xsl:value-of select="substring-after(.,'DOIB')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^veult$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^[Vv]eult$')"><xsl:value-of select="substring-before(.,'eult')"/>eut</xsl:if>
         <xsl:if test="matches(.,'^VEULT$')">VEUT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^presens$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]resens$')"><xsl:value-of select="substring-before(.,'resens')"/>résents</xsl:if>
       <xsl:if test="matches(.,'^PRESENT$')">PRÉSENTS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^presen(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]resen(\w*)$')"><xsl:value-of select="substring-before(.,'resen')"/>résen<xsl:value-of select="substring-after(.,'resen')"/></xsl:if>
       <xsl:if test="matches(.,'^PRESEN(\w*)$')">PRÉSEN<xsl:value-of select="substring-after(.,'PRESEN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^plaist$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^[Pp]laist$')"><xsl:value-of select="substring-before(.,'laist')"/>lait</xsl:if>
         <xsl:if test="matches(.,'^PLAIST$')">PLAIT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ayans$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^[Aa]yans$')"><xsl:value-of select="substring-before(.,'yans')"/>yant</xsl:if>
         <xsl:if test="matches(.,'^AYANS$')">AYANT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fol$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^[Ff]ol$')"><xsl:value-of select="substring-before(.,'ol')"/>ou</xsl:if>
         <xsl:if test="matches(.,'^FOL$')">FOU</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^memoire(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]emoire(\w*)$')"><xsl:value-of select="substring-before(.,'emoire')"/>émoire<xsl:value-of select="substring-after(.,'emoire')"/></xsl:if>
       <xsl:if test="matches(.,'^MEMOIRE(\w*)$')">MÉMOIRE<xsl:value-of select="substring-after(.,'MEMOIRE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aus$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^[Aa]us$')"><xsl:value-of select="substring-before(.,'us')"/>ux</xsl:if>
         <xsl:if test="matches(.,'^AUS$')">AUX</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^costé(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]osté(\w*)$')"><xsl:value-of select="substring-before(.,'osté')"/>ôté<xsl:value-of select="substring-after(.,'osté')"/></xsl:if>
       <xsl:if test="matches(.,'^COSTÉ(\w*)$')">CÔTÉ<xsl:value-of select="substring-after(.,'COSTÉ')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pourroit$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^[Pp]ourroit$')"><xsl:value-of select="substring-before(.,'ourroit')"/>ourrait</xsl:if>
       <xsl:if test="matches(.,'^POURROIT$')">POURRAIT</xsl:if></reg></choice>
            </xsl:when>
<!-- Addition pour pourroient => pourraient -->
<xsl:when test="matches(.,'^pourroient$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
         <xsl:if test="matches(.,'^[Pp]ourroient$')"><xsl:value-of select="substring-before(.,'ourroient')"/>ourraient</xsl:if>
       <xsl:if test="matches(.,'^POURROIENT$')">POURRAIENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^advis$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]dvis$')"><xsl:value-of select="substring-before(.,'dvis')"/>vis</xsl:if>
       <xsl:if test="matches(.,'^ADVIS$')">AVIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^neantmoins$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Nn]eantmoins$')"><xsl:value-of select="substring-before(.,'eantmoins')"/>éanmoins</xsl:if>
       <xsl:if test="matches(.,'^NEANTMOINS$')">NÉANMOINS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aupres$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]upres$')"><xsl:value-of select="substring-before(.,'upres')"/>uprès</xsl:if>
       <xsl:if test="matches(.,'^AUPRES$')">AUPRÈS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^gueres?$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]ueres?$')"><xsl:value-of select="substring-before(.,'uere')"/>uère</xsl:if>
       <xsl:if test="matches(.,'^GUERES?$')">GUÈRE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^merite(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]erite(\w*)$')"><xsl:value-of select="substring-before(.,'erite')"/>érite<xsl:value-of select="substring-after(.,'erite')"/></xsl:if>
       <xsl:if test="matches(.,'^MERITE(\w*)$')">MÉRITE<xsl:value-of select="substring-after(.,'MERITE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aye$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ye$')"><xsl:value-of select="substring-before(.,'ye')"/>ie</xsl:if>
       <xsl:if test="matches(.,'^AYE$')">AIE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^seullement$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]eullement$')"><xsl:value-of select="substring-before(.,'eullement')"/>eulement</xsl:if>
       <xsl:if test="matches(.,'^SEULLEMENT$')">SEULEMENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mary(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ary(\w*)$')"><xsl:value-of select="substring-before(.,'ary')"/>ari<xsl:value-of select="substring-after(.,'ary')"/></xsl:if>
       <xsl:if test="matches(.,'^MARY(\w*)$')">MARI<xsl:value-of select="substring-after(.,'MARY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^premierement$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]remierement$')"><xsl:value-of select="substring-before(.,'remierement')"/>remièrement</xsl:if>
       <xsl:if test="matches(.,'^PREMIEREMENT$')">PREMIÈREMENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^matiere(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]atiere(\w*)$')"><xsl:value-of select="substring-before(.,'atiere')"/>atière<xsl:value-of select="substring-after(.,'atiere')"/></xsl:if>
       <xsl:if test="matches(.,'^MATIERE(\w*)$')">MATIÈRE<xsl:value-of select="substring-after(.,'MATIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^voila$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]oila$')"><xsl:value-of select="substring-before(.,'oila')"/>oilà</xsl:if>
       <xsl:if test="matches(.,'^VOILA$')">VOILÀ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^facon(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]acon(\w*)$')"><xsl:value-of select="substring-before(.,'acon')"/>açon<xsl:value-of select="substring-after(.,'acon')"/></xsl:if>
       <xsl:if test="matches(.,'^FACON(\w*)$')">FAÇON<xsl:value-of select="substring-after(.,'FACON')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^agreable(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]greable(\w*)$')"><xsl:value-of select="substring-before(.,'greable')"/>gréable<xsl:value-of select="substring-after(.,'greable')"/></xsl:if>
       <xsl:if test="matches(.,'^AGREABLE(\w*)$')">AGRÉABLE<xsl:value-of select="substring-after(.,'AGREABLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^avoyent$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]voyent$')"><xsl:value-of select="substring-before(.,'voyent')"/>vaient</xsl:if>
       <xsl:if test="matches(.,'^AVOYENT$')">AVAIENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^bestes(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]estes(\w*)$')"><xsl:value-of select="substring-before(.,'estes')"/>êtes<xsl:value-of select="substring-after(.,'estes')"/></xsl:if>
       <xsl:if test="matches(.,'^BESTES(\w*)$')">BÊTES<xsl:value-of select="substring-after(.,'BESTES')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^cete$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ete$')"><xsl:value-of select="substring-before(.,'ete')"/>ette</xsl:if>
       <xsl:if test="matches(.,'^CETE$')">CETTE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^derriere$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]erriere$')"><xsl:value-of select="substring-before(.,'erriere')"/>errière</xsl:if>
       <xsl:if test="matches(.,'^DERRIERE$')">DERRIÈRE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^presence(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]resence(\w*)$')"><xsl:value-of select="substring-before(.,'resence')"/>résence<xsl:value-of select="substring-after(.,'resence')"/></xsl:if>
       <xsl:if test="matches(.,'^PRESENCE(\w*)$')">PRÉSENCE<xsl:value-of select="substring-after(.,'PRESENCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^esperance(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]sperance(\w*)$')"><xsl:value-of select="substring-before(.,'sperance')"/>spérance<xsl:value-of select="substring-after(.,'sperance')"/></xsl:if>
       <xsl:if test="matches(.,'^ESPERANCE(\w*)$')">ESPÉRANCE<xsl:value-of select="substring-after(.,'ESPERANCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^auroit', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]uroit$')"><xsl:value-of select="substring-before(.,'uroit')"/>urait</xsl:if>
       <xsl:if test="matches(.,'^AUROIT$')">AURAIT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^grenoille(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]renoille(\w*)$')"><xsl:value-of select="substring-before(.,'renoille')"/>renouille<xsl:value-of select="substring-after(.,'grenoille')"/></xsl:if>
       <xsl:if test="matches(.,'^GRENOILLE(\w*)$')">GRENOUILLE<xsl:value-of select="substring-after(.,'GRENOILLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^receu(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]eceu(\w*)$')"><xsl:value-of select="substring-before(.,'eceu')"/>eçu<xsl:value-of select="substring-after(.,'eceu')"/></xsl:if>
       <xsl:if test="matches(.,'^RECEU(\w*)$')">REÇU<xsl:value-of select="substring-after(.,'RECEU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fors', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^fors$')">hormis</xsl:if>
       <xsl:if test="matches(.,'^Fors$')">Hormis</xsl:if>
       <xsl:if test="matches(.,'^FORS$')">HORMIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pensee(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ensee(\w*)$')"><xsl:value-of select="substring-before(.,'ensee')"/>ensée<xsl:value-of select="substring-after(.,'ensee')"/></xsl:if>
       <xsl:if test="matches(.,'^PENSEE(\w*)$')">PENSÉE<xsl:value-of select="substring-after(.,'PENSEE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^donques$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]onques$')"><xsl:value-of select="substring-before(.,'onques')"/>onc</xsl:if>
       <xsl:if test="matches(.,'^DONQUES$')">DONC</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^veue$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eue$')"><xsl:value-of select="substring-before(.,'eue')"/>ue</xsl:if>
       <xsl:if test="matches(.,'^VEUE$')">VUE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^helas$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]elas$')"><xsl:value-of select="substring-before(.,'elas')"/>élas</xsl:if>
       <xsl:if test="matches(.,'^HELAS$')">HÉLAS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fee(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ee(\w*)$')"><xsl:value-of select="substring-before(.,'ee')"/>ée<xsl:value-of select="substring-after(.,'ee')"/></xsl:if>
       <xsl:if test="matches(.,'^FEE(\w*)$')">FÉE<xsl:value-of select="substring-after(.,'FEE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^guerir$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]uerir$')"><xsl:value-of select="substring-before(.,'uerir')"/>uérir</xsl:if>
       <xsl:if test="matches(.,'^GUERIR$')">GUÉRIR</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^honneste(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]onneste(\w*)$')"><xsl:value-of select="substring-before(.,'onneste')"/>onnête<xsl:value-of select="substring-after(.,'onneste')"/></xsl:if>
       <xsl:if test="matches(.,'^HONNESTE(\w*)$')">HONNÊTE<xsl:value-of select="substring-after(.,'HONNESTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estions$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^estions$')">étions</xsl:if>
        <xsl:if test="matches(.,'^Estions$')">Étions</xsl:if>
       <xsl:if test="matches(.,'^ESTIONS$')">ÉTIONS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^reverence(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]everence(\w*)$')"><xsl:value-of select="substring-before(.,'everence')"/>évérence<xsl:value-of select="substring-after(.,'everence')"/></xsl:if>
       <xsl:if test="matches(.,'^REVERENCE(\w*)$')">RÉVÉRENCE<xsl:value-of select="substring-after(.,'REVERENCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^yeus$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Yy]eus$')"><xsl:value-of select="substring-before(.,'eus')"/>eux</xsl:if>
       <xsl:if test="matches(.,'^YEUS$')">YEUX</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^remede(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]emede(\w*)$')"><xsl:value-of select="substring-before(.,'emede')"/>emède<xsl:value-of select="substring-after(.,'emede')"/></xsl:if>
       <xsl:if test="matches(.,'^REMEDE(\w*)$')">REMÈDE<xsl:value-of select="substring-after(.,'REMEDE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^remedier(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]emedier(\w*)$')"><xsl:value-of select="substring-before(.,'emedier')"/>emédier<xsl:value-of select="substring-after(.,'emedier')"/></xsl:if>
       <xsl:if test="matches(.,'^REMEDIER(\w*)$')">REMÉDIER<xsl:value-of select="substring-after(.,'REMEDIER')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^piece(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]iece(\w*)$')"><xsl:value-of select="substring-before(.,'iece')"/>ièce<xsl:value-of select="substring-after(.,'iece')"/></xsl:if>
       <xsl:if test="matches(.,'^PIECE(\w*)$')">PIÈCE<xsl:value-of select="substring-after(.,'PIECE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^riviere(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]iviere(\w*)$')"><xsl:value-of select="substring-before(.,'iviere')"/>ivière<xsl:value-of select="substring-after(.,'iviere')"/></xsl:if>
       <xsl:if test="matches(.,'^RIVIERE(\w*)$')">RIVIÈRE<xsl:value-of select="substring-after(.,'RIVIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ennuy(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]nnuy(\w*)$')"><xsl:value-of select="substring-before(.,'nnuy')"/>nnui<xsl:value-of select="substring-after(.,'nnuy')"/></xsl:if>
       <xsl:if test="matches(.,'^ENNUY(\w*)$')">ENNUI<xsl:value-of select="substring-after(.,'ENNUY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^entree(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]ntree(\w*)$')"><xsl:value-of select="substring-before(.,'ntree')"/>ntrée<xsl:value-of select="substring-after(.,'ntree')"/></xsl:if>
       <xsl:if test="matches(.,'^ENTREE(\w*)$')">ENTRÉE<xsl:value-of select="substring-after(.,'ENTREE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^necessaire(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Nn]ecessaire(\w*)$')"><xsl:value-of select="substring-before(.,'ecessaire')"/>écessaire<xsl:value-of select="substring-after(.,'ecessaire')"/></xsl:if>
       <xsl:if test="matches(.,'^NECESSAIRE(\w*)$')">NÉCESSAIRE<xsl:value-of select="substring-after(.,'NECESSAIRE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^tems$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]ems$')"><xsl:value-of select="substring-before(.,'ems')"/>emps</xsl:if>
       <xsl:if test="matches(.,'^TEMS$')">TEMPS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^come$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ome$')"><xsl:value-of select="substring-before(.,'ome')"/>omme</xsl:if>
       <xsl:if test="matches(.,'^COME$')">COMME</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^celeste$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]eleste$')"><xsl:value-of select="substring-before(.,'eleste')"/>éleste</xsl:if>
       <xsl:if test="matches(.,'^CELESTE$')">CÉLESTE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^gue$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]ue$')"><xsl:value-of select="substring-before(.,'ue')"/>ué</xsl:if>
       <xsl:if test="matches(.,'^GUE$')">GUÉ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^Amerique$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]merique$')"><xsl:value-of select="substring-before(.,'merique')"/>mérique</xsl:if>
       <xsl:if test="matches(.,'^AMERIQUE$')">AMÉRIQUE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^espece(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]spece(\w*)$')"><xsl:value-of select="substring-before(.,'spece')"/>spèce<xsl:value-of select="substring-after(.,'spece')"/></xsl:if>
       <xsl:if test="matches(.,'^ESPECE(\w*)$')">ESPÈCE<xsl:value-of select="substring-after(.,'ESPECE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^quarré(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^quarré(\w*)$')">carré<xsl:value-of select="substring-after(.,'quarré')"/></xsl:if>
        <xsl:if test="matches(.,'^Quarré(\w*)$')">Carré<xsl:value-of select="substring-after(.,'Quarré')"/></xsl:if>
       <xsl:if test="matches(.,'^QUARRÉ(\w*)$')">CARRÉ<xsl:value-of select="substring-after(.,'QUARRÉ')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^quarrez(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^quarrez(\w*)$')">carrés<xsl:value-of select="substring-after(.,'quarrez')"/></xsl:if>
        <xsl:if test="matches(.,'^Quarrez(\w*)$')">Carrés<xsl:value-of select="substring-after(.,'Quarrez')"/></xsl:if>
       <xsl:if test="matches(.,'^QUARREZ(\w*)$')">CARRÉS<xsl:value-of select="substring-after(.,'QUARREZ')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^delice(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]elice(\w*)$')"><xsl:value-of select="substring-before(.,'elice')"/>élice<xsl:value-of select="substring-after(.,'elice')"/></xsl:if>
       <xsl:if test="matches(.,'^DELICE(\w*)$')">DÉLICE<xsl:value-of select="substring-after(.,'DELICE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^forest$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]orest$')"><xsl:value-of select="substring-before(.,'orest')"/>orêt</xsl:if>
       <xsl:if test="matches(.,'^FOREST$')">FORÊT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^extreme(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]xtreme(\w*)$')"><xsl:value-of select="substring-before(.,'xtreme')"/>xtrême<xsl:value-of select="substring-after(.,'xtreme')"/></xsl:if>
       <xsl:if test="matches(.,'^EXTREME(\w*)$')">EXTRÊME<xsl:value-of select="substring-after(.,'EXTREME')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^prest$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]rest$')"><xsl:value-of select="substring-before(.,'rest')"/>rêt</xsl:if>
       <xsl:if test="matches(.,'^PREST$')">PRÊT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^derniere(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]erniere(\w*)$')"><xsl:value-of select="substring-before(.,'erniere')"/>ernière<xsl:value-of select="substring-after(.,'erniere')"/></xsl:if>
       <xsl:if test="matches(.,'^DERNIERE(\w*)$')">DERNIÈRE<xsl:value-of select="substring-after(.,'DERNIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^grecz$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]recz$')"><xsl:value-of select="substring-before(.,'recz')"/>recs</xsl:if>
       <xsl:if test="matches(.,'^GRECZ$')">GRECS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mile$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ile$')"><xsl:value-of select="substring-before(.,'ile')"/>ille</xsl:if>
       <xsl:if test="matches(.,'^MILE$')">MILLE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^verd$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]erd$')"><xsl:value-of select="substring-before(.,'erd')"/>ert</xsl:if>
       <xsl:if test="matches(.,'^VERD$')">VERT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^veritable(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eritable(\w*)$')"><xsl:value-of select="substring-before(.,'eritable')"/>éritable<xsl:value-of select="substring-after(.,'eritable')"/></xsl:if>
       <xsl:if test="matches(.,'^VERITABLE(\w*)$')">VÉRITABLE<xsl:value-of select="substring-after(.,'ERITABLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^parens$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[pP]arens$')"><xsl:value-of select="substring-before(.,'arens')"/>arents</xsl:if>
       <xsl:if test="matches(.,'^PARENS$')">PARENTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^treuve(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]reuve(\w*)$')"><xsl:value-of select="substring-before(.,'reuve')"/>rouve<xsl:value-of select="substring-after(.,'reuve')"/></xsl:if>
       <xsl:if test="matches(.,'^TREUVE(\w*)$')">TROUVE<xsl:value-of select="substring-after(.,'TREUVE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^resolu(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]esolu(\w*)$')"><xsl:value-of select="substring-before(.,'esolu')"/>ésolu<xsl:value-of select="substring-after(.,'esolu')"/></xsl:if>
       <xsl:if test="matches(.,'^RESOLU(\w*)$')">RÉSOLU<xsl:value-of select="substring-after(.,'RESOLU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^miserable(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]iserable(\w*)$')"><xsl:value-of select="substring-before(.,'iserable')"/>isérable<xsl:value-of select="substring-after(.,'iserable')"/></xsl:if>
       <xsl:if test="matches(.,'^MISERABLE(\w*)$')">MISÉRABLE<xsl:value-of select="substring-after(.,'MISERABLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fidele(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]idele(\w*)$')"><xsl:value-of select="substring-before(.,'idele')"/>idèle<xsl:value-of select="substring-after(.,'idele')"/></xsl:if>
       <xsl:if test="matches(.,'^FIDELE(\w*)$')">FIDÈLE<xsl:value-of select="substring-after(.,'FIDELE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pourveu(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ourveu(\w*)$')"><xsl:value-of select="substring-before(.,'ourveu')"/>ourvu<xsl:value-of select="substring-after(.,'ourveu')"/></xsl:if>
       <xsl:if test="matches(.,'^POURVEU(\w*)$')">POURVU<xsl:value-of select="substring-after(.,'POURVEU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^puys$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[pP]uys$')"><xsl:value-of select="substring-before(.,'uys')"/>uis</xsl:if>
       <xsl:if test="matches(.,'^PUYS$')">PUIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^appetit(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ppetit(\w*)$')"><xsl:value-of select="substring-before(.,'ppetit')"/>ppétit<xsl:value-of select="substring-after(.,'ppetit')"/></xsl:if>
       <xsl:if test="matches(.,'^APPETIT(\w*)$')">APPÉTIT<xsl:value-of select="substring-after(.,'APPETIT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mestier(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]estier(\w*)$')"><xsl:value-of select="substring-before(.,'estier')"/>étier<xsl:value-of select="substring-after(.,'estier')"/></xsl:if>
       <xsl:if test="matches(.,'^MESTIER(\w*)$')">MÉTIER<xsl:value-of select="substring-after(.,'MESTIER')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^petis$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[pP]etis$')"><xsl:value-of select="substring-before(.,'etis')"/>etits</xsl:if>
       <xsl:if test="matches(.,'^PETIS$')">PETITS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^escrip(\w+)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
     <xsl:if test="matches(.,'^escrip(\w+)$')">écri<xsl:value-of select="substring-after(.,'escrip')"/></xsl:if>
     <xsl:if test="matches(.,'^Escrip(\w+)$')">Écri<xsl:value-of select="substring-after(.,'Escrip')"/></xsl:if>
     <xsl:if test="matches(.,'^ESCRIP(\w+)$')">ÉCRI<xsl:value-of select="substring-after(.,'ESCRIP')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^escri[^m](\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^escri[^m](\w*)$')">écri<xsl:value-of select="substring-after(.,'escri')"/></xsl:if>
       <xsl:if test="matches(.,'^Escri[^m](\w*)$')">Écri<xsl:value-of select="substring-after(.,'Escri')"/></xsl:if>
       <xsl:if test="matches(.,'^ESCRI[^M](\w*)$')">ÉCRI<xsl:value-of select="substring-after(.,'ESCRI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^entiere(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]ntiere(\w*)$')"><xsl:value-of select="substring-before(.,'ntiere')"/>ntière<xsl:value-of select="substring-after(.,'ntiere')"/></xsl:if>
       <xsl:if test="matches(.,'^ENTIERE(\w*)$')">ENTIÈRE<xsl:value-of select="substring-after(.,'ENTIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^autruy$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]utruy$')"><xsl:value-of select="substring-before(.,'utruy')"/>utrui</xsl:if>
       <xsl:if test="matches(.,'^AUTRUY$')">AUTRUI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^experience(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]xperience(\w*)$')"><xsl:value-of select="substring-before(.,'xperience')"/>xpérience<xsl:value-of select="substring-after(.,'xperience')"/></xsl:if>
       <xsl:if test="matches(.,'^EXPERIENCE(\w*)$')">EXPÉRIENCE<xsl:value-of select="substring-after(.,'EXPERIENCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^leu$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]eu$')"><xsl:value-of select="substring-before(.,'eu')"/>u</xsl:if>
       <xsl:if test="matches(.,'^LEU$')">LU</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^plain$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]lain$')"><xsl:value-of select="substring-before(.,'lain')"/>lein</xsl:if>
       <xsl:if test="matches(.,'^PLAIN$')">PLEIN</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^prent$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]rent$')"><xsl:value-of select="substring-before(.,'rent')"/>rend</xsl:if>
       <xsl:if test="matches(.,'^PRENT$')">PREND</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fusmes$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]usmes$')"><xsl:value-of select="substring-before(.,'usmes')"/>ûmes</xsl:if>
       <xsl:if test="matches(.,'^FUSMES$')">FÛMES</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^tens$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]ens$')"><xsl:value-of select="substring-before(.,'ens')"/>emps</xsl:if>
       <xsl:if test="matches(.,'^TENS$')">TEMPS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mension$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ension$')"><xsl:value-of select="substring-before(.,'ension')"/>ention</xsl:if>
       <xsl:if test="matches(.,'^MENSION$')">MENTION</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mieus$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ieus$')"><xsl:value-of select="substring-before(.,'ieus')"/>ieux</xsl:if>
       <xsl:if test="matches(.,'^MIEUS$')">MIEUX</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fueillet(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ueillet(\w*)$')"><xsl:value-of select="substring-before(.,'ueillet')"/>euillet<xsl:value-of select="substring-after(.,'ueillet')"/></xsl:if>
       <xsl:if test="matches(.,'^FUEILLET(\w*)$')">FEUILLET<xsl:value-of select="substring-after(.,'FUEILLET')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fueillage(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ueillage(\w*)$')"><xsl:value-of select="substring-before(.,'ueillage')"/>euillage<xsl:value-of select="substring-after(.,'ueillage')"/></xsl:if>
       <xsl:if test="matches(.,'^FUEILLAGE(\w*)$')">FEUILLAGE<xsl:value-of select="substring-after(.,'FUEILLAGE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fueil$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ueil$')"><xsl:value-of select="substring-before(.,'ueil')"/>euille</xsl:if>
       <xsl:if test="matches(.,'^FUEIL$')">FEUILLE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^siege(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]iege(\w*)$')"><xsl:value-of select="substring-before(.,'iege')"/>iège<xsl:value-of select="substring-after(.,'iege')"/></xsl:if>
       <xsl:if test="matches(.,'^SIEGE(\w*)$')">SIÈGE<xsl:value-of select="substring-after(.,'SIEGE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^acquerir$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]cquerir$')"><xsl:value-of select="substring-before(.,'cquerir')"/>cquérir</xsl:if>
       <xsl:if test="matches(.,'^ACQUERIR$')">ACQUÉRIR</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^degrez', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]egrez$')"><xsl:value-of select="substring-before(.,'egrez')"/>egrés</xsl:if>
       <xsl:if test="matches(.,'^DEGREZ$')">DEGRÉS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ennemys', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]nnemys$')"><xsl:value-of select="substring-before(.,'nnemys')"/>nnemis</xsl:if>
       <xsl:if test="matches(.,'^ENNEMYS$')">ENNEMIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^poete(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]oete(\w*)$')"><xsl:value-of select="substring-before(.,'oete')"/>oète<xsl:value-of select="substring-after(.,'oete')"/></xsl:if>
       <xsl:if test="matches(.,'^POETE(\w*)$')">POÈTE<xsl:value-of select="substring-after(.,'POETE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^Romme', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]omme$')"><xsl:value-of select="substring-before(.,'omme')"/>ome</xsl:if>
       <xsl:if test="matches(.,'^ROMME$')">ROME</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^dous', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ous$')"><xsl:value-of select="substring-before(.,'ous')"/>oux</xsl:if>
       <xsl:if test="matches(.,'^OUS$')">OUX</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^nommee(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Nn]ommee(\w*)$')"><xsl:value-of select="substring-before(.,'ommee')"/>ommée<xsl:value-of select="substring-after(.,'ommee')"/></xsl:if>
       <xsl:if test="matches(.,'^NOMMEE(\w*)$')">NOMMÉE<xsl:value-of select="substring-after(.,'NOMMEE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^paour(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]aour(\w*)$')"><xsl:value-of select="substring-before(.,'aour')"/>eur<xsl:value-of select="substring-after(.,'aour')"/></xsl:if>
       <xsl:if test="matches(.,'^PAOUR(\w*)$')">PEUR<xsl:value-of select="substring-after(.,'PAOUR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^proces$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]roces$')"><xsl:value-of select="substring-before(.,'roces')"/>rocès</xsl:if>
       <xsl:if test="matches(.,'^PROCES$')">PROCÈS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^brief$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]rief$')"><xsl:value-of select="substring-before(.,'rief')"/>ref</xsl:if>
       <xsl:if test="matches(.,'^BRIEF$')">BREF</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^esperit(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]sperit(\w*)$')"><xsl:value-of select="substring-before(.,'sperit')"/>sprit<xsl:value-of select="substring-after(.,'sperit')"/></xsl:if>
       <xsl:if test="matches(.,'^ESPERIT(\w*)$')">ESPRIT<xsl:value-of select="substring-after(.,'ESPERIT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^considere$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]onsidere$')"><xsl:value-of select="substring-before(.,'onsidere')"/>onsidère</xsl:if>
       <xsl:if test="matches(.,'^CONSIDERE$')">CONSIDÈRE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^considerer$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]onsiderer$')"><xsl:value-of select="substring-before(.,'onsiderer')"/>onsidérer</xsl:if>
       <xsl:if test="matches(.,'^CONSIDERER$')">CONSIDÉRER</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^consideré(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]onsideré(\w*)$')"><xsl:value-of select="substring-before(.,'onsideré')"/>onsidéré</xsl:if>
       <xsl:if test="matches(.,'^CONSIDERÉ(\w*)$')">CONSIDÉRÉ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^considerant(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]onsiderant(\w*)$')"><xsl:value-of select="substring-before(.,'onsiderant')"/>onsidérant</xsl:if>
       <xsl:if test="matches(.,'^CONSIDERANT(\w*)$')">CONSIDÉRANT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estude(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^estude(\w*)$')">étude<xsl:value-of select="substring-after(.,'estude')"/></xsl:if>
       <xsl:if test="matches(.,'^Estude(\w*)$')">Étude<xsl:value-of select="substring-after(.,'Estude')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTUDE(\w*)$')">ÉTUDE<xsl:value-of select="substring-after(.,'ESTUDE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^testes$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]estes$')"><xsl:value-of select="substring-before(.,'estes')"/>êtes</xsl:if>
       <xsl:if test="matches(.,'^TESTES$')">TÊTES</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^priere(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]riere(\w*)$')"><xsl:value-of select="substring-before(.,'riere')"/>rière<xsl:value-of select="substring-after(.,'riere')"/></xsl:if>
       <xsl:if test="matches(.,'^PRIERE(\w*)$')">PRIÈRE<xsl:value-of select="substring-after(.,'PRIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^voyes$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]oyes$')"><xsl:value-of select="substring-before(.,'voyes')"/>voies</xsl:if>
       <xsl:if test="matches(.,'^VOYES$')">VOIES</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^homes?$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]omes?$')"><xsl:value-of select="substring-before(.,'ome')"/>omme<xsl:value-of select="substring-after(.,'ome')"/></xsl:if>
       <xsl:if test="matches(.,'^HOMES?$')">HOMME<xsl:value-of select="substring-after(.,'HOME')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^espaule(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^espaule(\w*)$')">épaule<xsl:value-of select="substring-after(.,'espaule')"/></xsl:if>
       <xsl:if test="matches(.,'^Espaule(\w*)$')">Épaule<xsl:value-of select="substring-after(.,'Espaule')"/></xsl:if>
       <xsl:if test="matches(.,'^ESPAULE(\w*)$')">ÉPAULE<xsl:value-of select="substring-after(.,'ESPAULE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^nud$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Nn]ud$')"><xsl:value-of select="substring-before(.,'ud')"/>u</xsl:if>
       <xsl:if test="matches(.,'^NUD$')">NU</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^presques$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]resques$')"><xsl:value-of select="substring-before(.,'resques')"/>resque</xsl:if>
       <xsl:if test="matches(.,'^PRESQUES$')">PRESQUE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^eternelle(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^eternelle(\w*)$')">éternelle<xsl:value-of select="substring-after(.,'eternelle')"/></xsl:if>
       <xsl:if test="matches(.,'^Eternelle(\w*)$')">Éternelle<xsl:value-of select="substring-after(.,'Eternelle')"/></xsl:if>
       <xsl:if test="matches(.,'^ETERNELLE(\w*)$')">ÉTERNELLE<xsl:value-of select="substring-after(.,'ETERNELLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^arriere(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]rriere(\w*)$')"><xsl:value-of select="substring-before(.,'rriere')"/>rrière<xsl:value-of select="substring-after(.,'rriere')"/></xsl:if>
       <xsl:if test="matches(.,'^ARRIERE(\w*)$')">ARRIÈRE<xsl:value-of select="substring-after(.,'ARRIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pais$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ais$')"><xsl:value-of select="substring-before(.,'ais')"/>ays</xsl:if>
       <xsl:if test="matches(.,'^PAIS$')">PAYS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^Ameriquains$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]meriquains$')"><xsl:value-of select="substring-before(.,'meriquains')"/>méricains</xsl:if>
       <xsl:if test="matches(.,'^AMERIQUAINS$')">AMÉRICAINS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^reput(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]eput(\w*)$')"><xsl:value-of select="substring-before(.,'eput')"/>éput<xsl:value-of select="substring-after(.,'eput')"/></xsl:if>
       <xsl:if test="matches(.,'^REPUT(\w*)$')">RÉPUT<xsl:value-of select="substring-after(.,'REPUT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ensuy(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]nsuy(\w*)$')"><xsl:value-of select="substring-before(.,'nsuy')"/>nsui<xsl:value-of select="substring-after(.,'nsuy')"/></xsl:if>
       <xsl:if test="matches(.,'^ENSUY(\w*)$')">ENSUI<xsl:value-of select="substring-after(.,'ENSUY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^doulceur(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]oulceur(\w*)$')"><xsl:value-of select="substring-before(.,'oulceur')"/>ouceur<xsl:value-of select="substring-after(.,'oulceur')"/></xsl:if>
       <xsl:if test="matches(.,'^DOULCEUR(\w*)$')">DOUCEUR<xsl:value-of select="substring-after(.,'DOULCEUR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^dautant$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]autant$')"><xsl:value-of select="substring-before(.,'autant')"/>'autant</xsl:if>
       <xsl:if test="matches(.,'^DAUTANT$')">D'AUTANT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^medecin(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]edecin(\w*)$')"><xsl:value-of select="substring-before(.,'edecin')"/>édecin<xsl:value-of select="substring-after(.,'edecin')"/></xsl:if>
       <xsl:if test="matches(.,'^MEDECIN(\w*)$')">MÉDECIN<xsl:value-of select="substring-after(.,'MEDECIN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^soucy(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]oucy(\w*)$')"><xsl:value-of select="substring-before(.,'oucy')"/>ouci<xsl:value-of select="substring-after(.,'oucy')"/></xsl:if>
       <xsl:if test="matches(.,'^SOUCY(\w*)$')">SOUCI<xsl:value-of select="substring-after(.,'SOUCY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^sejour(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]ejour(\w*)$')"><xsl:value-of select="substring-before(.,'ejour')"/>éjour<xsl:value-of select="substring-after(.,'ejour')"/></xsl:if>
       <xsl:if test="matches(.,'^SEJOUR(\w*)$')">SÉJOUR<xsl:value-of select="substring-after(.,'SEJOUR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^esc[^lira](\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^esc[^lira](\w*)$')">éc<xsl:value-of select="substring-after(.,'esc')"/></xsl:if>
       <xsl:if test="matches(.,'^Esc[^lira](\w*)$')">Éc<xsl:value-of select="substring-after(.,'Esc')"/></xsl:if>
       <xsl:if test="matches(.,'^ESC[^LIRA](\w*)$')">ÉC<xsl:value-of select="substring-after(.,'ESC')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^declar(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]eclar(\w*)$')"><xsl:value-of select="substring-before(.,'eclar')"/>éclar<xsl:value-of select="substring-after(.,'eclar')"/></xsl:if>
       <xsl:if test="matches(.,'^DECLAR(\w*)$')">DÉCLAR<xsl:value-of select="substring-after(.,'DECLAR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^levre(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]evre(\w*)$')"><xsl:value-of select="substring-before(.,'evre')"/>èvre<xsl:value-of select="substring-after(.,'evre')"/></xsl:if>
       <xsl:if test="matches(.,'^LEVRE(\w*)$')">LÈVRE<xsl:value-of select="substring-after(.,'LEVRE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mil$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]il$')"><xsl:value-of select="substring-before(.,'il')"/>ille</xsl:if>
       <xsl:if test="matches(.,'^MIL$')">MILLE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^regne(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]egne(\w*)$')"><xsl:value-of select="substring-before(.,'egne')"/>ègne<xsl:value-of select="substring-after(.,'egne')"/></xsl:if>
       <xsl:if test="matches(.,'^REGNE(\w*)$')">RÈGNE<xsl:value-of select="substring-after(.,'REGNE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^veus$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eus$')"><xsl:value-of select="substring-before(.,'eus')"/>us</xsl:if>
       <xsl:if test="matches(.,'^VEUS$')">VUS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^discretion(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]iscretion(\w*)$')"><xsl:value-of select="substring-before(.,'iscretion')"/>iscrétion<xsl:value-of select="substring-after(.,'iscretion')"/></xsl:if>
       <xsl:if test="matches(.,'^DISCRETION(\w*)$')">DISCRÉTION<xsl:value-of select="substring-after(.,'DISCRETION')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^prestre(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]restre(\w*)$')"><xsl:value-of select="substring-before(.,'restre')"/>rêtre<xsl:value-of select="substring-after(.,'restre')"/></xsl:if>
       <xsl:if test="matches(.,'^PRESTRE(\w*)$')">PRÊTRE<xsl:value-of select="substring-after(.,'PRESTRE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^voluntiers$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]oluntiers$')"><xsl:value-of select="substring-before(.,'oluntiers')"/>olontiers</xsl:if>
       <xsl:if test="matches(.,'^VOLUNTIERS$')">VOLONTIERS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^frize(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]rize(\w*)$')"><xsl:value-of select="substring-before(.,'rize')"/>rise<xsl:value-of select="substring-after(.,'rize')"/></xsl:if>
       <xsl:if test="matches(.,'^PRESTRE(\w*)$')">PRÊTRE<xsl:value-of select="substring-after(.,'PRESTRE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^obei(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]bei(\w*)$')"><xsl:value-of select="substring-before(.,'bei')"/>béi<xsl:value-of select="substring-after(.,'bei')"/></xsl:if>
       <xsl:if test="matches(.,'^OBEI(\w*)$')">OBÉI<xsl:value-of select="substring-after(.,'OBEI')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^procede(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]rocede(\w*)$')"><xsl:value-of select="substring-before(.,'rocede')"/>rocède<xsl:value-of select="substring-after(.,'rocede')"/></xsl:if>
       <xsl:if test="matches(.,'^PROCEDE(\w*)$')">PROCÈDE<xsl:value-of select="substring-after(.,'PROCEDE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^gist$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]ist$')"><xsl:value-of select="substring-before(.,'ist')"/>ît</xsl:if>
       <xsl:if test="matches(.,'^GIST$')">GÎT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^resis(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]esis(\w*)$')"><xsl:value-of select="substring-before(.,'esis')"/>ésis<xsl:value-of select="substring-after(.,'esis')"/></xsl:if>
       <xsl:if test="matches(.,'^RESIS(\w*)$')">RÉSIS<xsl:value-of select="substring-after(.,'RESIS')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^descou(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]escou(\w*)$')"><xsl:value-of select="substring-before(.,'escou')"/>écou<xsl:value-of select="substring-after(.,'escou')"/></xsl:if>
       <xsl:if test="matches(.,'^DESCOU(\w*)$')">DÉCOU<xsl:value-of select="substring-after(.,'DESCOU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mescha(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]escha(\w*)$')"><xsl:value-of select="substring-before(.,'escha')"/>écha<xsl:value-of select="substring-after(.,'escha')"/></xsl:if>
       <xsl:if test="matches(.,'^MESCHA(\w*)$')">MÉCHA<xsl:value-of select="substring-after(.,'MESCHA')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^verite(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]erite(\w*)$')"><xsl:value-of select="substring-before(.,'erite')"/>érité<xsl:value-of select="substring-after(.,'erite')"/></xsl:if>
       <xsl:if test="matches(.,'^VERITE(\w*)$')">VÉRITÉ<xsl:value-of select="substring-after(.,'VERITE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^verit(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]erit(\w*)$')"><xsl:value-of select="substring-before(.,'erit')"/>érit<xsl:value-of select="substring-after(.,'erit')"/></xsl:if>
       <xsl:if test="matches(.,'^VERIT(\w*)$')">VÉRIT<xsl:value-of select="substring-after(.,'VERIT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^oyseau(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]yseau(\w*)$')"><xsl:value-of select="substring-before(.,'yseau')"/>iseau<xsl:value-of select="substring-after(.,'yseau')"/></xsl:if>
       <xsl:if test="matches(.,'^OYSEAU(\w*)$')">OISEAU<xsl:value-of select="substring-after(.,'OYSEAU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^desormais$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esormais$')"><xsl:value-of select="substring-before(.,'esormais')"/>ésormais</xsl:if>
       <xsl:if test="matches(.,'^DESORMAIS$')">DÉSORMAIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pouvois$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ouvois$')"><xsl:value-of select="substring-before(.,'ouvois')"/>ouvais</xsl:if>
       <xsl:if test="matches(.,'^POUVOIS$')">POUVAIS</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)aiges?$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
        <xsl:if test="matches(.,'^(\w+)aiges?$')"><xsl:value-of select="substring-before(.,'aige')"/>age<xsl:value-of select="substring-after(.,'aige')"/></xsl:if>
        <xsl:if test="matches(.,'^(\w+)AIGES?$')"><xsl:value-of select="substring-before(.,'AIGE')"/>AGE<xsl:value-of select="substring-after(.,'AIGE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fasché(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]asché(\w*)$')"><xsl:value-of select="substring-before(.,'asché')"/>âché<xsl:value-of select="substring-after(.,'isaige')"/></xsl:if>
       <xsl:if test="matches(.,'^FASCHÉ(\w*)$')">FÂCHÉ<xsl:value-of select="substring-after(.,'FASCHÉ')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^expres$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]xpres$')"><xsl:value-of select="substring-before(.,'xpres')"/>xprès</xsl:if>
       <xsl:if test="matches(.,'^EXPRES$')">EXPRÈS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^chasteau(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]hasteau(\w*)$')"><xsl:value-of select="substring-before(.,'hasteau')"/>hâteau<xsl:value-of select="substring-after(.,'hasteau')"/></xsl:if>
       <xsl:if test="matches(.,'^CHASTEAU(\w*)$')">CHÂTEAU<xsl:value-of select="substring-after(.,'CHASTEAU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^receut$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]eceut$')"><xsl:value-of select="substring-before(.,'eceut')"/>eçut</xsl:if>
       <xsl:if test="matches(.,'^RECEUT$')">REÇUT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ars$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]rs$')"><xsl:value-of select="substring-before(.,'rs')"/>rts</xsl:if>
       <xsl:if test="matches(.,'^ARS$')">ARTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^veit$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eit$')"><xsl:value-of select="substring-before(.,'eit')"/>it</xsl:if>
       <xsl:if test="matches(.,'^VEIT$')">VIT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^compere(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ompere(\w*)$')"><xsl:value-of select="substring-before(.,'ompere')"/>ompère<xsl:value-of select="substring-after(.,'hasteau')"/></xsl:if>
       <xsl:if test="matches(.,'^COMPERE(\w*)$')">COMPÈRE<xsl:value-of select="substring-after(.,'COMPERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^riens$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]iens$')"><xsl:value-of select="substring-before(.,'iens')"/>ien</xsl:if>
       <xsl:if test="matches(.,'^RIENS$')">RIEN</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^eviter$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^eviter$')">éviter</xsl:if>
       <xsl:if test="matches(.,'^Eviter$')">Éviter</xsl:if>
       <xsl:if test="matches(.,'^EVITER$')">ÉVITER</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^lheure$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]heure$')"><xsl:value-of select="substring-before(.,'heure')"/>'heure</xsl:if>
       <xsl:if test="matches(.,'^LHEURE$')">L'HEURE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^colere(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]olere(\w*)$')"><xsl:value-of select="substring-before(.,'olere')"/>olère<xsl:value-of select="substring-after(.,'olere')"/></xsl:if>
       <xsl:if test="matches(.,'^COLERE(\w*)$')">COLÈRE<xsl:value-of select="substring-after(.,'COLERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^damoyselle(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]amoyselle(\w*)$')"><xsl:value-of select="substring-before(.,'amoyselle')"/>amoiselle<xsl:value-of select="substring-after(.,'olere')"/></xsl:if>
       <xsl:if test="matches(.,'^DAMOYSELLE(\w*)$')">DAMOISELLE<xsl:value-of select="substring-after(.,'DAMOYSELLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^precieu(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]recieu(\w*)$')"><xsl:value-of select="substring-before(.,'recieu')"/>récieu<xsl:value-of select="substring-after(.,'recieu')"/></xsl:if>
       <xsl:if test="matches(.,'^PRECIEU(\w*)$')">PRÉCIEU<xsl:value-of select="substring-after(.,'PRECIEU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^gener(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]ener(\w*)$')"><xsl:value-of select="substring-before(.,'ener')"/>énér<xsl:value-of select="substring-after(.,'ener')"/></xsl:if>
       <xsl:if test="matches(.,'^GENER(\w*)$')">GÉNÉR<xsl:value-of select="substring-after(.,'GENER')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^vescu(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]escu(\w*)$')"><xsl:value-of select="substring-before(.,'escu')"/>écu<xsl:value-of select="substring-after(.,'escu')"/></xsl:if>
       <xsl:if test="matches(.,'^VESCU(\w*)$')">VÉCU<xsl:value-of select="substring-after(.,'VESCU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^louenge(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]ouenge(\w*)$')"><xsl:value-of select="substring-before(.,'ouenge')"/>ouange<xsl:value-of select="substring-after(.,'ouenge')"/></xsl:if>
       <xsl:if test="matches(.,'^LOUENGE(\w*)$')">LOUANGE<xsl:value-of select="substring-after(.,'LOUENGE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^meine$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]eine$')"><xsl:value-of select="substring-before(.,'eine')"/>ène</xsl:if>
       <xsl:if test="matches(.,'^MEINE$')">MÈNE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)iesmes?$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)iesmes?$')"><xsl:value-of select="substring-before(.,'iesme')"/>ième<xsl:value-of select="substring-after(.,'iesme')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)IESMES?$')"><xsl:value-of select="substring-before(.,'IESME')"/>IÈME<xsl:value-of select="substring-after(.,'IESME')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^recomp(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]ecomp(\w*)$')"><xsl:value-of select="substring-before(.,'ecomp')"/>écomp<xsl:value-of select="substring-after(.,'ecomp')"/></xsl:if>
       <xsl:if test="matches(.,'^RECOMP(\w*)$')">RÉCOMP<xsl:value-of select="substring-after(.,'RECOMP')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^liez$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]iez$')"><xsl:value-of select="substring-before(.,'iez')"/>iés</xsl:if>
       <xsl:if test="matches(.,'^LIEZ$')">LIÉS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^difference(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ifference(\w*)$')"><xsl:value-of select="substring-before(.,'ifference')"/>ifférence<xsl:value-of select="substring-after(.,'ifference')"/></xsl:if>
       <xsl:if test="matches(.,'^DIFFERENCE(\w*)$')">DIFFÉRENCE<xsl:value-of select="substring-after(.,'DIFFERENCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ignorans$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ii]gnorans$')"><xsl:value-of select="substring-before(.,'gnorans')"/>gnorants</xsl:if>
       <xsl:if test="matches(.,'^IGNORANS$')">IGNORANTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^consequence(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]onsequence(\w*)$')"><xsl:value-of select="substring-before(.,'onsequence')"/>onséquence<xsl:value-of select="substring-after(.,'onsequence')"/></xsl:if>
       <xsl:if test="matches(.,'^CONSEQUENCE(\w*)$')">CONSÉQUENCE<xsl:value-of select="substring-after(.,'CONSEQUENCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^voulte(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]oulte(\w*)$')"><xsl:value-of select="substring-before(.,'oulte')"/>oûte<xsl:value-of select="substring-after(.,'oulte')"/></xsl:if>
       <xsl:if test="matches(.,'^VOULTE(\w*)$')">VOÛTE<xsl:value-of select="substring-after(.,'VOULTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^vuide(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]uide(\w*)$')"><xsl:value-of select="substring-before(.,'uide')"/>ide<xsl:value-of select="substring-after(.,'uide')"/></xsl:if>
       <xsl:if test="matches(.,'^VUIDE(\w*)$')">VIDE<xsl:value-of select="substring-after(.,'VUIDE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^vey$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]ey$')"><xsl:value-of select="substring-before(.,'ey')"/>is</xsl:if>
       <xsl:if test="matches(.,'^VEY$')">VIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^arrest(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]rrest(\w*)$')"><xsl:value-of select="substring-before(.,'rrest')"/>rrêt<xsl:value-of select="substring-after(.,'rrest')"/></xsl:if>
       <xsl:if test="matches(.,'^ARREST(\w*)$')">ARRÊT<xsl:value-of select="substring-after(.,'ARREST')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)credit(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Cc]redit(\w*)$')"><xsl:value-of select="substring-before(.,'redit')"/>rédit<xsl:value-of select="substring-after(.,'redit')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)CREDIT(\w*)$')"><xsl:value-of select="substring-before(.,'CREDIT')"/>CRÉDIT<xsl:value-of select="substring-after(.,'CREDIT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^povre(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ovre(\w*)$')"><xsl:value-of select="substring-before(.,'ovre')"/>auvre<xsl:value-of select="substring-after(.,'ovre')"/></xsl:if>
       <xsl:if test="matches(.,'^POVRE(\w*)$')">PAUVRE<xsl:value-of select="substring-after(.,'POVRE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)[^fh]erent$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
        <xsl:if test="matches(.,'^(\w+)[^fh]erent$')"><xsl:value-of select="substring-before(.,'erent')"/>èrent</xsl:if>
        <xsl:if test="matches(.,'^(\w+)[^FH]ERENT$')"><xsl:value-of select="substring-before(.,'ERENT')"/>ÈRENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ceans$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]eans$')"><xsl:value-of select="substring-before(.,'eans')"/>éans</xsl:if>
       <xsl:if test="matches(.,'^CEANS$')">CÉANS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mystere(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ystere(\w*)$')"><xsl:value-of select="substring-before(.,'ystere')"/>ystère<xsl:value-of select="substring-after(.,'ystere')"/></xsl:if>
       <xsl:if test="matches(.,'^MYSTERE(\w*)$')">MYSTÈRE<xsl:value-of select="substring-after(.,'MYSTERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^tenebre(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]enebre(\w*)$')"><xsl:value-of select="substring-before(.,'enebre')"/>énèbre<xsl:value-of select="substring-after(.,'enebre')"/></xsl:if>
       <xsl:if test="matches(.,'^TENEBRE(\w*)$')">TÉNÈBRE<xsl:value-of select="substring-after(.,'TENEBRE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^deliberé(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]eliberé(\w*)$')"><xsl:value-of select="substring-before(.,'eliberé')"/>elibéré<xsl:value-of select="substring-after(.,'eliberé')"/></xsl:if>
       <xsl:if test="matches(.,'^DELIBERÉ(\w*)$')">DELIBÉRÉ<xsl:value-of select="substring-after(.,'DELIBERÉ')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^serpens$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]erpens$')"><xsl:value-of select="substring-before(.,'erpens')"/>erpents</xsl:if>
       <xsl:if test="matches(.,'^SERPENS$')">SERPENTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^propous$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ropous$')"><xsl:value-of select="substring-before(.,'ropous')"/>ropos</xsl:if>
       <xsl:if test="matches(.,'^PROPOUS$')">PROPOS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^festes$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[fF]estes$')"><xsl:value-of select="substring-before(.,'estes')"/>êtes</xsl:if>
       <xsl:if test="matches(.,'^FESTES$')">FÊTES</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^annee(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
        <xsl:if test="matches(.,'^[Aa]nnee(\w*)$')"><xsl:value-of select="substring-before(.,'nnee')"/>nnée<xsl:value-of select="substring-after(.,'nnee')"/></xsl:if>
       <xsl:if test="matches(.,'^ANNEE(\w*)$')">ANNÉE<xsl:value-of select="substring-after(.,'ANNEE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^misere(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]isere(\w*)$')"><xsl:value-of select="substring-before(.,'isere')"/>isère<xsl:value-of select="substring-after(.,'isere')"/></xsl:if>
       <xsl:if test="matches(.,'^MISERE(\w*)$')">MISÈRE<xsl:value-of select="substring-after(.,'MISERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fumee(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]umee(\w*)$')"><xsl:value-of select="substring-before(.,'umee')"/>umée<xsl:value-of select="substring-after(.,'umee')"/></xsl:if>
       <xsl:if test="matches(.,'^FUMEE(\w*)$')">FUMÉE<xsl:value-of select="substring-after(.,'FUMEE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pluye(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]luye(\w*)$')"><xsl:value-of select="substring-before(.,'luye')"/>luie<xsl:value-of select="substring-after(.,'luye')"/></xsl:if>
       <xsl:if test="matches(.,'^PLUYE(\w*)$')">PLUIE<xsl:value-of select="substring-after(.,'PLUYE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^poeut$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]oeut$')"><xsl:value-of select="substring-before(.,'oeut')"/>eut</xsl:if>
       <xsl:if test="matches(.,'^POEUT$')">PEUT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^closture(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]losture(\w*)$')"><xsl:value-of select="substring-before(.,'losture')"/>lôture<xsl:value-of select="substring-after(.,'luye')"/></xsl:if>
       <xsl:if test="matches(.,'^CLOSTURE(\w*)$')">CLÔTURE<xsl:value-of select="substring-after(.,'CLOSTURE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^singuliere(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]inguliere(\w*)$')"><xsl:value-of select="substring-before(.,'inguliere')"/>ingulière<xsl:value-of select="substring-after(.,'inguliere')"/></xsl:if>
       <xsl:if test="matches(.,'^INGULIERE(\w*)$')">INGULIÈRE<xsl:value-of select="substring-after(.,'INGULIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^desespoir(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esespoir(\w*)$')"><xsl:value-of select="substring-before(.,'esespoir')"/>ésespoir<xsl:value-of select="substring-after(.,'esespoir')"/></xsl:if>
       <xsl:if test="matches(.,'^DESESPOIR(\w*)$')">DÉSESPOIR<xsl:value-of select="substring-after(.,'DESESPOIR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^operation(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]peration(\w*)$')"><xsl:value-of select="substring-before(.,'peration')"/>pération<xsl:value-of select="substring-after(.,'peration')"/></xsl:if>
       <xsl:if test="matches(.,'^OPERATION(\w*)$')">OPÉRATION<xsl:value-of select="substring-after(.,'OPERATION')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^flame(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]lame(\w*)$')"><xsl:value-of select="substring-before(.,'lame')"/>lamme<xsl:value-of select="substring-after(.,'lame')"/></xsl:if>
       <xsl:if test="matches(.,'^FLAME(\w*)$')">FLAMME<xsl:value-of select="substring-after(.,'FLAME')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^moien(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]oien(\w*)$')"><xsl:value-of select="substring-before(.,'oien')"/>oyen<xsl:value-of select="substring-after(.,'oien')"/></xsl:if>
       <xsl:if test="matches(.,'^MOIEN(\w*)$')">MOYEN<xsl:value-of select="substring-after(.,'MOIEN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^haste$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]aste$')"><xsl:value-of select="substring-before(.,'aste')"/>âte</xsl:if>
       <xsl:if test="matches(.,'^HASTE$')">HÂTE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^edifice(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^edifice(\w*)$')">édifice<xsl:value-of select="substring-after(.,'edifice')"/></xsl:if>
       <xsl:if test="matches(.,'^Edifice(\w*)$')">Édifice<xsl:value-of select="substring-after(.,'Edifice')"/></xsl:if>
       <xsl:if test="matches(.,'^EDIFICE(\w*)$')">ÉDIFICE<xsl:value-of select="substring-after(.,'EDIFICE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^preface(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]reface(\w*)$')"><xsl:value-of select="substring-before(.,'reface')"/>réface<xsl:value-of select="substring-after(.,'reface')"/></xsl:if>
       <xsl:if test="matches(.,'^PREFACE(\w*)$')">PRÉFACE<xsl:value-of select="substring-after(.,'PREFACE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^gay(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]ay(\w*)$')"><xsl:value-of select="substring-before(.,'ay')"/>ai<xsl:value-of select="substring-after(.,'ay')"/></xsl:if>
       <xsl:if test="matches(.,'^GAY(\w*)$')">GAI<xsl:value-of select="substring-after(.,'GAY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^esgard(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^esgard(\w*)$')">égard<xsl:value-of select="substring-after(.,'esgard')"/></xsl:if>
       <xsl:if test="matches(.,'^Esgard(\w*)$')">Égard<xsl:value-of select="substring-after(.,'Esgard')"/></xsl:if>
       <xsl:if test="matches(.,'^ESGARD(\w*)$')">ÉGARD<xsl:value-of select="substring-after(.,'ESGARD')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^diametre(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]iametre(\w*)$')"><xsl:value-of select="substring-before(.,'iametre')"/>iamètre<xsl:value-of select="substring-after(.,'iametre')"/></xsl:if>
       <xsl:if test="matches(.,'^DIAMETRE(\w*)$')">DIAMÈTRE<xsl:value-of select="substring-after(.,'DIAMETRE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^onc$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]nc$')"><xsl:value-of select="substring-before(.,'nc')"/>nques</xsl:if>
       <xsl:if test="matches(.,'^ONC$')">ONQUES</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pronun(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ronun(\w*)$')"><xsl:value-of select="substring-before(.,'ronun')"/>ronon<xsl:value-of select="substring-after(.,'ronun')"/></xsl:if>
       <xsl:if test="matches(.,'^PRONUN(\w*)$')">PRONON<xsl:value-of select="substring-after(.,'PRONUN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^debat(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ebat(\w*)$')"><xsl:value-of select="substring-before(.,'ebat')"/>ébat<xsl:value-of select="substring-after(.,'ebat')"/></xsl:if>
       <xsl:if test="matches(.,'^DEBAT(\w*)$')">DÉBAT<xsl:value-of select="substring-after(.,'DEBAT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mors$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ors$')"><xsl:value-of select="substring-before(.,'ors')"/>orts</xsl:if>
       <xsl:if test="matches(.,'^MORS$')">MORTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pillier(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]illier(\w*)$')"><xsl:value-of select="substring-before(.,'illier')"/>ilier<xsl:value-of select="substring-after(.,'illier')"/></xsl:if>
       <xsl:if test="matches(.,'^PILLIER(\w*)$')">PILIER<xsl:value-of select="substring-after(.,'PILLIER')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^communement$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ommunement$')"><xsl:value-of select="substring-before(.,'ommunement')"/>ommunément</xsl:if>
       <xsl:if test="matches(.,'^COMMUNEMENT$')">COMMUNÉMENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^flesche(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]lesche(\w*)$')"><xsl:value-of select="substring-before(.,'lesche')"/>lêche<xsl:value-of select="substring-after(.,'lesche')"/></xsl:if>
       <xsl:if test="matches(.,'^FLESCHE(\w*)$')">FLÊCHE<xsl:value-of select="substring-after(.,'FLESCHE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^scelon$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]celon$')"><xsl:value-of select="substring-before(.,'celon')"/>elon</xsl:if>
       <xsl:if test="matches(.,'^SCELON$')">SELON</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^souloit$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^souloit$')">avait l'habitude de</xsl:if>
       <xsl:if test="matches(.,'^Souloit$')">Avait l'habitude de</xsl:if>
       <xsl:if test="matches(.,'^SOULOIT$')">AVAIT L'HABITUDE DE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^vien$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[vV]ien$')"><xsl:value-of select="substring-before(.,'ien')"/>iens</xsl:if>
       <xsl:if test="matches(.,'^VIEN$')">VIENS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^apertement$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^apertement$')">ouvertement</xsl:if>
       <xsl:if test="matches(.,'^Apertement$')">Ouvertement</xsl:if>
       <xsl:if test="matches(.,'^APERTEMENT$')">OUVERTEMENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estang(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^estang(\w*)$')">étang<xsl:value-of select="substring-after(.,'estang')"/></xsl:if>
       <xsl:if test="matches(.,'^Estang(\w*)$')">Étang<xsl:value-of select="substring-after(.,'Estang')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTANG(\w*)$')">ÉTANG<xsl:value-of select="substring-after(.,'ESTANG')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^remply(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[rR]emply(\w*)$')"><xsl:value-of select="substring-before(.,'emply')"/>empli<xsl:value-of select="substring-after(.,'emply')"/></xsl:if>
       <xsl:if test="matches(.,'^REMPLY(\w*)$')">REMPLI<xsl:value-of select="substring-after(.,'REMPLY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^clerement(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]lerement(\w*)$')"><xsl:value-of select="substring-before(.,'lerement')"/>lairement<xsl:value-of select="substring-after(.,'lerement')"/></xsl:if>
       <xsl:if test="matches(.,'^CLEREMENT(\w*)$')">CLAIREMENT<xsl:value-of select="substring-after(.,'CLEREMENT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^masle(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]asle(\w*)$')"><xsl:value-of select="substring-before(.,'asle')"/>âle<xsl:value-of select="substring-after(.,'asle')"/></xsl:if>
       <xsl:if test="matches(.,'^MASLE(\w*)$')">MÂLE<xsl:value-of select="substring-after(.,'masle')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^allegue(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]llegue(\w*)$')"><xsl:value-of select="substring-before(.,'llegue')"/>llègue<xsl:value-of select="substring-after(.,'llegue')"/></xsl:if>
       <xsl:if test="matches(.,'^ALLEGUE(\w*)$')">ALLÈGUE<xsl:value-of select="substring-after(.,'ALLEGUE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^donnee(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]onnee(\w*)$')"><xsl:value-of select="substring-before(.,'onnee')"/>onnée<xsl:value-of select="substring-after(.,'onnee')"/></xsl:if>
       <xsl:if test="matches(.,'^DONNEE(\w*)$')">DONNÉE<xsl:value-of select="substring-after(.,'DONNEE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^egal(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^egal(\w*)$')">égal<xsl:value-of select="substring-after(.,'egal')"/></xsl:if>
       <xsl:if test="matches(.,'^Egal(\w*)$')">Égal<xsl:value-of select="substring-after(.,'Egal')"/></xsl:if>
       <xsl:if test="matches(.,'^EGAL(\w*)$')">ÉGAL<xsl:value-of select="substring-after(.,'EGAL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^gregeois(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]regeois(\w*)$')"><xsl:value-of select="substring-before(.,'regeois')"/>régeois<xsl:value-of select="substring-after(.,'regeois')"/></xsl:if>
       <xsl:if test="matches(.,'^GREGEOIS(\w*)$')">GRÉGEOIS<xsl:value-of select="substring-after(.,'GREGEOIS')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^etern(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^etern(\w*)$')">étern<xsl:value-of select="substring-after(.,'etern')"/></xsl:if>
       <xsl:if test="matches(.,'^Etern(\w*)$')">Étern<xsl:value-of select="substring-after(.,'Etern')"/></xsl:if>
       <xsl:if test="matches(.,'^ETERN(\w*)$')">ÉTERN<xsl:value-of select="substring-after(.,'ETERN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^siecle(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]iecle(\w*)$')"><xsl:value-of select="substring-before(.,'iecle')"/>iècle<xsl:value-of select="substring-after(.,'iecle')"/></xsl:if>
       <xsl:if test="matches(.,'^SIECLE(\w*)$')">SIÈCLE<xsl:value-of select="substring-after(.,'SIECLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^poulce(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]oulce(\w*)$')"><xsl:value-of select="substring-before(.,'oulce')"/>ouce<xsl:value-of select="substring-after(.,'oulce')"/></xsl:if>
       <xsl:if test="matches(.,'^POULCE(\w*)$')">POUCE<xsl:value-of select="substring-after(.,'POULCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fenestre(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]enestre(\w*)$')"><xsl:value-of select="substring-before(.,'enestre')"/>enêtre<xsl:value-of select="substring-after(.,'enestre')"/></xsl:if>
       <xsl:if test="matches(.,'^FENESTRE(\w*)$')">FENÊTRE<xsl:value-of select="substring-after(.,'FENESTRE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^tempeste(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]empeste(\w*)$')"><xsl:value-of select="substring-before(.,'empeste')"/>empête<xsl:value-of select="substring-after(.,'empeste')"/></xsl:if>
       <xsl:if test="matches(.,'^TEMPESTE(\w*)$')">TEMPÊTE<xsl:value-of select="substring-after(.,'TEMPESTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^depart(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]epart(\w*)$')"><xsl:value-of select="substring-before(.,'epart')"/>épart<xsl:value-of select="substring-after(.,'epart')"/></xsl:if>
       <xsl:if test="matches(.,'^DEPART(\w*)$')">DÉPART<xsl:value-of select="substring-after(.,'DEPART')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^creature(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]reature(\w*)$')"><xsl:value-of select="substring-before(.,'reature')"/>réature<xsl:value-of select="substring-after(.,'reature')"/></xsl:if>
       <xsl:if test="matches(.,'^CREATURE(\w*)$')">CRÉATURE<xsl:value-of select="substring-after(.,'CREATURE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^braz$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]raz$')"><xsl:value-of select="substring-before(.,'raz')"/>ras</xsl:if>
       <xsl:if test="matches(.,'^BRAZ$')">BRAS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^soupper(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]oupper(\w*)$')"><xsl:value-of select="substring-before(.,'oupper')"/>ouper<xsl:value-of select="substring-after(.,'oupper')"/></xsl:if>
       <xsl:if test="matches(.,'^SOUPPER(\w*)$')">SOUPER<xsl:value-of select="substring-after(.,'SOUPPER')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^opposite$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]pposite$')"><xsl:value-of select="substring-before(.,'pposite')"/>opposé</xsl:if>
       <xsl:if test="matches(.,'^OPPOSITE$')">OPPOSÉ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^facent$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]acent$')"><xsl:value-of select="substring-before(.,'acent')"/>assent</xsl:if>
       <xsl:if test="matches(.,'^FACENT$')">FASSENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^leger(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]eger(\w*)$')"><xsl:value-of select="substring-before(.,'eger')"/>éger<xsl:value-of select="substring-after(.,'eger')"/></xsl:if>
       <xsl:if test="matches(.,'^LEGER(\w*)$')">LÉGER<xsl:value-of select="substring-after(.,'LEGER')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^eaue$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[eE]aue$')"><xsl:value-of select="substring-before(.,'aue')"/>au</xsl:if>
       <xsl:if test="matches(.,'^EAUE$')">EAU</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^zele(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Zz]ele(\w*)$')"><xsl:value-of select="substring-before(.,'ele')"/>èle<xsl:value-of select="substring-after(.,'ele')"/></xsl:if>
       <xsl:if test="matches(.,'^ZELE(\w*)$')">ZÈLE<xsl:value-of select="substring-after(.,'ZELE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(s|ntr|pl|cr)ainct(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(s|ntr|pl|cr|Pl|Cr|S)ainct(\w*)$')"><xsl:value-of select="substring-before(.,'ainct')"/>aint<xsl:value-of select="substring-after(.,'ainct')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(S|NTR|PL|CR)AINCT(\w*)$')"><xsl:value-of select="substring-before(.,'AINCT')"/>AINT<xsl:value-of select="substring-after(.,'AINCT')"/></xsl:if></reg></choice>
</xsl:when> 
<xsl:when test="matches(.,'^obeyr$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]beyr$')"><xsl:value-of select="substring-before(.,'beyr')"/>béir</xsl:if>
       <xsl:if test="matches(.,'^OBEYR$')">OBÉIR</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^cercher$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ercher$')"><xsl:value-of select="substring-before(.,'ercher')"/>hercher</xsl:if>
       <xsl:if test="matches(.,'^CERCHER$')">CHERCHER</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^renommee(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]enommee(\w*)$')"><xsl:value-of select="substring-before(.,'enommee')"/>enommée<xsl:value-of select="substring-after(.,'enommee')"/></xsl:if>
       <xsl:if test="matches(.,'^RENOMMEE(\w*)$')">RENOMMÉE<xsl:value-of select="substring-after(.,'RENOMMEE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^arrivee(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]rrivee(\w*)$')"><xsl:value-of select="substring-before(.,'rrivee')"/>rrivée<xsl:value-of select="substring-after(.,'rrivee')"/></xsl:if>
       <xsl:if test="matches(.,'^ARRIVEE(\w*)$')">ARRIVÉE<xsl:value-of select="substring-after(.,'ARRIVEE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^requerir$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]equerir$')"><xsl:value-of select="substring-before(.,'equerir')"/>equérir</xsl:if>
       <xsl:if test="matches(.,'^REQUERIR$')">REQUÉRIR</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ceremonie(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]eremonie(\w*)$')"><xsl:value-of select="substring-before(.,'eremonie')"/>érémonie<xsl:value-of select="substring-after(.,'eremonie')"/></xsl:if>
       <xsl:if test="matches(.,'^CEREMONIE(\w*)$')">CÉRÉMONIE<xsl:value-of select="substring-after(.,'CEREMONIE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fiere(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]iere(\w*)$')"><xsl:value-of select="substring-before(.,'iere')"/>ière<xsl:value-of select="substring-after(.,'iere')"/></xsl:if>
       <xsl:if test="matches(.,'^FIERE(\w*)$')">FIÈRE<xsl:value-of select="substring-after(.,'FIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^tetin(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]etin(\w*)$')"><xsl:value-of select="substring-before(.,'etin')"/>étin<xsl:value-of select="substring-after(.,'etin')"/></xsl:if>
       <xsl:if test="matches(.,'^TETIN(\w*)$')">TÉTIN<xsl:value-of select="substring-after(.,'TETIN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mons$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ons$')"><xsl:value-of select="substring-before(.,'ons')"/>onts</xsl:if>
       <xsl:if test="matches(.,'^MONS$')">MONTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^sepulchr(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]epulchr(\w*)$')"><xsl:value-of select="substring-before(.,'epulchr')"/>épulchr<xsl:value-of select="substring-after(.,'epulchr')"/></xsl:if>
       <xsl:if test="matches(.,'^SEPULCHR(\w*)$')">SÉPULCHR<xsl:value-of select="substring-after(.,'SEPULCHR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estiez$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^estiez$')">étiez</xsl:if>
       <xsl:if test="matches(.,'^Estiez$')">Étiez</xsl:if>
       <xsl:if test="matches(.,'^ESTIEZ$')">ÉTIEZ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ancor$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^ancor$')">encore</xsl:if>
       <xsl:if test="matches(.,'^Ancor$')">Encore</xsl:if>
       <xsl:if test="matches(.,'^ANCOR$')">ENCORE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^cuyde$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
     <xsl:if test="matches(.,'^[Cc]uyde$')"><xsl:value-of select="substring-before(.,'uyde')"/>uide</xsl:if>
     <xsl:if test="matches(.,'^CUYDE$')">CUIDE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^prez$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]rez$')"><xsl:value-of select="substring-before(.,'rez')"/>rés</xsl:if>
       <xsl:if test="matches(.,'^PREZ$')">PRÉS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^esbahy(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^esbahy(\w*)$')">ébahi<xsl:value-of select="substring-after(.,'esbahy')"/></xsl:if>
       <xsl:if test="matches(.,'^Esbahy(\w*)$')">Ébahi<xsl:value-of select="substring-after(.,'Esbahy')"/></xsl:if>
       <xsl:if test="matches(.,'^ESBAHY(\w*)$')">ÉBAHI<xsl:value-of select="substring-after(.,'ESBAHY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^apris$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]pris$')"><xsl:value-of select="substring-before(.,'pris')"/>ppris</xsl:if>
       <xsl:if test="matches(.,'^APRIS$')">APPRIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^presompt(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]resompt(\w*)$')"><xsl:value-of select="substring-before(.,'resompt')"/>résompt<xsl:value-of select="substring-after(.,'resompt')"/></xsl:if>
       <xsl:if test="matches(.,'^PRESOMPT(\w*)$')">PRÉSOMPT<xsl:value-of select="substring-after(.,'PRESOMPT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^seurs$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]eurs$')"><xsl:value-of select="substring-before(.,'eurs')"/>oeurs</xsl:if>
       <xsl:if test="matches(.,'^SEURS$')">SOEURS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ingenieu(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
        <xsl:if test="matches(.,'^[Ii]ngenieu(\w*)$')"><xsl:value-of select="substring-before(.,'ngenieu')"/>ngénieu<xsl:value-of select="substring-after(.,'ngenieu')"/></xsl:if>
       <xsl:if test="matches(.,'^INGENIEU(\w*)$')">INGÉNIEU<xsl:value-of select="substring-after(.,'INGENIEU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^emblem(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]mblem(\w*)$')"><xsl:value-of select="substring-before(.,'mblem')"/>mblèm<xsl:value-of select="substring-after(.,'mblem')"/></xsl:if>
       <xsl:if test="matches(.,'^EMBLEM(\w*)$')">EMBLÈM<xsl:value-of select="substring-after(.,'EMBLEM')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^avient$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]vient$')"><xsl:value-of select="substring-before(.,'vient')"/>dvient</xsl:if>
       <xsl:if test="matches(.,'^AVIENT$')">ADVIENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^colomne(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]olomne(\w*)$')"><xsl:value-of select="substring-before(.,'olomne')"/>olonne<xsl:value-of select="substring-after(.,'olomne')"/></xsl:if>
       <xsl:if test="matches(.,'^COLOMNE(\w*)$')">COLONNE<xsl:value-of select="substring-after(.,'COLOMNE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^execut(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^execut(\w*)$')">exécut<xsl:value-of select="substring-after(.,'execut')"/></xsl:if>
       <xsl:if test="matches(.,'^Execut(\w*)$')">Exécut<xsl:value-of select="substring-after(.,'Execut')"/></xsl:if>
       <xsl:if test="matches(.,'^EXECUT(\w*)$')">EXÉCUT<xsl:value-of select="substring-after(.,'EXECUT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^peniten(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^peniten(\w*)$')">péniten<xsl:value-of select="substring-after(.,'peniten')"/></xsl:if>
       <xsl:if test="matches(.,'^PENITEN(\w*)$')">PÉNITEN<xsl:value-of select="substring-after(.,'PENITEN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ecri(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^ecri(\w*)$')">écri<xsl:value-of select="substring-after(.,'ecri')"/></xsl:if>
       <xsl:if test="matches(.,'^ECRI(\w*)$')">ÉCRI<xsl:value-of select="substring-after(.,'ECRI')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^bous$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]ous$')"><xsl:value-of select="substring-before(.,'ous')"/>outs</xsl:if>
       <xsl:if test="matches(.,'^BOUS$')">BOUTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^greque(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]reque(\w*)$')"><xsl:value-of select="substring-before(.,'reque')"/>recque<xsl:value-of select="substring-after(.,'reque')"/></xsl:if>
       <xsl:if test="matches(.,'^GREQUE(\w*)$')">GRECQUE<xsl:value-of select="substring-after(.,'GREQUE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^defaut(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]efaut(\w*)$')"><xsl:value-of select="substring-before(.,'efaut')"/>éfaut<xsl:value-of select="substring-after(.,'efaut')"/></xsl:if>
       <xsl:if test="matches(.,'^DEFAUT(\w*)$')">DÉFAUT<xsl:value-of select="substring-after(.,'DEFAUT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ditte(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]itte(\w*)$')"><xsl:value-of select="substring-before(.,'itte')"/>ite<xsl:value-of select="substring-after(.,'itte')"/></xsl:if>
       <xsl:if test="matches(.,'^DITTE(\w*)$')">DITE<xsl:value-of select="substring-after(.,'DITTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^accens$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ccens$')"><xsl:value-of select="substring-before(.,'ccens')"/>ccents</xsl:if>
       <xsl:if test="matches(.,'^ACCENS$')">ACCENTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^hayne(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]ayne(\w*)$')"><xsl:value-of select="substring-before(.,'ayne')"/>aine<xsl:value-of select="substring-after(.,'ayne')"/></xsl:if>
       <xsl:if test="matches(.,'^HAYNE(\w*)$')">HAINE<xsl:value-of select="substring-after(.,'HAYNE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^jay(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Jj]ay(\w*)$')"><xsl:value-of select="substring-before(.,'ay')"/>'ai<xsl:value-of select="substring-after(.,'ay')"/></xsl:if>
       <xsl:if test="matches(.,'^JAY(\w*)$')">J'AI<xsl:value-of select="substring-after(.,'JAY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^deseing(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]eseing(\w*)$')"><xsl:value-of select="substring-before(.,'eseing')"/>essin<xsl:value-of select="substring-after(.,'eseing')"/></xsl:if>
       <xsl:if test="matches(.,'^DESEING(\w*)$')">DESSEIN<xsl:value-of select="substring-after(.,'DESEING')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^umbr(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^umbr(\w*)$')">ombr<xsl:value-of select="substring-after(.,'umbr')"/></xsl:if>
       <xsl:if test="matches(.,'^Umbr(\w*)$')">Ombr<xsl:value-of select="substring-after(.,'Umbr')"/></xsl:if>
       <xsl:if test="matches(.,'^UMBR(\w*)$')">OMBR<xsl:value-of select="substring-after(.,'UMBR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pitie(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^pitie(\w*)$')"><xsl:value-of select="substring-before(.,'pitie')"/>pitié<xsl:value-of select="substring-after(.,'pitie')"/></xsl:if>
       <xsl:if test="matches(.,'^PITIE(\w*)$')">PITIÉ<xsl:value-of select="substring-after(.,'PITIE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^region(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]egion(\w*)$')"><xsl:value-of select="substring-before(.,'egion')"/>égion<xsl:value-of select="substring-after(.,'egion')"/></xsl:if>
       <xsl:if test="matches(.,'^REGION(\w*)$')">RÉGION<xsl:value-of select="substring-after(.,'REGION')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^desert(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esert(\w*)$')"><xsl:value-of select="substring-before(.,'esert')"/>ésert<xsl:value-of select="substring-after(.,'esert')"/></xsl:if>
       <xsl:if test="matches(.,'^DESERT(\w*)$')">DÉSERT<xsl:value-of select="substring-after(.,'DESERT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estoille(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^estoille(\w*)$')">étoile<xsl:value-of select="substring-after(.,'estoille')"/></xsl:if>
       <xsl:if test="matches(.,'^Estoille(\w*)$')">Étoile<xsl:value-of select="substring-after(.,'Estoille')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTOILLE(\w*)$')">ÉSTOILE<xsl:value-of select="substring-after(.,'ESTOILLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^toille(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]oille(\w*)$')"><xsl:value-of select="substring-before(.,'oille')"/>oile<xsl:value-of select="substring-after(.,'oille')"/></xsl:if>
       <xsl:if test="matches(.,'^TOILLE(\w*)$')">TOILE<xsl:value-of select="substring-after(.,'TOILLE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^evide(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^evide(\w*)$')">évide<xsl:value-of select="substring-after(.,'evide')"/></xsl:if>
       <xsl:if test="matches(.,'^Evide(\w*)$')">Évide<xsl:value-of select="substring-after(.,'Evide')"/></xsl:if>
       <xsl:if test="matches(.,'^EVIDE(\w*)$')">ÉVIDE<xsl:value-of select="substring-after(.,'EVIDE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^Ameriq$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]meriq$')"><xsl:value-of select="substring-before(.,'meriq')"/>mérique</xsl:if>
       <xsl:if test="matches(.,'^AMERIQ$')">AMÉRIQUE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^recit(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]ecit(\w*)$')"><xsl:value-of select="substring-before(.,'ecit')"/>écit<xsl:value-of select="substring-after(.,'ecit')"/></xsl:if>
       <xsl:if test="matches(.,'^RECIT(\w*)$')">RÉCIT<xsl:value-of select="substring-after(.,'RECIT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^moings$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]oings$')"><xsl:value-of select="substring-before(.,'oings')"/>oins</xsl:if>
       <xsl:if test="matches(.,'^MOINGS$')">MOINS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^commant$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ommant$')"><xsl:value-of select="substring-before(.,'ommant')"/>omment</xsl:if>
       <xsl:if test="matches(.,'^COMMANT$')">COMMENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^denote(\w*)$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]enote(\w*)$')"><xsl:value-of select="substring-before(.,'enote')"/>énote<xsl:value-of select="substring-after(.,'enote')"/></xsl:if>
       <xsl:if test="matches(.,'^DENOTE(\w*)$')">DÉNOTE<xsl:value-of select="substring-after(.,'DENOTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^peus$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]eus$')"><xsl:value-of select="substring-before(.,'eus')"/>eux</xsl:if>
       <xsl:if test="matches(.,'^PEUS$')">PEUX</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^heureus$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]eureus$')"><xsl:value-of select="substring-before(.,'eureus')"/>eureux</xsl:if>
       <xsl:if test="matches(.,'^HEUREUS$')">HEUREUX</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fons$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ons$')"><xsl:value-of select="substring-before(.,'ons')"/>ond</xsl:if>
       <xsl:if test="matches(.,'^FONS$')">FOND</xsl:if></reg></choice>
            </xsl:when> 
            <!--CONJUGAISON-->
<xsl:when test="matches(.,'^voyt$', 'i')">
    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
        <xsl:if test="matches(.,'^(v|V)oyt$')"><xsl:value-of select="substring-before(.,'oyt')"/>oit</xsl:if>
        <xsl:if test="matches(.,'^VOYT$')">VOIT</xsl:if></reg></choice>
           </xsl:when>
<xsl:when test="matches(.,'^(\w+)(n|l)oyt$', 'i')">
              <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
    <xsl:if test="matches(.,'^(\w+)(n|l)oyt$')"><xsl:value-of select="substring-before(.,'oyt')"/>ait</xsl:if>
    <xsl:if test="matches(.,'^(\w+)(N|L)OYT$')"><xsl:value-of select="substring-before(.,'OYT')"/>AIT</xsl:if></reg></choice>
           </xsl:when>
<xsl:when test="matches(.,'^(\w+)(n|l)oyent$', 'i')">
              <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
    <xsl:if test="matches(.,'^(\w+)(n|l)oyent$')"><xsl:value-of select="substring-before(.,'oyent')"/>aient</xsl:if>
    <xsl:if test="matches(.,'^(\w+)(N|L)OYENT$')"><xsl:value-of select="substring-before(.,'OYENT')"/>AIENT</xsl:if></reg></choice>
           </xsl:when>
<xsl:when test="matches(.,'^(\w+)(n|l)oi(t|s)$', 'i')">
              <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
    <xsl:if test="matches(.,'^(\w+)(n|l)oi(t|s)$')"><xsl:value-of select="substring-before(.,'oi')"/>ai<xsl:value-of select="substring-after(.,'oi')"/></xsl:if>
    <xsl:if test="matches(.,'^(\w+)(N|L)OI(T|S)$')"><xsl:value-of select="substring-before(.,'OI')"/>AI<xsl:value-of select="substring-after(.,'OI')"/></xsl:if></reg></choice>
           </xsl:when>
<xsl:when test="matches(.,'^(\w+)(n|l)oient$', 'i')">
              <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
    <xsl:if test="matches(.,'^(\w+)(n|l)oient$')"><xsl:value-of select="substring-before(.,'oient')"/>aient</xsl:if>
    <xsl:if test="matches(.,'^(\w+)(N|L)OIENT$')"><xsl:value-of select="substring-before(.,'OIENT')"/>AIENT</xsl:if></reg></choice>
           </xsl:when>
<xsl:when test="matches(.,'^(\w+)ploye$', 'i')">
              <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
    <xsl:if test="matches(.,'^(\w+)ploye$')"><xsl:value-of select="substring-before(.,'ploye')"/>ploie</xsl:if>
    <xsl:if test="matches(.,'^(\w+)PLOYE$')"><xsl:value-of select="substring-before(.,'PLOYE')"/>PLOIE</xsl:if></reg></choice>
           </xsl:when>
<xsl:when test="matches(.,'^vouloye$', 'i')">
           <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(v|V)ouloye$')"><xsl:value-of select="substring-before(.,'ouloye')"/>oulais</xsl:if>
       <xsl:if test="matches(.,'^VOULOYE$')"><xsl:value-of select="substring-before(.,'VOULOYE')"/>OULAIS</xsl:if></reg></choice>
              </xsl:when>
<xsl:when test="matches(.,'^ayent$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)yent$')"><xsl:value-of select="substring-before(.,'yent')"/>ient</xsl:if>
       <xsl:if test="matches(.,'^AYENT$')">AIENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[^y]eray$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^y]eray$')"><xsl:value-of select="substring-before(.,'eray')"/>erai</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^Y]ERAY$')"><xsl:value-of select="substring-before(.,'ERAY')"/>ERAI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)yeray$', 'i')"> 
<!--payeray-->
                   <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)yeray$')"><xsl:value-of select="substring-before(.,'yeray')"/>ierai</xsl:if>
       <xsl:if test="matches(.,'^(\w+)YERAY$')"><xsl:value-of select="substring-before(.,'YERAY')"/>IERAI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^appoy(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)ppoy$')"><xsl:value-of select="substring-before(.,'ppoy')"/>ppuy<xsl:value-of select="substring-after(.,'ppoy')"/></xsl:if>
       <xsl:if test="matches(.,'^APPOY$')">APPUY<xsl:value-of select="substring-after(.,'APPOY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)tost$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(t|T)ost$')"><xsl:value-of select="substring-before(.,'ost')"/>ôt</xsl:if>
       <xsl:if test="matches(.,'^(\w*)TOST$')"><xsl:value-of select="substring-before(.,'TOST')"/>ÔT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^h?ost[^ir](\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]?ost[^ir](\w+)$')"><xsl:value-of select="substring-before(.,'ost')"/>ôt<xsl:value-of select="substring-after(.,'ost')"/></xsl:if>
       <xsl:if test="matches(.,'^H?OST[^IR](\w+)$')"><xsl:value-of select="substring-before(.,'OST')"/>ÔT<xsl:value-of select="substring-after(.,'OST')"/></xsl:if></reg></choice>
            </xsl:when> 
<xsl:when test="matches(.,'^goust(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(G|g)oust(\w*)$')"><xsl:value-of select="substring-before(.,'oust')"/>oût<xsl:value-of select="substring-after(.,'oust')"/></xsl:if>
       <xsl:if test="matches(.,'^GOUST(\w*)$')">GOÛT<xsl:value-of select="substring-after(.,'GOUST')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^feist$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(f|F)eist$')"><xsl:value-of select="substring-before(.,'eist')"/>ît</xsl:if>
       <xsl:if test="matches(.,'^FEIST$')">FÎT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^feust$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(f|F)eust$')"><xsl:value-of select="substring-before(.,'eust')"/>ut</xsl:if>
       <xsl:if test="matches(.,'^FEUST$')">FUT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^feut$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(f|F)eut$')"><xsl:value-of select="substring-before(.,'eut')"/>ut</xsl:if>
       <xsl:if test="matches(.,'^FEUT$')">FUT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^afestoit$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)festoit$')"><xsl:value-of select="substring-before(.,'festoit')"/>ffûtait</xsl:if>
       <xsl:if test="matches(.,'^AFESTOIT$')">AFFÛTAIT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^a(p|c)rest(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)(p|c)rest(\w+)$')"><xsl:value-of select="substring-before(.,'rest')"/>rêt<xsl:value-of select="substring-after(.,'rest')"/></xsl:if>
       <xsl:if test="matches(.,'^A(P|C)REST(\w+)$')"><xsl:value-of select="substring-before(.,'REST')"/>RÊT<xsl:value-of select="substring-after(.,'REST')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^batee(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(B|b)atee(\w*)$')"><xsl:value-of select="substring-before(.,'atee')"/>âtée<xsl:value-of select="substring-after(.,'atee')"/></xsl:if>
       <xsl:if test="matches(.,'^BATEE(\w*)$')">BÂTÉE<xsl:value-of select="substring-after(.,'BASTEE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)(l|t)ast$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)(l|t)ast$')"><xsl:value-of select="substring-before(.,'ast')"/>ât</xsl:if>
       <xsl:if test="matches(.,'^(\w+)(L|T)AST$')"><xsl:value-of select="substring-before(.,'AST')"/>ÂT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^a?basta(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)?(B|b)asta(\w*)$')"><xsl:value-of select="substring-before(.,'asta')"/>âta<xsl:value-of select="substring-after(.,'asta')"/></xsl:if>
       <xsl:if test="matches(.,'^A?BASTA(\w*)$')"><xsl:value-of select="substring-before(.,'BASTA')"/>BÂTA<xsl:value-of select="substring-after(.,'BASTA')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^baste(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(B|b)aste(\w*)$')"><xsl:value-of select="substring-before(.,'aste')"/>ate<xsl:value-of select="substring-after(.,'aste')"/></xsl:if>
       <xsl:if test="matches(.,'^BASTE(\w*)$')">ATE<xsl:value-of select="substring-after(.,'BASTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(d|m)ist$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(d|m|D|M)ist$')"><xsl:value-of select="substring-before(.,'ist')"/>it</xsl:if>
       <xsl:if test="matches(.,'^(\w*)(D|M)IST$')"><xsl:value-of select="substring-before(.,'IST')"/>IT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aisne(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)isne(\w*)$')"><xsl:value-of select="substring-before(.,'isne')"/>iné<xsl:value-of select="substring-after(.,'isne')"/></xsl:if>
       <xsl:if test="matches(.,'^AISNE(\w*)$')">AINÉ<xsl:value-of select="substring-after(.,'AISNE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^asn(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^asn(\w*)$')">ân<xsl:value-of select="substring-after(.,'asn')"/></xsl:if>
       <xsl:if test="matches(.,'^Asn(\w*)$')">Ân<xsl:value-of select="substring-after(.,'Asn')"/></xsl:if>
       <xsl:if test="matches(.,'^ASN(\w*)$')">ÂN<xsl:value-of select="substring-after(.,'ASN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[(d|ha|u)]isne(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[(d|D|ha|Ha|u)]isne(\w*)$')"><xsl:value-of select="substring-before(.,'isne')"/>îne<xsl:value-of select="substring-after(.,'isne')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)[(D|HA|U)]ISNE(\w*)$')"><xsl:value-of select="substring-before(.,'ISNE')"/>ÎNE<xsl:value-of select="substring-after(.,'ISNE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(d|dor|m)esn(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(d|dor|m|D|Dor|M)esn(\w+)$')"><xsl:value-of select="substring-before(.,'esn')"/>én<xsl:value-of select="substring-after(.,'esn')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(D|DOR|M)ESN(\w*)$')"><xsl:value-of select="substring-before(.,'ESN')"/>ÉN<xsl:value-of select="substring-after(.,'ESN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(r|ch)esn(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(r|ch|R|CH)esn(\w+)$')"><xsl:value-of select="substring-before(.,'esn')"/>ên<xsl:value-of select="substring-after(.,'esn')"/></xsl:if>
       <xsl:if test="matches(.,'^(R|CH)ESN(\w+)$')"><xsl:value-of select="substring-before(.,'ESN')"/>ÊN<xsl:value-of select="substring-after(.,'ESN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^vesn(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(V|v)esn(\w*)$')"><xsl:value-of select="substring-before(.,'esn')"/>en<xsl:value-of select="substring-after(.,'esn')"/></xsl:if>
       <xsl:if test="matches(.,'^VESN(\w*)$')">VEN<xsl:value-of select="substring-after(.,'VESN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aprint$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)print$')"><xsl:value-of select="substring-before(.,'print')"/>pprît</xsl:if>
       <xsl:if test="matches(.,'^APRINT$')">APPRÎT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)print$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(p|P)rint$')"><xsl:value-of select="substring-before(.,'rint')"/>rît</xsl:if>
       <xsl:if test="matches(.,'^(\w*)PRINT$')"><xsl:value-of select="substring-before(.,'PRINT')"/>PRÎT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)prinse$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(p|P)rinse$')"><xsl:value-of select="substring-before(.,'rinse')"/>rise</xsl:if>
       <xsl:if test="matches(.,'^(\w*)PRINSE$')"><xsl:value-of select="substring-before(.,'PRINSE')"/>PRISE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[^(m|prouv|pl)]eurent$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^(m|prouv|pl)]eurent$')"><xsl:value-of select="substring-before(.,'eurent')"/>urent</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^(M|PROUV|PL)]EURENT$')"><xsl:value-of select="substring-before(.,'EURENT')"/>URENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[^p]leurent$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^p](l|L)eurent$')"><xsl:value-of select="substring-before(.,'eurent')"/>urent</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^P]LEURENT$')"><xsl:value-of select="substring-before(.,'LEURENT')"/>LURENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(dep)?leurent$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(dep|Dep)?(l|L)eurent$')"><xsl:value-of select="substring-before(.,'eurent')"/>urent</xsl:if>
       <xsl:if test="matches(.,'^(DEP)?LEURENT$')"><xsl:value-of select="substring-before(.,'LEURENT')"/>LURENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^prouveurent$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(tei:choice/tei:reg/tei:w,'^(p|P)rouveurent$')"><xsl:value-of select="substring-before(tei:choice/tei:reg/tei:w,'rouveurent')"/>rouvèrent</xsl:if>
       <xsl:if test="matches(tei:choice/tei:reg/tei:w,'^PROUVEURENT$')">PROUVÈRENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(m|l|[^n]t|r|p)asm(es|ans|oit)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(m|l|[^n]t|r|p)asm(es|ans|oit)$')"><xsl:value-of select="substring-before(.,'asm')"/>âm<xsl:value-of select="substring-after(.,'asm')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(M|L|[^N]T|R|P)ASM(ES|ANS|OIT)$')"><xsl:value-of select="substring-before(.,'ASM')"/>ÂM<xsl:value-of select="substring-after(.,'ASM')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(tr|m)esme(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(tr|m|Tr|M)esme(\w*)$')"><xsl:value-of select="substring-before(.,'esme')"/>ême<xsl:value-of select="substring-after(.,'esme')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(TR|M)ESME(\w*)$')"><xsl:value-of select="substring-before(.,'ESME')"/>ÊME<xsl:value-of select="substring-after(.,'ESME')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(omp|sp|nt|et|es?s|ur|gr|enr|yvr|enfr|char|g)aig[^r](\w*)$', 'i')">

<!--! Montaigne-->
                     <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(omp|sp|nt|et|es?s|ur|gr|enr|yvr|enfr|char|g|Es?s|ur|Gr|Enr|Yvr|Enfr|Char|G)aig[^r](\w*)$')"><xsl:value-of select="substring-before(.,'aig')"/>ag<xsl:value-of select="substring-after(.,'aig')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(OMP|SP|NT|ET|ES?S|UR|GR|ENR|YVR|ENFR|CHAR|G)AIG[^R](\w*)$')"><xsl:value-of select="substring-before(.,'AIG')"/>AG<xsl:value-of select="substring-after(.,'AIG')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(omp|sp|nt|et|es?s|ur|gr|enr|yvr|enfr|char|g)oig[^r](\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(omp|sp|nt|et|es?s|ur|gr|enr|yvr|enfr|char|g|Es?s|ur|Gr|Enr|Yvr|Enfr|Char|G)oig[^r](\w*)$')"><xsl:value-of select="substring-before(.,'oig')"/>og<xsl:value-of select="substring-after(.,'oig')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(OMP|SP|NT|ET|ES?S|UR|GR|ENR|YVR|ENFR|CHAR|G)OIG[^R](\w*)$')"><xsl:value-of select="substring-before(.,'OIG')"/>OG<xsl:value-of select="substring-after(.,'OIG')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(esl|p|j)ongn(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(esl|p|j|Esl|P|J)ongn(\w+)$')"><xsl:value-of select="substring-before(.,'ongn')"/>oign<xsl:value-of select="substring-after(.,'ongn')"/></xsl:if>
       <xsl:if test="matches(.,'^(ESL|P|J)ONGN(\w+)$')"><xsl:value-of select="substring-before(.,'ONGN')"/>OIGN<xsl:value-of select="substring-after(.,'ONGN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[^lpj]ongn(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^lpjPJL]ongn(\w+)$')"><xsl:value-of select="substring-before(.,'ongn')"/>onn<xsl:value-of select="substring-after(.,'ongn')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^LPJ]ONGN(\w+)$')"><xsl:value-of select="substring-before(.,'ONGN')"/>ONN<xsl:value-of select="substring-after(.,'ONGN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)rengea$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(R|r)engea$')"><xsl:value-of select="substring-before(.,'engea')"/>angea</xsl:if>
       <xsl:if test="matches(.,'^(\w*)RENGEA$')"><xsl:value-of select="substring-before(.,'RENGEA')"/>RANGEA</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)renge(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(R|r)enge(\w*)$')"><xsl:value-of select="substring-before(.,'enge')"/>ange<xsl:value-of select="substring-after(.,'enge')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)RENGE(\w*)$')"><xsl:value-of select="substring-before(.,'RENGE')"/>RANGE<xsl:value-of select="substring-after(.,'RENGE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)veoir$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(V|v)eoir$')"><xsl:value-of select="substring-before(.,'eoir')"/>oir</xsl:if>
       <xsl:if test="matches(.,'^(\w*)VEOIR$')"><xsl:value-of select="substring-before(.,'VEOIR')"/>VOIR</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^veu$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(v|V)eu$')"><xsl:value-of select="substring-before(.,'eu')"/>u</xsl:if>
       <xsl:if test="matches(.,'^VEU$')">VU</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^deu$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(d|D)eu$')"><xsl:value-of select="substring-before(.,'deu')"/>dû</xsl:if>
       <xsl:if test="matches(.,'^DEU$')">DÛ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^void$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(v|V)oid$')"><xsl:value-of select="substring-before(.,'oid')"/>oit</xsl:if>
       <xsl:if test="matches(.,'^VOID$')">VOIT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)chea$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)chea$')"><xsl:value-of select="substring-before(.,'chea')"/>cha</xsl:if>
       <xsl:if test="matches(.,'^(\w+)CHEA$')"><xsl:value-of select="substring-before(.,'CHEA')"/>CHA</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)chea[ns](\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)chea[ns](\w*)$')"><xsl:value-of select="substring-before(.,'chea')"/>cha<xsl:value-of select="substring-after(.,'chea')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)CHEA[NS](\w*)$')"><xsl:value-of select="substring-before(.,'CHEA')"/>CHA<xsl:value-of select="substring-after(.,'CHEA')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)cea$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)cea$')"><xsl:value-of select="substring-before(.,'cea')"/>ça</xsl:if>
       <xsl:if test="matches(.,'^(\w+)CEA$')"><xsl:value-of select="substring-before(.,'CEA')"/>ÇA</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^achapt(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)chapt(\w+)$')"><xsl:value-of select="substring-before(.,'chapt')"/>chet<xsl:value-of select="substring-after(.,'chapt')"/></xsl:if>
       <xsl:if test="matches(.,'^ACHAPT(\w+)$')">ACHET<xsl:value-of select="substring-after(.,'ACHAPT')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)ipte?s?$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                        <xsl:if test="matches(.,'^(\w+)ipte?s?$')"><xsl:value-of select="substring-before(.,'ipt')"/>it<xsl:value-of select="substring-after(.,'ipt')"/></xsl:if>
                        <xsl:if test="matches(.,'^(\w+)IPTE?S?$')"><xsl:value-of select="substring-before(.,'IPT')"/>IT<xsl:value-of select="substring-after(.,'IPT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)epv(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)epv(\w+)$')"><xsl:value-of select="substring-before(.,'epv')"/>ev<xsl:value-of select="substring-after(.,'epv')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)EPV(\w+)$')"><xsl:value-of select="substring-before(.,'EPV')"/>EV<xsl:value-of select="substring-after(.,'EPV')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)izer$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)izer$')"><xsl:value-of select="substring-before(.,'izer')"/>iser</xsl:if>
       <xsl:if test="matches(.,'^(\w+)IZER$')"><xsl:value-of select="substring-before(.,'IZER')"/>ISER</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^astrinct(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)strinct(\w*)$')"><xsl:value-of select="substring-before(.,'strinct')"/>streint<xsl:value-of select="substring-after(.,'strinct')"/></xsl:if>
       <xsl:if test="matches(.,'^ASTRINCT(\w*)$')">ASTREINT<xsl:value-of select="substring-after(.,'STRINCT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estrainct(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(E|e)strainct(\w*)$')"><xsl:value-of select="substring-before(.,'strainct')"/>treint<xsl:value-of select="substring-after(.,'strainct')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTRAINCT(\w*)$')">ETREINT<xsl:value-of select="substring-after(.,'STRAINCT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estainct(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(E|e)stainct(\w*)$')"><xsl:value-of select="substring-before(.,'stainct')"/>teint<xsl:value-of select="substring-after(.,'stainct')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTAINCT(\w*)$')">ETEINT<xsl:value-of select="substring-after(.,'STAINCT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(t|p|f|pr|fr|restr|astr)ainct(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(t|p|f|pr|fr|restr|astr|Restr|Astr|T|P|F)ainct(\w*)$')"><xsl:value-of select="substring-before(.,'ainct')"/>eint<xsl:value-of select="substring-after(.,'ainct')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(T|P|F|PR|FR|RESTR|ASTR)AINCT(\w*)$')"><xsl:value-of select="substring-before(.,'AINCT')"/>EINT<xsl:value-of select="substring-after(.,'AINCT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^vainct$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(V|v)ainct$')"><xsl:value-of select="substring-before(.,'ainct')"/>ainc</xsl:if>
       <xsl:if test="matches(.,'^VAINCT$')">VAINC</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)hay$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(h|H)ay$')"><xsl:value-of select="substring-before(.,'ay')"/>ais</xsl:if>
       <xsl:if test="matches(.,'^(\w*)HAY$')"><xsl:value-of select="substring-before(.,'HAY')"/>HAIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)preigne(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(p|P)reigne(\w*)$')"><xsl:value-of select="substring-before(.,'reigne')"/>renne<xsl:value-of select="substring-after(.,'reigne')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)PREIGNE(\w*)$')"><xsl:value-of select="substring-before(.,'PREIGNE')"/>PRENNE<xsl:value-of select="substring-after(.,'PREIGNE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^preignan(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(p|P)reignan(\w*)$')"><xsl:value-of select="substring-before(.,'reignan')"/>régnan<xsl:value-of select="substring-after(.,'reignan')"/></xsl:if>
       <xsl:if test="matches(.,'^PREIGNAN(\w*)$')"><xsl:value-of select="substring-before(.,'PREIGNAN')"/>RÉGNAN<xsl:value-of select="substring-after(.,'PREIGNAN')"/></xsl:if></reg></choice>
            </xsl:when> 
            
            <!--RACINE-->
<xsl:when test="matches(.,'^faulce(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(F|f)aulce(\w*)$')"><xsl:value-of select="substring-before(.,'aulce')"/>ausse<xsl:value-of select="substring-after(.,'aulce')"/></xsl:if>
       <xsl:if test="matches(.,'^FAULCE(\w*)$')">FAUSSE<xsl:value-of select="substring-after(.,'FAULCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)aul[ct](\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(A|a)ul[ct](\w*)$')"><xsl:value-of select="substring-before(.,'ul')"/>u<xsl:value-of select="substring-after(.,'ul')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)AUL[CT](\w*)$')"><xsl:value-of select="substring-before(.,'AUL')"/>AU<xsl:value-of select="substring-after(.,'AUL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)tiltr(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(t|T)iltr(\w+)$')"><xsl:value-of select="substring-before(.,'iltr')"/>itr<xsl:value-of select="substring-after(.,'iltr')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)TILTR(\w+)$')"><xsl:value-of select="substring-before(.,'TILTR')"/>TITR<xsl:value-of select="substring-after(.,'TILTR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(fe|pe|spo)nce(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(fe|pe|spo|Pe)nce(\w*)$')"><xsl:value-of select="substring-before(.,'nce')"/>nse<xsl:value-of select="substring-after(.,'nce')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(FE|PE|SPO)NCE(\w*)$')"><xsl:value-of select="substring-before(.,'NCE')"/>NSE<xsl:value-of select="substring-after(.,'NCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^[rmd]esp[eor][^c](\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[rmdRMD]esp[eor][^c](\w*)$')"><xsl:value-of select="substring-before(.,'esp')"/>ép<xsl:value-of select="substring-after(.,'esp')"/></xsl:if>
       <xsl:if test="matches(.,'^[RMD]ESP[EOR][^C](\w*)$')"><xsl:value-of select="substring-before(.,'ESP')"/>ÉP<xsl:value-of select="substring-after(.,'ESP')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^desp[il](\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(d|D)esp[il](\w+)$')"><xsl:value-of select="substring-before(.,'esp')"/>ép<xsl:value-of select="substring-after(.,'esp')"/></xsl:if>
       <xsl:if test="matches(.,'^DESP[IL](\w+)$')">DÉP<xsl:value-of select="substring-after(.,'DESP')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^esp[ée]es?$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^esp[ée]es?$')">ép<xsl:value-of select="substring-after(.,'esp')"/></xsl:if>
       <xsl:if test="matches(.,'^Esp[ée]es?$')">Ép<xsl:value-of select="substring-after(.,'Esp')"/></xsl:if>
       <xsl:if test="matches(.,'^ESP[ÉE]ES?$')">ÉP<xsl:value-of select="substring-after(.,'ESP')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^esv(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^esv(\w+)$')">év<xsl:value-of select="substring-after(.,'esv')"/></xsl:if>
       <xsl:if test="matches(.,'^Esv(\w+)$')">Év<xsl:value-of select="substring-after(.,'Esv')"/></xsl:if>
       <xsl:if test="matches(.,'^ESV(\w+)$')">ÉV<xsl:value-of select="substring-after(.,'ESV')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^desr(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(d|D)esr(\w+)$')"><xsl:value-of select="substring-before(.,'esr')"/>ér<xsl:value-of select="substring-after(.,'esr')"/></xsl:if>
       <xsl:if test="matches(.,'^DESR(\w+)$')">DÉR<xsl:value-of select="substring-after(.,'DESR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^souspeçon(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(s|S)ouspeçon(\w*)$')"><xsl:value-of select="substring-before(.,'ouspeçon')"/>oupçon<xsl:value-of select="substring-after(.,'ouspeçon')"/></xsl:if>
       <xsl:if test="matches(.,'^SOUSPEÇON(\w*)$')">SOUPÇON<xsl:value-of select="substring-after(.,'SOUSPEÇON')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^sousp(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(s|S)ousp(\w+)$')"><xsl:value-of select="substring-before(.,'ousp')"/>oup<xsl:value-of select="substring-after(.,'ousp')"/></xsl:if>
       <xsl:if test="matches(.,'^SOUSP(\w+)$')">SOUP<xsl:value-of select="substring-after(.,'SOUSP')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pluspart$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(p|P)luspart$')"><xsl:value-of select="substring-before(.,'luspart')"/>lupart<xsl:value-of select="substring-after(.,'luspart')"/></xsl:if>
       <xsl:if test="matches(.,'^PLUSPART(\w*)$')">PLUPART</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^d?esl(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(d|D)?esl(\w+)$')"><xsl:value-of select="substring-before(.,'esl')"/>él<xsl:value-of select="substring-after(.,'esl')"/></xsl:if>
       <xsl:if test="matches(.,'^Esl(\w+)$')">Él<xsl:value-of select="substring-after(.,'Esl')"/></xsl:if>
       <xsl:if test="matches(.,'^D?ESL(\w+)$')"><xsl:value-of select="substring-before(.,'ESL')"/>ÉL<xsl:value-of select="substring-after(.,'ESL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^freslon(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(f|F)reslon(\w+)$')"><xsl:value-of select="substring-before(.,'reslon')"/>relon<xsl:value-of select="substring-after(.,'reslon')"/></xsl:if>
       <xsl:if test="matches(.,'^FRESLON(\w+)$')">FRELON<xsl:value-of select="substring-after(.,'FRESLON')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(m|gr|p|po|fr)esl(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(m|gr|p|M|Gr|P|po|Po|fr|Fr)esl(\w+)$')"><xsl:value-of select="substring-before(.,'esl')"/>êl<xsl:value-of select="substring-after(.,'esl')"/></xsl:if>
       <xsl:if test="matches(.,'^(M|GR|P|PO|FR)ESL(\w+)$')"><xsl:value-of select="substring-before(.,'ESL')"/>ÊL<xsl:value-of select="substring-after(.,'ESL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aesl(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)esl(\w+)$')"><xsl:value-of select="substring-before(.,'esl')"/>il<xsl:value-of select="substring-after(.,'esl')"/></xsl:if>
       <xsl:if test="matches(.,'^AESL(\w+)$')">AIL<xsl:value-of select="substring-after(.,'AESL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)bransl(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(b|B)ransl(\w+)$')"><xsl:value-of select="substring-before(.,'ransl')"/>ranl<xsl:value-of select="substring-after(.,'ransl')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)BRANSL(\w+)$')"><xsl:value-of select="substring-before(.,'BRANSL')"/>BRANL<xsl:value-of select="substring-after(.,'BRANSL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^h?arquebouze(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(h|H)?(a|A)rquebouze(\w*)$')"><xsl:value-of select="substring-before(.,'rquebouze')"/>rquebuse<xsl:value-of select="substring-after(.,'rquebouze')"/></xsl:if>
       <xsl:if test="matches(.,'^H?ARQUEBOUZE(\w*)$')"><xsl:value-of select="substring-before(.,'ARQUEBOUZE')"/>ARQUEBUSE<xsl:value-of select="substring-after(.,'ARQUEBOUZE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)oiay$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)oiay$')"><xsl:value-of select="substring-before(.,'oiay')"/>oyais<xsl:value-of select="substring-after(.,'oiay')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)OIAY$')"><xsl:value-of select="substring-before(.,'OIAY')"/>OYAIS<xsl:value-of select="substring-after(.,'OIAY')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)oia(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(o|O)ia(\w*)$')"><xsl:value-of select="substring-before(.,'ia')"/>ya<xsl:value-of select="substring-after(.,'ia')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OIA(\w*)$')"><xsl:value-of select="substring-before(.,'OIA')"/>OYA<xsl:value-of select="substring-after(.,'OIA')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^poisant(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(p|P)oisant(\w*)$')"><xsl:value-of select="substring-before(.,'oisant')"/>esant<xsl:value-of select="substring-after(.,'oisant')"/></xsl:if>
       <xsl:if test="matches(.,'^POISANT(\w*)$')">PESANT<xsl:value-of select="substring-after(.,'POISANT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^abhom(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)bhom(\w*)$')"><xsl:value-of select="substring-before(.,'bhom')"/>bom<xsl:value-of select="substring-after(.,'bhom')"/></xsl:if>
       <xsl:if test="matches(.,'^ABHOM(\w*)$')">ABOM<xsl:value-of select="substring-after(.,'ABHOM')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)abund(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(a|A)bund(\w*)$')"><xsl:value-of select="substring-before(.,'bund')"/>bond<xsl:value-of select="substring-after(.,'bund')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)ABUND(\w*)$')"><xsl:value-of select="substring-before(.,'ABUND')"/>ABOND<xsl:value-of select="substring-after(.,'ABUND')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)abund(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(a|A)bund(\w*)$')"><xsl:value-of select="substring-before(.,'bund')"/>bond<xsl:value-of select="substring-after(.,'bund')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)ABUND(\w*)$')"><xsl:value-of select="substring-before(.,'ABUND')"/>ABOND<xsl:value-of select="substring-after(.,'ABUND')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^reigl(é|ee|ée|ez|er)(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                <xsl:if test="matches(.,'^[Rr]eigl(ee|ée|ez|er)(\w*)$')"><xsl:value-of select="substring-before(.,'eigl')"/>régl<xsl:value-of select="substring-after(.,'eigl')"/></xsl:if>
                <xsl:if test="matches(.,'^REIGL(EE|ÉE|EZ|ER)(\w*)$')">RÉGL<xsl:value-of select="substring-after(.,'REIGL')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^dereigl(é|ee|ée|ez|er)(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                <xsl:if test="matches(.,'^[Dd]ereigl(ee|ée|ez|er)(\w*)$')"><xsl:value-of select="substring-before(.,'ereigl')"/>érégl<xsl:value-of select="substring-after(.,'ereigl')"/></xsl:if>
                <xsl:if test="matches(.,'^DEREIGL(EE|ÉE|EZ|ER)(\w*)$')">DÉRÉGL<xsl:value-of select="substring-after(.,'DEREIGL')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^reigl(ement|e)(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                <xsl:if test="matches(.,'^(r|R)eigl(ement|e)(\w*)$')"><xsl:value-of select="substring-before(.,'eigl')"/>ègl<xsl:value-of select="substring-after(.,'eigl')"/></xsl:if>
                <xsl:if test="matches(.,'^REIGL(EMENT|E)(\w*)$')">RÈGL<xsl:value-of select="substring-after(.,'REIGL')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^dereigl(ement|e)(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                <xsl:if test="matches(.,'^[Dd]ereigl(ement|e)(\w*)$')"><xsl:value-of select="substring-before(.,'ereigl')"/>érègl<xsl:value-of select="substring-after(.,'ereigl')"/></xsl:if>
                <xsl:if test="matches(.,'^DEREIGL(EMENT|E)(\w*)$')">DÉRÈGL<xsl:value-of select="substring-after(.,'DEREIGL')"/></xsl:if></reg></choice>
            </xsl:when> 
            
            <!--Double consonne-->
<xsl:when test="matches(.,'^deffunct(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Dd]effunct(\w*)$')"><xsl:value-of select="substring-before(.,'effunct')"/>éfunt<xsl:value-of select="substring-after(.,'effunct')"/></xsl:if>
                    <xsl:if test="matches(.,'^DEFFUNCT(\w*)$')"><xsl:value-of select="substring-before(.,'DEFFUNCT')"/>DÉFUNCT<xsl:value-of select="substring-after(.,'DEFFUNCT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(de|prou?|re|aultre)ff[aeiou](\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(de|prou?|re|aultre|De|Prou?|Re|Aultre)ff[aeiou](\w*)$')"><xsl:value-of select="substring-before(.,'ff')"/>f<xsl:value-of select="substring-after(.,'ff')"/></xsl:if>
       <xsl:if test="matches(.,'^(DE|PROU?|RE|AULTRE)FF[AEIOU](\w*)$')"><xsl:value-of select="substring-before(.,'FF')"/>F<xsl:value-of select="substring-after(.,'FF')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^affin$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)ffin$')"><xsl:value-of select="substring-before(.,'ffin')"/>fin<xsl:value-of select="substring-after(.,'ffin')"/></xsl:if>
       <xsl:if test="matches(.,'^AFFIN$')">AFIN<xsl:value-of select="substring-after(.,'AFFIN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^acou(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)cou(\w+)$')"><xsl:value-of select="substring-before(.,'cou')"/>ccou<xsl:value-of select="substring-after(.,'cou')"/></xsl:if>
       <xsl:if test="matches(.,'^ACOU(\w+)$')">ACCOU<xsl:value-of select="substring-after(.,'ACOU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^acul(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)cul(\w+)$')"><xsl:value-of select="substring-before(.,'cul')"/>ccul<xsl:value-of select="substring-after(.,'cul')"/></xsl:if>
       <xsl:if test="matches(.,'^ACUL(\w+)$')">ACCUL<xsl:value-of select="substring-after(.,'ACUL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^admonnest(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)dmonnest(\w+)$')"><xsl:value-of select="substring-before(.,'dmonnest')"/>dmonest<xsl:value-of select="substring-after(.,'dmonnest')"/></xsl:if>
       <xsl:if test="matches(.,'^ADMONNEST(\w+)$')">ADMONEST<xsl:value-of select="substring-after(.,'ADMONNEST')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)aneau(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(a|A)neau(\w*)$')"><xsl:value-of select="substring-before(.,'neau')"/>nneau<xsl:value-of select="substring-after(.,'neau')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)ANEAU(\w*)$')"><xsl:value-of select="substring-before(.,'ANEAU')"/>ANNEAU<xsl:value-of select="substring-after(.,'ANEAU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)anihil(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(a|A)nihil(\w*)$')"><xsl:value-of select="substring-before(.,'nihil')"/>nnihil<xsl:value-of select="substring-after(.,'nihil')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)ANIHIL(\w*)$')"><xsl:value-of select="substring-before(.,'ANIHIL')"/>ANNIHIL<xsl:value-of select="substring-after(.,'ANIHIL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^bani(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(b|B)ani(\w*)$')"><xsl:value-of select="substring-before(.,'ani')"/>anni<xsl:value-of select="substring-after(.,'ani')"/></xsl:if>
       <xsl:if test="matches(.,'^BANI(\w*)$')">BANNI<xsl:value-of select="substring-after(.,'BANI')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^alaict(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)laict(\w+)$')"><xsl:value-of select="substring-before(.,'laict')"/>llait<xsl:value-of select="substring-after(.,'laict')"/></xsl:if>
       <xsl:if test="matches(.,'^ALAICT(\w+)$')">ALLAIT<xsl:value-of select="substring-after(.,'ALAICT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^alaigr(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)laigr(\w+)$')"><xsl:value-of select="substring-before(.,'laigr')"/>llègr<xsl:value-of select="substring-after(.,'laigr')"/></xsl:if>
       <xsl:if test="matches(.,'^ALAIGR(\w+)$')">ALLÈGR<xsl:value-of select="substring-after(.,'ALAIGR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^allouette(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)llouette(\w*)$')"><xsl:value-of select="substring-before(.,'llouette')"/>louette<xsl:value-of select="substring-after(.,'llouette')"/></xsl:if>
       <xsl:if test="matches(.,'^ALLOUETTE(\w*)$')">ALOUETTE<xsl:value-of select="substring-after(.,'ALLOUETTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(en)?rolle(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(En|en)?(R|r)olle(\w*)$')"><xsl:value-of select="substring-before(.,'olle')"/>ôle<xsl:value-of select="substring-after(.,'olle')"/></xsl:if>
       <xsl:if test="matches(.,'^(EN)?ROLLE(\w*)$')"><xsl:value-of select="substring-before(.,'ROLLE')"/>RÔLE<xsl:value-of select="substring-after(.,'ROLLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)rolle(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)(R|r)olle(\w*)$')"><xsl:value-of select="substring-before(.,'olle')"/>ole<xsl:value-of select="substring-after(.,'olle')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ROLLE(\w*)$')"><xsl:value-of select="substring-before(.,'ROLLE')"/>ROLE<xsl:value-of select="substring-after(.,'ROLLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^app(ai|erc|erç)(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)pp(ai|erc|erç)(\w+)$')"><xsl:value-of select="substring-before(.,'pp')"/>p<xsl:value-of select="substring-after(.,'pp')"/></xsl:if>
       <xsl:if test="matches(.,'^APP(AI|ERC|ERÇ)(\w+)$')">AP<xsl:value-of select="substring-after(.,'APP')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^trouppe(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(T|t)rouppe(\w*)$')"><xsl:value-of select="substring-before(.,'rouppe')"/>roupe<xsl:value-of select="substring-after(.,'rouppe')"/></xsl:if>
       <xsl:if test="matches(.,'^TROUPPE(\w*)$')">TROUPE<xsl:value-of select="substring-after(.,'TROUPPE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^apren(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)pren(\w+)$')"><xsl:value-of select="substring-before(.,'pren')"/>ppren<xsl:value-of select="substring-after(.,'pren')"/></xsl:if>
       <xsl:if test="matches(.,'^APREN(\w+)$')">APPREN<xsl:value-of select="substring-after(.,'APREN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aprins(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)prins(\w*)$')"><xsl:value-of select="substring-before(.,'prins')"/>ppris<xsl:value-of select="substring-after(.,'prins')"/></xsl:if>
       <xsl:if test="matches(.,'^APRINS(\w*)$')">APPRIS<xsl:value-of select="substring-after(.,'APRINS')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)suitte(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(S|s)uitte(\w*)$')"><xsl:value-of select="substring-before(.,'uitte')"/>uite<xsl:value-of select="substring-after(.,'uitte')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)SUITTE(\w*)$')"><xsl:value-of select="substring-before(.,'SUITTE')"/>SUITE<xsl:value-of select="substring-after(.,'SUITTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^battaill(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(B|b)attaill(\w+)$')"><xsl:value-of select="substring-before(.,'attaill')"/>ataill<xsl:value-of select="substring-after(.,'attaill')"/></xsl:if>
       <xsl:if test="matches(.,'^BATTAILL(\w+)$')">BATAILL<xsl:value-of select="substring-after(.,'BATTAILL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^recepte(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(R|r)ecepte(\w*)$')"><xsl:value-of select="substring-before(.,'ecepte')"/>ecette<xsl:value-of select="substring-after(.,'ecepte')"/></xsl:if>
       <xsl:if test="matches(.,'^RECEPTE(\w*)$')">RECETTE<xsl:value-of select="substring-after(.,'RECEPTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)robb(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(R|r)obb(\w+)$')"><xsl:value-of select="substring-before(.,'obb')"/>ob<xsl:value-of select="substring-after(.,'obb')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)ROBB(\w+)$')"><xsl:value-of select="substring-before(.,'ROBB')"/>ROB<xsl:value-of select="substring-after(.,'ROBB')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^abbas?t(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)bbas?t(\w*)$')"><xsl:value-of select="substring-before(.,'bba')"/>ba<xsl:value-of select="substring-after(.,'bba')"/></xsl:if>
       <xsl:if test="matches(.,'^ABBAS?T(\w*)$')">ABA<xsl:value-of select="substring-after(.,'ABBA')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^as(s|ç)avoir$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^as(s|ç)avoir$')">à savoir</xsl:if>
       <xsl:if test="matches(.,'^As(s|ç)avoir$')">À savoir</xsl:if>
       <xsl:if test="matches(.,'^AS(S|Ç)AVOIR$')">À SAVOIR</xsl:if></reg></choice>
            </xsl:when> 
            
            <!--PREFIXE-->
<xsl:when test="matches(.,'^(\w*)ad(jou|va|vent)(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)ad(jou|va|vent)(\w+)$')"><xsl:value-of select="substring-before(.,'ad')"/>a<xsl:value-of select="substring-after(.,'ad')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)Ad(jou|va|vent)(\w+)$')"><xsl:value-of select="substring-before(.,'Ad')"/>A<xsl:value-of select="substring-after(.,'Ad')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)AD(JOU|VA|VENT)(\w+)$')"><xsl:value-of select="substring-before(.,'AD')"/>A<xsl:value-of select="substring-after(.,'AD')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^alaine(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^alaine(\w*)$')"><xsl:value-of select="substring-before(.,'alaine')"/>haleine<xsl:value-of select="substring-after(.,'alaine')"/></xsl:if>
       <xsl:if test="matches(.,'^Alaine(\w*)$')"><xsl:value-of select="substring-before(.,'Alaine')"/>Haleine<xsl:value-of select="substring-after(.,'Alaine')"/></xsl:if>
       <xsl:if test="matches(.,'^ALAINE(\w*)$')">HALEINE<xsl:value-of select="substring-after(.,'ALAINE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^h?arnoys$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(H|h)?(a|A)rnoys$')"><xsl:value-of select="substring-before(.,'rnoys')"/>rnais<xsl:value-of select="substring-after(.,'rnoys')"/></xsl:if>
       <xsl:if test="matches(.,'^H?ARNOYS$')"><xsl:value-of select="substring-before(.,'ARNOYS')"/>ARNAIS<xsl:value-of select="substring-after(.,'ARNOYS')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^amez$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)mez$')"><xsl:value-of select="substring-before(.,'mez')"/>imés<xsl:value-of select="substring-after(.,'mez')"/></xsl:if>
       <xsl:if test="matches(.,'^AMEZ$')"><xsl:value-of select="substring-before(.,'AMEZ')"/>AIMÉS<xsl:value-of select="substring-after(.,'AMEZ')"/></xsl:if></reg></choice>
            </xsl:when>            
<xsl:when test="matches(.,'^avang(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^avang(\w+)$')">veng<xsl:value-of select="substring-after(.,'avang')"/></xsl:if>
       <xsl:if test="matches(.,'^Avang(\w+)$')">Veng<xsl:value-of select="substring-after(.,'Avang')"/></xsl:if>
       <xsl:if test="matches(.,'^AVANG(\w+)$')">VENG<xsl:value-of select="substring-after(.,'AVANG')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^biens[^aeiou](\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(B|b)iens[^aeiou](\w+)$')"><xsl:value-of select="substring-before(.,'iens')"/>ien<xsl:value-of select="substring-after(.,'iens')"/></xsl:if>
       <xsl:if test="matches(.,'^BIENS[^AEIOU](\w+)$')">BIEN<xsl:value-of select="substring-after(.,'BIENS')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)unz(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)unz(\w+)$')"><xsl:value-of select="substring-before(.,'unz')"/>onz<xsl:value-of select="substring-after(.,'unz')"/></xsl:if>
       <xsl:if test="matches(.,'^Unz(\w+)$')"><xsl:value-of select="substring-before(.,'Unz')"/>Onz<xsl:value-of select="substring-after(.,'Unz')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)UNZ(\w+)$')"><xsl:value-of select="substring-before(.,'UNZ')"/>ONZ<xsl:value-of select="substring-after(.,'UNZ')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aurei(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^aurei(\w+)$')">orei<xsl:value-of select="substring-after(.,'aurei')"/></xsl:if>
       <xsl:if test="matches(.,'^Aurei(\w+)$')">Orei<xsl:value-of select="substring-after(.,'Aurei')"/></xsl:if>
       <xsl:if test="matches(.,'^AUREI(\w+)$')">OREI<xsl:value-of select="substring-after(.,'AUREI')"/></xsl:if></reg></choice>
            </xsl:when> 
            
                <!--conserver cet ordre pour les règles "^tres"-->
<xsl:when test="matches(.,'^tresors?$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]resors?$')"><xsl:value-of select="substring-before(.,'resor')"/>résor<xsl:value-of select="substring-after(.,'resor')"/></xsl:if>
       <xsl:if test="matches(.,'^TRESORS?$')">TRÉSOR<xsl:value-of select="substring-after(.,'TRESOR')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^tres(pa|mou|t|bu)(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]res(pa|mou|t|bu)(\w+)$')"><xsl:value-of select="substring-before(.,'res')"/>ré<xsl:value-of select="substring-after(.,'res')"/></xsl:if>
       <xsl:if test="matches(.,'^TRES(PA|MOU|T|BU)(\w+)$')">TRÉ<xsl:value-of select="substring-after(.,'TRES')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^tressail(\w*)$', 'i')">
                        <xsl:value-of select="."/>
</xsl:when>
<xsl:when test="matches(.,'^tres(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]res(\w+)$')"><xsl:value-of select="substring-before(.,'res')"/>rès <xsl:value-of select="substring-after(.,'res')"/></xsl:if>
       <xsl:if test="matches(.,'^TRES(\w+)$')">TRÈS <xsl:value-of select="substring-after(.,'TRES')"/></xsl:if></reg></choice>
</xsl:when>
            
            <!--SUFFIXE-->
<xsl:when test="matches(.,'^(\w*)croist$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(c|C)roist$')"><xsl:value-of select="substring-before(.,'roist')"/>roît</xsl:if>
       <xsl:if test="matches(.,'^(\w*)CROIST$')"><xsl:value-of select="substring-before(.,'UNZ')"/>CROÎT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^con?g?noist(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^con?g?noist(\w*)$')">connait<xsl:value-of select="substring-after(.,'noist')"/></xsl:if>
       <xsl:if test="matches(.,'^Con?g?noist(\w*)$')">Connait<xsl:value-of select="substring-after(.,'noist')"/></xsl:if>
       <xsl:if test="matches(.,'^CON?G?NOIST(\w*)$')">CONNAIT<xsl:value-of select="substring-after(.,'NOIST')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^recon?g?noist(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^recon?g?noist(\w*)$')">reconnait<xsl:value-of select="substring-after(.,'noist')"/></xsl:if>
       <xsl:if test="matches(.,'^Recon?g?noist(\w*)$')">Reconnait<xsl:value-of select="substring-after(.,'noist')"/></xsl:if>
       <xsl:if test="matches(.,'^RECON?G?NOIST(\w*)$')">RECONNAIT<xsl:value-of select="substring-after(.,'NOIST')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)[^(en)]oist$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^(en)]oist$')"><xsl:value-of select="substring-before(.,'oist')"/>ait</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^(EN)]OIST$')"><xsl:value-of select="substring-before(.,'OIST')"/>AIT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[lnctombaueiv][lbaiou]z$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[lnctombLNCTOMBaueivAUEIV][lbaiou]z$')"><xsl:value-of select="substring-before(.,'z')"/>s</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[LNCTOMBAUEIV][LBAIOU]Z$')"><xsl:value-of select="substring-before(.,'Z')"/>S</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[lnctmbaueivg]tz$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[lnctmbLNCTMBaueivAUEIVgG]tz$')"><xsl:value-of select="substring-before(.,'tz')"/>ts</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[LNCTMBAUEIVG]TZ$')"><xsl:value-of select="substring-before(.,'TZ')"/>TS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)otz$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)otz$')"><xsl:value-of select="substring-before(.,'otz')"/>ots</xsl:if>
       <xsl:if test="matches(.,'^(\w+)OTZ$')"><xsl:value-of select="substring-before(.,'OTZ')"/>OTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)aize(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Aa]ize(\w*)$')"><xsl:value-of select="substring-before(.,'ize')"/>ise<xsl:value-of select="substring-after(.,'ize')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)AIZE(\w*)$')"><xsl:value-of select="substring-before(.,'AIZE')"/>AISE<xsl:value-of select="substring-after(.,'AIZE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fauce(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]auce(\w*)$')"><xsl:value-of select="substring-before(.,'auce')"/>ausse<xsl:value-of select="substring-after(.,'auce')"/></xsl:if>
       <xsl:if test="matches(.,'^FAUCE(\w*)$')">FAUSSE<xsl:value-of select="substring-after(.,'FAUCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)mens$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)mens$')"><xsl:value-of select="substring-before(.,'mens')"/>ments</xsl:if>
       <xsl:if test="matches(.,'^(\w+)MENS$')"><xsl:value-of select="substring-before(.,'MENS')"/>MENTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)ndens$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ndens$')"><xsl:value-of select="substring-before(.,'ndens')"/>ndent</xsl:if>
       <xsl:if test="matches(.,'^(\w+)NDENS$')"><xsl:value-of select="substring-before(.,'NDENS')"/>NDENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^dedens$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]edens$')"><xsl:value-of select="substring-before(.,'edens')"/>edans</xsl:if>
       <xsl:if test="matches(.,'^DEDENS$')">DEDANS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)dens$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Dd]ens$')"><xsl:value-of select="substring-before(.,'ens')"/>ents</xsl:if>
       <xsl:if test="matches(.,'^(\w*)DENS$')"><xsl:value-of select="substring-before(.,'DENS')"/>DENTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(ent|pr)ens$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(ent|pr|Pr|Ent)ens$')"><xsl:value-of select="substring-before(.,'ens')"/>ends</xsl:if>
       <xsl:if test="matches(.,'^(\w*)(ENT|PR)ENS$')"><xsl:value-of select="substring-before(.,'DENS')"/>ENDS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^cens$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[cC]ens$')"><xsl:value-of select="substring-before(.,'ens')"/>ent</xsl:if>
       <xsl:if test="matches(.,'^CENS$')">CENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^blans$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[bB]lans$')"><xsl:value-of select="substring-before(.,'lans')"/>lancs</xsl:if>
       <xsl:if test="matches(.,'^BLANS$')">BLANCS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^avans$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]vans$')"><xsl:value-of select="substring-before(.,'vans')"/>vant</xsl:if>
       <xsl:if test="matches(.,'^AVANS$')">AVANT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^marchans$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[mM]archans$')"><xsl:value-of select="substring-before(.,'archans')"/>archands</xsl:if>
       <xsl:if test="matches(.,'^MARCHANS$')">MARCHANDS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^grans$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[gG]rans$')"><xsl:value-of select="substring-before(.,'rans')"/>rands</xsl:if>
       <xsl:if test="matches(.,'^GRANS$')">GRANDS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^gran$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[gG]ran$')"><xsl:value-of select="substring-before(.,'ran')"/>rand</xsl:if>
       <xsl:if test="matches(.,'^GRAN$')">GRAND</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(est|ast|gu|ou|rt|ot|nt|uss|ach|cqu|lt|mb|bl|oy|ç|fit|aut)ans$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(est|ast|gu|ou|rt|ot|nt|uss|ach|cqu|lt|mb|bl|oy|ç|fit|Est|aut|Aut)ans$')"><xsl:value-of select="substring-before(.,'ans')"/>ant</xsl:if>
       <xsl:if test="matches(.,'^(\w*)(EST|AST|GU|OU|RT|OT|NT|USS|ACH|CQU|LT|MB|BL|OY|Ç|FIT|AUT)ANS$')"><xsl:value-of select="substring-before(.,'ANS')"/>ANT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(enf|it|ist|bat|sav|am|ip|nqu)ans$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(enf|it|ist|bat|sav|am|ip|nqu|Enf|Sav|Am)ans$')"><xsl:value-of select="substring-before(.,'ans')"/>ants</xsl:if>
       <xsl:if test="matches(.,'^(\w*)(ENF|IT|IST|BAT|SAV|AM|IP|NQU)ANS$')"><xsl:value-of select="substring-before(.,'ANS')"/>ANTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(adhe|ffe)rens$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(adhe|ffe|Adhe)rens$')"><xsl:value-of select="substring-before(.,'rens')"/>rents</xsl:if>
       <xsl:if test="matches(.,'^(\w*)(ADHE|FFE)RENS$')"><xsl:value-of select="substring-before(.,'ANS')"/>RENTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^gents$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[gG]ents$')"><xsl:value-of select="substring-before(.,'ents')"/>ens</xsl:if>
       <xsl:if test="matches(.,'^GENTS$')">GENS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)icque(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)icque(\w*)$')"><xsl:value-of select="substring-before(.,'icque')"/>ique<xsl:value-of select="substring-after(.,'icque')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ICQUE(\w*)$')"><xsl:value-of select="substring-before(.,'ICQUE')"/>IQUE<xsl:value-of select="substring-after(.,'ICQUE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)(ve|on)cques?$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)(ve|on)cques?$')"><xsl:value-of select="substring-before(.,'cque')"/>c</xsl:if>
       <xsl:if test="matches(.,'^(\w+)(VE|ON)CQUES?$')"><xsl:value-of select="substring-before(.,'CQUE')"/>C</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)ancque(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ancque(\w*)$')"><xsl:value-of select="substring-before(.,'ancque')"/>anque<xsl:value-of select="substring-after(.,'ancque')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ANCQUE(\w*)$')"><xsl:value-of select="substring-before(.,'ANCQUE')"/>ANQUE<xsl:value-of select="substring-after(.,'ANCQUE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^a(ve|don)cq$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[A|a](ve|don)cq$')"><xsl:value-of select="substring-before(.,'cq')"/>c</xsl:if>
       <xsl:if test="matches(.,'^A(VE|DON)CQ$')"><xsl:value-of select="substring-before(.,'CQ')"/>C</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^dictant$', 'i')">
       <xsl:if test="matches(.,'^(d|D)ictant$')"><xsl:value-of select="substring-before(.,'ictant')"/>ictant</xsl:if>
       <xsl:if test="matches(.,'^DICTANT$')"><xsl:value-of select="substring-before(.,'DICTANT')"/>DICTANT</xsl:if>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)[^vft]in?ct(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^vft]in?ct(\w*)$')"><xsl:value-of select="substring-before(.,'ct')"/>t<xsl:value-of select="substring-after(.,'ct')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^VFT]IN?CT(\w*)$')"><xsl:value-of select="substring-before(.,'CT')"/>T<xsl:value-of select="substring-after(.,'CT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^dequoy$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^d|D)equoy$')"><xsl:value-of select="substring-before(.,'equoy')"/>e quoi</xsl:if>
       <xsl:if test="matches(.,'^DEQUOY$')">DE QUOI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)quoy$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(q|Q)uoy$')"><xsl:value-of select="substring-before(.,'uoy')"/>uoi</xsl:if>
       <xsl:if test="matches(.,'^(\w*)QUOY$')"><xsl:value-of select="substring-before(.,'QUOY')"/>QUOI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^agui(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]gui(\w*)$')"><xsl:value-of select="substring-before(.,'gui')"/>igui<xsl:value-of select="substring-after(.,'gui')"/></xsl:if>
       <xsl:if test="matches(.,'^AGUI(\w*)$')">AIGUI<xsl:value-of select="substring-after(.,'AGUI')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aguy(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]guy(\w*)$')"><xsl:value-of select="substring-before(.,'guy')"/>igui<xsl:value-of select="substring-after(.,'guy')"/></xsl:if>
       <xsl:if test="matches(.,'^AGUY(\w*)$')">AIGUI<xsl:value-of select="substring-after(.,'AGUY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ague?s?$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]gue?s?$')"><xsl:value-of select="substring-before(.,'gu')"/>igu<xsl:value-of select="substring-after(.,'gu')"/></xsl:if>
       <xsl:if test="matches(.,'^AGUE?S?$')">AIGU<xsl:value-of select="substring-after(.,'AGU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[^p]oing$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^p]oing$')"><xsl:value-of select="substring-before(.,'oing')"/>oin</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^P]OING$')"><xsl:value-of select="substring-before(.,'OING')"/>OIN</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)ulx$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ulx$')"><xsl:value-of select="substring-before(.,'ulx')"/>ux</xsl:if>
       <xsl:if test="matches(.,'^(\w+)ULX$')"><xsl:value-of select="substring-before(.,'ULX')"/>UX</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^loix$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]oix$')"><xsl:value-of select="substring-before(.,'oix')"/>ois</xsl:if>
       <xsl:if test="matches(.,'^LOIX$')">LOIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)aulme(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)aulme(\w*)$')"><xsl:value-of select="substring-before(.,'aulme')"/>aume<xsl:value-of select="substring-after(.,'aulme')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)AULME(\w*)$')"><xsl:value-of select="substring-before(.,'AULME')"/>AUME<xsl:value-of select="substring-after(.,'AULME')"/></xsl:if></reg></choice>
            </xsl:when> 
            <!--Mots fréquents-->
<xsl:when test="matches(.,'^(\w*)oynes?(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Oo]ynes?(\w*)$')"><xsl:value-of select="substring-before(.,'yne')"/>ine<xsl:value-of select="substring-after(.,'yne')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OYNES?(\w*)$')"><xsl:value-of select="substring-before(.,'OYNE')"/>OINE<xsl:value-of select="substring-after(.,'OYNE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)oyres?(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Oo]yres?(\w*)$')"><xsl:value-of select="substring-before(.,'yre')"/>ire<xsl:value-of select="substring-after(.,'yre')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OYRES?(\w*)$')"><xsl:value-of select="substring-before(.,'OYRE')"/>OIRE<xsl:value-of select="substring-after(.,'OYRE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)oyzes?(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Oo]yzes?(\w*)$')"><xsl:value-of select="substring-before(.,'yze')"/>ise<xsl:value-of select="substring-after(.,'yze')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OYZES?(\w*)$')"><xsl:value-of select="substring-before(.,'OYZE')"/>OISE<xsl:value-of select="substring-after(.,'OYZE')"/></xsl:if></reg></choice>
            </xsl:when> 
            <!--y => i-->
<xsl:when test="matches(.,'^i?(ce)?luy$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[iI]?(ce|Ce)?[lL]uy$')"><xsl:value-of select="substring-before(.,'uy')"/>ui</xsl:if>
       <xsl:if test="matches(.,'^I?(CE)?LUY$')"><xsl:value-of select="substring-before(.,'LUY')"/>UI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^i?celluy$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[iI]?(c|C)elluy$')"><xsl:value-of select="substring-before(.,'elluy')"/>elui</xsl:if>
       <xsl:if test="matches(.,'^I?CELLUY$')"><xsl:value-of select="substring-before(.,'CELLUY')"/>CELUI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ayt?$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]yt?$')"><xsl:value-of select="substring-before(.,'y')"/>i<xsl:value-of select="substring-after(.,'y')"/></xsl:if>
       <xsl:if test="matches(.,'^AYT?$')"><xsl:value-of select="substring-before(.,'AY')"/>AI<xsl:value-of select="substring-after(.,'Y')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ny$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^ny$')">ni</xsl:if>
       <xsl:if test="matches(.,'^Ny$')">Ni</xsl:if>
       <xsl:if test="matches(.,'^NY$')">NI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(ain|aus)?sy$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(Ain|Aus|ain|aus)?[sS]y$')"><xsl:value-of select="substring-before(.,'y')"/>i</xsl:if>
       <xsl:if test="matches(.,'^(AIN|AUS)?SY$')"><xsl:value-of select="substring-before(.,'SY')"/>SI</xsl:if></reg></choice>
            </xsl:when>      
<xsl:when test="matches(.,'^i?cy$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[iI]?(c|C)y$')"><xsl:value-of select="substring-before(.,'y')"/>i</xsl:if>
       <xsl:if test="matches(.,'^I?CY$')"><xsl:value-of select="substring-before(.,'CY')"/>CI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^huy$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]uy$')"><xsl:value-of select="substring-before(.,'uy')"/>ui</xsl:if>
       <xsl:if test="matches(.,'^HUY$')">HUI</xsl:if></reg></choice>
            </xsl:when>     
<xsl:when test="matches(.,'^(\w*)[^m][aeiouy]rty(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^m][aeiouy]rty(\w*)$')"><xsl:value-of select="substring-before(.,'rty')"/>rti<xsl:value-of select="substring-after(.,'rty')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^M][AEIOUY]RTY(\w*)$')"><xsl:value-of select="substring-before(.,'RTY')"/>RTI<xsl:value-of select="substring-after(.,'RTY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)chym(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Cc]hym(\w*)$')"><xsl:value-of select="substring-before(.,'hym')"/>him<xsl:value-of select="substring-after(.,'hym')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)CHYM(\w*)$')"><xsl:value-of select="substring-before(.,'CHYM')"/>CHIM<xsl:value-of select="substring-after(.,'CHYM')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^amy(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]my(\w*)$')"><xsl:value-of select="substring-before(.,'my')"/>mi<xsl:value-of select="substring-after(.,'my')"/></xsl:if>
       <xsl:if test="matches(.,'^AMY(\w*)$')">AMI<xsl:value-of select="substring-after(.,'AMY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^h?aza(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]?[Aa]za(\w*)$')"><xsl:value-of select="substring-before(.,'za')"/>sa<xsl:value-of select="substring-after(.,'za')"/></xsl:if>
       <xsl:if test="matches(.,'^H?AZA(\w*)$')"><xsl:value-of select="substring-before(.,'AZA')"/>ASA<xsl:value-of select="substring-after(.,'AZA')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)eryes?$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)eryes?$')"><xsl:value-of select="substring-before(.,'erye')"/>erie<xsl:value-of select="substring-after(.,'erie')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ERYES?$')"><xsl:value-of select="substring-before(.,'ERYE')"/>ERIE<xsl:value-of select="substring-after(.,'ERYE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^huyt(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]uyt(\w*)$')"><xsl:value-of select="substring-before(.,'uyt')"/>uit<xsl:value-of select="substring-after(.,'uyt')"/></xsl:if>
       <xsl:if test="matches(.,'^HUYT(\w*)$')">HUIT<xsl:value-of select="substring-after(.,'HUYT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^parmy$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[pP]army$')"><xsl:value-of select="substring-before(.,'army')"/>armi</xsl:if>
       <xsl:if test="matches(.,'^PARMY$')">PARMI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^vray(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]ray(\w*)$')"><xsl:value-of select="substring-before(.,'ray')"/>rai<xsl:value-of select="substring-after(.,'ray')"/></xsl:if>
       <xsl:if test="matches(.,'^VRAY(\w*)$')">VRAI<xsl:value-of select="substring-after(.,'VRAY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^voyla$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]oyla$')"><xsl:value-of select="substring-before(.,'oyla')"/>oilà</xsl:if>
       <xsl:if test="matches(.,'^VOYLA$')">VOILÀ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)mercy(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Mm]ercy(\w*)$')"><xsl:value-of select="substring-before(.,'ercy')"/>erci<xsl:value-of select="substring-after(.,'ercy')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)MERCY(\w*)$')"><xsl:value-of select="substring-before(.,'MERCY')"/>MERCI<xsl:value-of select="substring-after(.,'MERCY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^dy$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]y$')"><xsl:value-of select="substring-before(.,'y')"/>is</xsl:if>
       <xsl:if test="matches(.,'^DY$')">DIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)ouyss(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)ouyss(\w+)$')"><xsl:value-of select="substring-before(.,'ouyss')"/>ouiss<xsl:value-of select="substring-after(.,'ouyss')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OUYSS(\w+)$')"><xsl:value-of select="substring-before(.,'OUYSS')"/>OUISS<xsl:value-of select="substring-after(.,'OUYSS')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^demy$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]emy$')"><xsl:value-of select="substring-before(.,'emy')"/>emi</xsl:if>
       <xsl:if test="matches(.,'^DEMY$')">DEMI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^failly$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[fF]ailly$')"><xsl:value-of select="substring-before(.,'ailly')"/>ailli</xsl:if>
       <xsl:if test="matches(.,'^FAILLY$')">FAILLI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^essays?$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]ssays?$')"><xsl:value-of select="substring-before(.,'ssay')"/>ssai<xsl:value-of select="substring-after(.,'ssay')"/></xsl:if>
       <xsl:if test="matches(.,'^ESSAYS?$')">ESSAI<xsl:value-of select="substring-after(.,'ESSAY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^hyver(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]yver(\w*)$')"><xsl:value-of select="substring-before(.,'yver')"/>iver<xsl:value-of select="substring-after(.,'yver')"/></xsl:if>
       <xsl:if test="matches(.,'^HYVER(\w*)$')">HIVER<xsl:value-of select="substring-after(.,'HYVER')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estably(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^estably(\w*)$')"><xsl:value-of select="substring-before(.,'estably')"/>établi<xsl:value-of select="substring-after(.,'estably')"/></xsl:if>
        <xsl:if test="matches(.,'^Estably(\w*)$')"><xsl:value-of select="substring-before(.,'Estably')"/>Établi<xsl:value-of select="substring-after(.,'Estably')"/></xsl:if>
        <xsl:if test="matches(.,'^ESTABLY(\w*)$')">ÉTABLI<xsl:value-of select="substring-after(.,'ESTABLY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)fuyr(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Ff]uyr(\w*)$')"><xsl:value-of select="substring-before(.,'uyr')"/>uir<xsl:value-of select="substring-after(.,'uyr')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)FUYR(\w*)$')"><xsl:value-of select="substring-before(.,'FUYR')"/>FUIR<xsl:value-of select="substring-after(.,'FUYR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)finy(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Ff]iny(\w*)$')"><xsl:value-of select="substring-before(.,'iny')"/>ini<xsl:value-of select="substring-after(.,'iny')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)FINY(\w*)$')"><xsl:value-of select="substring-before(.,'FINY')"/>FINI<xsl:value-of select="substring-after(.,'FINY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ouy$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]uy$')"><xsl:value-of select="substring-before(.,'uy')"/>ui</xsl:if>
       <xsl:if test="matches(.,'^OUY$')">OUI</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^boy$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]oy$')"><xsl:value-of select="substring-before(.,'oy')"/>ois</xsl:if>
                    <xsl:if test="matches(.,'^BOY$')">BOIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)oy[es]?$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)oy[es]?$')"><xsl:value-of select="substring-before(.,'oy')"/>oi<xsl:value-of select="substring-after(.,'oy')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)Oy[es]?$')"><xsl:value-of select="substring-before(.,'Oy')"/>Oi<xsl:value-of select="substring-after(.,'Oy')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OY[ES]?$')"><xsl:value-of select="substring-before(.,'OY')"/>OI<xsl:value-of select="substring-after(.,'OY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)suyv(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Ss]uyv(\w*)$')"><xsl:value-of select="substring-before(.,'uyv')"/>uiv<xsl:value-of select="substring-after(.,'uyv')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)SUYV(\w*)$')"><xsl:value-of select="substring-before(.,'SUYV')"/>SUIV<xsl:value-of select="substring-after(.,'SUYV')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ay[md](\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]y[md](\w+)$')"><xsl:value-of select="substring-before(.,'y')"/>i<xsl:value-of select="substring-after(.,'y')"/></xsl:if>
       <xsl:if test="matches(.,'^AY[MD](\w+)$')">AI<xsl:value-of select="substring-after(.,'AY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)[hu]th[oe](\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)[hu]th[oe](\w*)$')"><xsl:value-of select="substring-before(.,'th')"/>t<xsl:value-of select="substring-after(.,'th')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)[HU]TH[OE](\w*)$')"><xsl:value-of select="substring-before(.,'TH')"/>TSUIV<xsl:value-of select="substring-after(.,'TH')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^sceu(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[sS]ceu(\w*)$')"><xsl:value-of select="substring-before(.,'ceu')"/>u<xsl:value-of select="substring-after(.,'ceu')"/></xsl:if>
       <xsl:if test="matches(.,'^SCEU(\w*)$')">SU<xsl:value-of select="substring-after(.,'SCEU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^asseu(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]sseu(\w+)$')"><xsl:value-of select="substring-before(.,'sseu')"/>ssu<xsl:value-of select="substring-after(.,'sseu')"/></xsl:if>
       <xsl:if test="matches(.,'^ASSEU(\w+)$')">ASSU<xsl:value-of select="substring-after(.,'ASSEU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)cheute(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Cc]heute(\w*)$')"><xsl:value-of select="substring-before(.,'heute')"/>hute<xsl:value-of select="substring-after(.,'heute')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)CHEUTE(\w*)$')"><xsl:value-of select="substring-before(.,'CHEUTE')"/>CHUTE<xsl:value-of select="substring-after(.,'CHEUTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)oub[dts](\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)oub[dts](\w*)$')"><xsl:value-of select="substring-before(.,'oub')"/>ou<xsl:value-of select="substring-after(.,'oub')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)OUB[DTS](\w*)$')"><xsl:value-of select="substring-before(.,'OUB')"/>OU<xsl:value-of select="substring-after(.,'OUB')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(^dem)on?str(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(^[dD]em)on?str(\w+)$')"><xsl:value-of select="substring-before(.,'str')"/>tr<xsl:value-of select="substring-after(.,'str')"/></xsl:if>
       <xsl:if test="matches(.,'^(^DEM)ON?STR(\w+)$')"><xsl:value-of select="substring-before(.,'STR')"/>TR<xsl:value-of select="substring-after(.,'STR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)eust$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)eust$')"><xsl:value-of select="substring-before(.,'eust')"/>eut<xsl:value-of select="substring-after(.,'eust')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)EUST$')"><xsl:value-of select="substring-before(.,'EUST')"/>EUT<xsl:value-of select="substring-after(.,'EUST')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)[ao]istr(\w+)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)[ao]istr(\w*)$')"><xsl:value-of select="substring-before(.,'istr')"/>îtr<xsl:value-of select="substring-after(.,'istr')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)[AO]ISTR(\w*)$')"><xsl:value-of select="substring-before(.,'ISTR')"/>ÎTR<xsl:value-of select="substring-after(.,'ISTR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ancestre(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ncestre(\w*)$')"><xsl:value-of select="substring-before(.,'ncestre')"/>ncêtre<xsl:value-of select="substring-after(.,'ncestre')"/></xsl:if>
       <xsl:if test="matches(.,'^ANCESTRE(\w*)$')">ANCÊTRE<xsl:value-of select="substring-after(.,'ANCESTRE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^estez$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^estez$')">êtes</xsl:if>
                    <xsl:if test="matches(.,'^Estez$')">Êtes</xsl:if>
                    <xsl:if test="matches(.,'^ESTEZ(\w*)$')">ÊTES</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^est[raueo](\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^est[raueo](\w*)$')">ét<xsl:value-of select="substring-after(.,'est')"/></xsl:if>
                            <xsl:if test="matches(.,'^Est[raueo](\w*)$')">Ét<xsl:value-of select="substring-after(.,'Est')"/></xsl:if>
                            <xsl:if test="matches(.,'^EST[RAUEO](\w*)$')">ÉT<xsl:value-of select="substring-after(.,'EST')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mest(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]est(\w*)$')"><xsl:value-of select="substring-before(.,'est')"/>ét<xsl:value-of select="substring-after(.,'est')"/></xsl:if>
       <xsl:if test="matches(.,'^MEST(\w*)$')">MÉT<xsl:value-of select="substring-after(.,'MEST')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^arbalest(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]rbalest(\w*)$')"><xsl:value-of select="substring-before(.,'rbalest')"/>rbalèt<xsl:value-of select="substring-after(.,'rbalest')"/></xsl:if>
       <xsl:if test="matches(.,'^ARBALEST(\w*)$')">ARBALÈT<xsl:value-of select="substring-after(.,'ARBALEST')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^assubjectir$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ssubjectir$')"><xsl:value-of select="substring-before(.,'ssubjectir')"/>ssujettir</xsl:if>
       <xsl:if test="matches(.,'^ASSUBJECTIR$')">ASSUJETTIR</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)ergier$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ergier$')"><xsl:value-of select="substring-before(.,'ergier')"/>erger<xsl:value-of select="substring-after(.,'ergier')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ERGIER$')"><xsl:value-of select="substring-before(.,'ERGIER')"/>ERGER<xsl:value-of select="substring-after(.,'ERGIER')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^tousjours$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[tT]ousjours$')"><xsl:value-of select="substring-before(.,'ousjours')"/>oujours</xsl:if>
       <xsl:if test="matches(.,'^TOUSJOURS$')">TOUJOURS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^desja$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esja$')"><xsl:value-of select="substring-before(.,'esja')"/>éjà</xsl:if>
       <xsl:if test="matches(.,'^DESJA$')">DÉJÀ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^su[zs]$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]u[zs]$')"><xsl:value-of select="substring-before(.,'u')"/>ur</xsl:if>
       <xsl:if test="matches(.,'^SU[ZS]$')">SUR</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^chascun(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]hascun(\w*)$')"><xsl:value-of select="substring-before(.,'hascun')"/>hacun<xsl:value-of select="substring-after(.,'hascun')"/></xsl:if>
       <xsl:if test="matches(.,'^CHASCUN(\w*)$')">CHACUN<xsl:value-of select="substring-after(.,'CHASCUN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^chasque(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]hasque(\w*)$')"><xsl:value-of select="substring-before(.,'hasque')"/>haque<xsl:value-of select="substring-after(.,'hascun')"/></xsl:if>
       <xsl:if test="matches(.,'^CHASQUE(\w*)$')">CHAQUE<xsl:value-of select="substring-after(.,'CHASQUE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pendent$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]endent$')"><xsl:value-of select="substring-before(.,'endent')"/>endant</xsl:if>
       <xsl:if test="matches(.,'^PENDENT$')">PENDANT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^scavoir$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]cavoir$')"><xsl:value-of select="substring-before(.,'cavoir')"/>avoir</xsl:if>
       <xsl:if test="matches(.,'^SCAVOIR$')">SAVOIR</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^sçav(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]çav(\w*)$')"><xsl:value-of select="substring-before(.,'çav')"/>av<xsl:value-of select="substring-after(.,'çav')"/></xsl:if>
       <xsl:if test="matches(.,'^SÇAV(\w*)$')">SAV<xsl:value-of select="substring-after(.,'SÇAV')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^sçait$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]çait$')"><xsl:value-of select="substring-before(.,'çait')"/>ait</xsl:if>
       <xsl:if test="matches(.,'^SÇAIT$')">SAIT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^encores$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]ncores$')"><xsl:value-of select="substring-before(.,'ncores')"/>ncore</xsl:if>
       <xsl:if test="matches(.,'^ENCORES$')">ENCORE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^prins$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]rins$')"><xsl:value-of select="substring-before(.,'rins')"/>ris</xsl:if>
       <xsl:if test="matches(.,'^PRINS$')">PRIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^quel(cun|qun)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Qq]uel(cun|qun)$')"><xsl:value-of select="substring-before(.,'uel')"/>uelqu'un</xsl:if>
       <xsl:if test="matches(.,'^QUEL(CUN|QUN)$')">QUELQU'UN</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(age|eage|aage)(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(age|eage|aage)(\w*)$')">âge</xsl:if>
       <xsl:if test="matches(.,'^(Age|Eage|Aage)(\w*)$')">Âge</xsl:if>
       <xsl:if test="matches(.,'^(AGE|EAGE|AAGE)(\w*)$')">ÂGE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^sepmaine(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]epmaine(\w*)$')"><xsl:value-of select="substring-before(.,'epmaine')"/>emaine<xsl:value-of select="substring-after(.,'epmaine')"/></xsl:if>
       <xsl:if test="matches(.,'^SEPMAINE(\w*)$')">SEMAINE<xsl:value-of select="substring-after(.,'SEPMAINE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^cognoi(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ognoi(\w*)$')"><xsl:value-of select="substring-before(.,'ognoi')"/>onnai<xsl:value-of select="substring-after(.,'ognoi')"/></xsl:if>
       <xsl:if test="matches(.,'^COGNOI(\w*)$')">CONNAI<xsl:value-of select="substring-after(.,'COGNOI')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^foiblesse(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]oiblesse(\w*)$')"><xsl:value-of select="substring-before(.,'oiblesse')"/>aiblesse<xsl:value-of select="substring-after(.,'oiblesse')"/></xsl:if>
       <xsl:if test="matches(.,'^FOIBLESSE(\w*)$')">FAIBLESSE<xsl:value-of select="substring-after(.,'FOIBLESSE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^cueur$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ueur$')"><xsl:value-of select="substring-before(.,'ueur')"/>oeur<xsl:value-of select="substring-after(.,'ueur')"/></xsl:if>
       <xsl:if test="matches(.,'^CUEUR$')">COEUR<xsl:value-of select="substring-after(.,'CUEUR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^beuf(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]euf(\w*)$')"><xsl:value-of select="substring-before(.,'euf')"/>oeuf<xsl:value-of select="substring-after(.,'euf')"/></xsl:if>
       <xsl:if test="matches(.,'^BEUF(\w*)$')">BOEUF<xsl:value-of select="substring-after(.,'BEUF')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^bezace(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]ezace(\w*)$')"><xsl:value-of select="substring-before(.,'bezace')"/>besace<xsl:value-of select="substring-after(.,'ezace')"/></xsl:if>
       <xsl:if test="matches(.,'^BEZACE(\w*)$')">BESACE<xsl:value-of select="substring-after(.,'BEZACE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^repous$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]epous$')"><xsl:value-of select="substring-before(.,'epous')"/>epos</xsl:if>
       <xsl:if test="matches(.,'^REPOUS$')">REPOS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^tyrant(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[tT]yrant(\w*)$')"><xsl:value-of select="substring-before(.,'yrant')"/>yran<xsl:value-of select="substring-after(.,'yrant')"/></xsl:if>
       <xsl:if test="matches(.,'^TYRANT(\w*)$')">TYRAN<xsl:value-of select="substring-after(.,'TYRANT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ungs?$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Uu]ngs?$')"><xsl:value-of select="substring-before(.,'ng')"/>n<xsl:value-of select="substring-after(.,'ng')"/></xsl:if>
       <xsl:if test="matches(.,'^UNGS?$')">UN<xsl:value-of select="substring-after(.,'UNG')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fantasie(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]antasie(\w*)$')"><xsl:value-of select="substring-before(.,'antasie')"/>antaisie<xsl:value-of select="substring-after(.,'antasie')"/></xsl:if>
       <xsl:if test="matches(.,'^FANTASIE(\w*)$')">FANTAISIE<xsl:value-of select="substring-after(.,'FANTASIE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^cholere(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]holere(\w*)$')"><xsl:value-of select="substring-before(.,'holere')"/>olère<xsl:value-of select="substring-after(.,'holere')"/></xsl:if>
       <xsl:if test="matches(.,'^CHOLERE(\w*)$')">COLÈRE<xsl:value-of select="substring-after(.,'CHOLERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aumoins$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]umoins$')"><xsl:value-of select="substring-before(.,'umoins')"/>u moins</xsl:if>
       <xsl:if test="matches(.,'^AUMOINS$')">AU MOINS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estomach(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]stomach(\w*)$')"><xsl:value-of select="substring-before(.,'stomach')"/>stomac<xsl:value-of select="substring-after(.,'stomach')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTOMACH(\w*)$')">ESTOMAC<xsl:value-of select="substring-after(.,'ESTOMACH')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pis$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]is$')"><xsl:value-of select="substring-before(.,'is')"/>ire</xsl:if>
       <xsl:if test="matches(.,'^PIS$')">PIRE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^lon$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]on$')"><xsl:value-of select="substring-before(.,'on')"/>'on</xsl:if>
       <xsl:if test="matches(.,'^LON$')">L'ON</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ausquels$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]usquels$')"><xsl:value-of select="substring-before(.,'usquels')"/>uxquels</xsl:if>
       <xsl:if test="matches(.,'^AUSQUELS$')">AUXQUELS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^avanture(\w*)$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]vanture(\w*)$')"><xsl:value-of select="substring-before(.,'vanture')"/>venture</xsl:if>
       <xsl:if test="matches(.,'^AVANTURE(\w*)$')">AVENTURE<xsl:value-of select="substring-after(.,'AVANTURE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^touts$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]outs$')"><xsl:value-of select="substring-before(.,'outs')"/>ous</xsl:if>
       <xsl:if test="matches(.,'^TOUTS$')">TOUS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^oncques$', 'i')">
                    <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^oncques$')">onques</xsl:if>
       <xsl:if test="matches(.,'^Oncques$')">Onques</xsl:if>
       <xsl:if test="matches(.,'^ONCQUES$')">ONQUES</xsl:if></reg></choice>
            </xsl:when>   
                
                <!--ACCENTS-->
<xsl:when test="matches(.,'^(\w+)ees?$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ees?$')"><xsl:value-of select="substring-before(.,'ee')"/>ée<xsl:value-of select="substring-after(.,'ee')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)EES?$')"><xsl:value-of select="substring-before(.,'EE')"/>ÉE<xsl:value-of select="substring-after(.,'EE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^abbe[sz]$', 'i')">
                            <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]bbe[sz]$')"><xsl:value-of select="substring-before(.,'bbe')"/>bbés</xsl:if>
       <xsl:if test="matches(.,'^ABBE[ZS]$')">ABBÉS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^abbe$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]bbe$')"><xsl:value-of select="substring-before(.,'bbe')"/>bbé</xsl:if>
       <xsl:if test="matches(.,'^ABBE$')">ABBÉ</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^abreger$', 'i')">
                            <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]breger$')"><xsl:value-of select="substring-before(.,'breger')"/>bréger</xsl:if>
       <xsl:if test="matches(.,'^ABREGER$')">ABRÉGER</xsl:if></reg></choice>
</xsl:when> 
<xsl:when test="matches(.,'^agreable(\w*)$', 'i')">
                            <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]greable(\w*)$')"><xsl:value-of select="substring-before(.,'greable')"/>gréable<xsl:value-of select="substring-after(.,'greable')"/></xsl:if>
       <xsl:if test="matches(.,'^AGREABLE(\w*)$')">AGRÉABLE<xsl:value-of select="substring-after(.,'AGREABLE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^allego(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]llego(\w*)$')"><xsl:value-of select="substring-before(.,'llego')"/>llégo<xsl:value-of select="substring-after(.,'llego')"/></xsl:if>
       <xsl:if test="matches(.,'^ALLEGO(\w*)$')">ALLÉGO<xsl:value-of select="substring-after(.,'ALLEGO')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^altera(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ltera(\w*)$')"><xsl:value-of select="substring-before(.,'ltera')"/>ltéra<xsl:value-of select="substring-after(.,'ltera')"/></xsl:if>
       <xsl:if test="matches(.,'^ALTERA(\w*)$')">ALTÉRA<xsl:value-of select="substring-after(.,'ALTERA')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^bene[vfd](\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]ene[vfd](\w+)$')"><xsl:value-of select="substring-before(.,'ene')"/>éné<xsl:value-of select="substring-after(.,'ene')"/></xsl:if>
       <xsl:if test="matches(.,'^BENE[VFD](\w+)$')">BÉNÉ<xsl:value-of select="substring-after(.,'BENE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^regl(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]egl(\w+)$')"><xsl:value-of select="substring-before(.,'egl')"/>ègl<xsl:value-of select="substring-after(.,'egl')"/></xsl:if>
       <xsl:if test="matches(.,'^REGL(\w+)$')">RÈGL<xsl:value-of select="substring-after(.,'REGL')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^devot(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]evot(\w*)$')"><xsl:value-of select="substring-before(.,'evot')"/>évot<xsl:value-of select="substring-after(.,'evot')"/></xsl:if>
       <xsl:if test="matches(.,'^DEVOT(\w*)$')">DÉVOT<xsl:value-of select="substring-after(.,'DEVOT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^conseq(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]onseq(\w+)$')"><xsl:value-of select="substring-before(.,'onseq')"/>onséq<xsl:value-of select="substring-after(.,'onseq')"/></xsl:if>
       <xsl:if test="matches(.,'^CONSEQ(\w+)$')">CONSÉQ<xsl:value-of select="substring-after(.,'CONSEQ')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^tres$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]res$')"><xsl:value-of select="substring-before(.,'res')"/>rès</xsl:if>
       <xsl:if test="matches(.,'^TRES$')">TRÈS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^beat(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]eat(\w*)$')"><xsl:value-of select="substring-before(.,'eat')"/>éat<xsl:value-of select="substring-after(.,'eat')"/></xsl:if>
       <xsl:if test="matches(.,'^BEAT(\w*)$')">BÉAT<xsl:value-of select="substring-after(.,'BEAT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(ais|malais|asse?ur|separ|desesper|moder|inconsider|figur|proportionn|importun|inopin|impun|passionn|opportun|(in)?commod|profond|express|confus|pos|nomm|conform|priv|reciproc)ement$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(ais|malais|asse?ur|separ|desesper|moder|inconsider|figur|proportionn|importun|inopin|impun|passionn|opportun|(in)?commod|profond|express|confus|pos|nomm|conform|priv|reciproc)ement(\w*)$')"><xsl:value-of select="substring-before(.,'ement')"/>ément</xsl:if>
       <xsl:if test="matches(.,'^(Ais|Malais|Asse?ur|Separ|Desesper|Moder|Inconsider|Figur|Proportionn|Importun|Inopin|Impun|Passionn|Opportun|Incommod|Commod|Profond|Express|Confus|Pos|Nomm|Conform|Priv|Reciproc)ement(\w*)$')"><xsl:value-of select="substring-before(.,'ement')"/>ément</xsl:if>
       <xsl:if test="matches(.,'^(AIS|MALAIS|ASSE?UR|SEPAR|DESESPER|MODER|INCONSIDER|FIGUR|PROPORTIONN|IMPORTUN|INOPIN|IMPUN|PASSIONN|OPPORTUN|INCOMMOD|COMMOD|PROFOND|EXPRESS|CONFUS|POS|NOMM|CONFORM|PRIV|RECIPROC)EMENT(\w*)$')"><xsl:value-of select="substring-before(.,'EMENT')"/>ÉMENT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^aysement$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ysement$')"><xsl:value-of select="substring-before(.,'ysement')"/>isément</xsl:if>
       <xsl:if test="matches(.,'^AYSEMENT$')"><xsl:value-of select="substring-before(.,'AYSEMENT')"/>AISÉMENT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^malaysement$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]alaysement$')"><xsl:value-of select="substring-before(.,'alaysement')"/>alaisément</xsl:if>
       <xsl:if test="matches(.,'^MALAYSEMENT$')"><xsl:value-of select="substring-before(.,'MALAYSEMENT')"/>MALAISÉMENT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^courtoysement$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ourtoysement$')"><xsl:value-of select="substring-before(.,'ourtoysement')"/>ourtoisement</xsl:if>
       <xsl:if test="matches(.,'^COURTOYSEMENT$')"><xsl:value-of select="substring-before(.,'COURTOYSEMENT')"/>COURTOISEMENT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^eshontement$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^eshontement$')">éhontément</xsl:if>
       <xsl:if test="matches(.,'^Eshontement$')">Éhontément</xsl:if>
       <xsl:if test="matches(.,'^ESHONTEMENT$')">ÉHONTÉMENT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^desesperément$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esesperément$')"><xsl:value-of select="substring-before(.,'esesperément')"/>esespérément</xsl:if>
       <xsl:if test="matches(.,'^DESESPERÉMENT$')">DESESPÉRÉMENT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^element(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^element(\w*)$')">élément<xsl:value-of select="substring-after(.,'element')"/></xsl:if>
       <xsl:if test="matches(.,'^Element(\w*)$')">Élément<xsl:value-of select="substring-after(.,'Element')"/></xsl:if>
       <xsl:if test="matches(.,'^ELEMENT(\w*)$')">ÉLÉMENT<xsl:value-of select="substring-after(.,'ELEMENT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^evenement(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^evenement(\w*)$')">évènement<xsl:value-of select="substring-after(.,'evenement')"/></xsl:if>
       <xsl:if test="matches(.,'^Evenement(\w*)$')">Évènement<xsl:value-of select="substring-after(.,'Evenement')"/></xsl:if>
       <xsl:if test="matches(.,'^EVENEMENT(\w*)$')">ÉVÈNEMENT<xsl:value-of select="substring-after(.,'EVENEMENT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^advenement(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]dvenement(\w*)$')">advènement<xsl:value-of select="substring-after(.,'dvenement')"/></xsl:if>
       <xsl:if test="matches(.,'^ADVENEMENT(\w*)$')">ADVÈNEMENT<xsl:value-of select="substring-after(.,'ADVENEMENT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)(il|qu)ites?$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)(il|qu)ites?$')"><xsl:value-of select="substring-before(.,'ite')"/>ité<xsl:value-of select="substring-after(.,'ite')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)(IL|QU)ITES?$')"><xsl:value-of select="substring-before(.,'ITE')"/>ITÉ<xsl:value-of select="substring-after(.,'ITE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)mities?$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)mities?$')"><xsl:value-of select="substring-before(.,'mitie')"/>mitié<xsl:value-of select="substring-after(.,'mitie')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)MITIES?$')"><xsl:value-of select="substring-before(.,'MITIE')"/>MITIÉ<xsl:value-of select="substring-after(.,'MITIE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)etiq(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)etiq(\w+)$')"><xsl:value-of select="substring-before(.,'etiq')"/>étiq<xsl:value-of select="substring-after(.,'etiq')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ETIQ(\w+)$')"><xsl:value-of select="substring-before(.,'ETIQ')"/>ÉTIQ<xsl:value-of select="substring-after(.,'ETIQ')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^pres$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]res$')"><xsl:value-of select="substring-before(.,'res')"/>rès</xsl:if>
       <xsl:if test="matches(.,'^PRES$')">PRÈS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^au?pres$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]u?pres$')"><xsl:value-of select="substring-before(.,'pres')"/>près</xsl:if>
       <xsl:if test="matches(.,'^AU?PRES$')"><xsl:value-of select="substring-before(.,'pres')"/>PRÈS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)elis[tm]es?$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)elis[tm]es?$')"><xsl:value-of select="substring-before(.,'elis')"/>élis<xsl:value-of select="substring-after(.,'elis')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ELIS[TM]ES?$')"><xsl:value-of select="substring-before(.,'ELIS')"/>ÉLIS<xsl:value-of select="substring-after(.,'ELIS')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^francois$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]rancois$')"><xsl:value-of select="substring-before(.,'rancois')"/>rançais</xsl:if>
       <xsl:if test="matches(.,'^FRANCOIS$')">FRANÇAIS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^elire$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^elire$')">élire</xsl:if>
       <xsl:if test="matches(.,'^Elire$')">Élire</xsl:if>                                
       <xsl:if test="matches(.,'^ELIRE$')">ÉLIRE</xsl:if></reg></choice>
</xsl:when> 
                <!--AUTRE-->
 <xsl:when test="matches(.,'^(\w+)ostre$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ostre$')"><xsl:value-of select="substring-before(.,'ostre')"/>otre</xsl:if>
       <xsl:if test="matches(.,'^(\w+)OSTRE$')"><xsl:value-of select="substring-before(.,'OSTRE')"/>OTRE</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^dueil(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ueil(\w*)$')"><xsl:value-of select="substring-before(.,'ueil')"/>euil<xsl:value-of select="substring-after(.,'ueil')"/></xsl:if>
       <xsl:if test="matches(.,'^DUEIL(\w*)$')">DEUIL<xsl:value-of select="substring-after(.,'DUEIL')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)ologe(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ologe(\w*)$')"><xsl:value-of select="substring-before(.,'ologe')"/>ologue<xsl:value-of select="substring-after(.,'ologe')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)OLOGE(\w*)$')">OLOGUE<xsl:value-of select="substring-after(.,'OLOGE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^verolez$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]erolez$')"><xsl:value-of select="substring-before(.,'erolez')"/>erolés</xsl:if>
       <xsl:if test="matches(.,'^VEROLEZ$')">VEROLÉS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^precept(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]recept(\w*)$')"><xsl:value-of select="substring-before(.,'recept')"/>récept<xsl:value-of select="substring-after(.,'recept')"/></xsl:if>
       <xsl:if test="matches(.,'^PRECEPT(\w*)$')">PRÉCEPT<xsl:value-of select="substring-after(.,'PRECEPT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^silenes?$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]ilenes?$')"><xsl:value-of select="substring-before(.,'ilene')"/>ilène<xsl:value-of select="substring-after(.,'ilene')"/></xsl:if>
       <xsl:if test="matches(.,'^SILENES?$')">SILÈNE<xsl:value-of select="substring-after(.,'SILENE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^oys(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]ys(\w*)$')"><xsl:value-of select="substring-before(.,'ys')"/>is<xsl:value-of select="substring-after(.,'ys')"/></xsl:if>
       <xsl:if test="matches(.,'^OYS(\w*)$')">OIS<xsl:value-of select="substring-after(.,'OYS')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^lievres?$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]ievres?$')"><xsl:value-of select="substring-before(.,'ievre')"/>ièvre<xsl:value-of select="substring-after(.,'ievre')"/></xsl:if>
       <xsl:if test="matches(.,'^LIEVRES?$')">LIÈVRE<xsl:value-of select="substring-after(.,'LIEVRE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)fz$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)fz$')"><xsl:value-of select="substring-before(.,'fz')"/>fs</xsl:if>
       <xsl:if test="matches(.,'^(\w+)FZ$')"><xsl:value-of select="substring-before(.,'FZ')"/>FS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)servoit$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)servoit$')"><xsl:value-of select="substring-before(.,'servoit')"/>servait</xsl:if>
       <xsl:if test="matches(.,'^(\w+)SERVOIT$')"><xsl:value-of select="substring-before(.,'SERVOIT')"/>SERVAIT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)teriore(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)teriore(\w*)$')"><xsl:value-of select="substring-before(.,'teriore')"/>térieure<xsl:value-of select="substring-after(.,'teriore')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)TERIORE(\w*)$')"><xsl:value-of select="substring-before(.,'TERIORE')"/>TÉRIEURE<xsl:value-of select="substring-after(.,'TERIORE')"/></xsl:if></reg></choice>
</xsl:when>
            <xsl:when test="matches(.,'^(\w*)guardian(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)guardian(\w*)$')"><xsl:value-of select="substring-before(.,'guardian')"/>gardien<xsl:value-of select="substring-after(.,'guardian')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)GUARDIAN(\w*)$')"><xsl:value-of select="substring-before(.,'GUARDIAN')"/>GARDIEN<xsl:value-of select="substring-after(.,'GUARDIAN')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^guard(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Gg]uard(\w*)$')"><xsl:value-of select="substring-before(.,'uard')"/>ard<xsl:value-of select="substring-after(.,'uard')"/></xsl:if>
                    <xsl:if test="matches(.,'^GUARD(\w*)$')">GARD<xsl:value-of select="substring-after(.,'GUARD')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^guabelant$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]uabelant$')"><xsl:value-of select="substring-before(.,'uabelant')"/>abelant<xsl:value-of select="substring-after(.,'uabelant')"/></xsl:if>
       <xsl:if test="matches(.,'^GUABELANT$')">GABELANT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^republique(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]epublique(\w*)$')"><xsl:value-of select="substring-before(.,'epublique')"/>épublique<xsl:value-of select="substring-after(.,'epublique')"/></xsl:if>
       <xsl:if test="matches(.,'^REPUBLIQUE(\w*)$')">RÉPUBLIQUE<xsl:value-of select="substring-after(.,'REPUBLIQUE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^ouvrans$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]uvrans$')"><xsl:value-of select="substring-before(.,'uvrans')"/>uvrant</xsl:if>
       <xsl:if test="matches(.,'^OUVRANS$')">OUVRANT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^lisans$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]isans$')"><xsl:value-of select="substring-before(.,'isans')"/>isant</xsl:if>
       <xsl:if test="matches(.,'^LISANS$')">LISANT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^deprisement(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]eprisement(\w*)$')"><xsl:value-of select="substring-before(.,'eprisement')"/>éprisement<xsl:value-of select="substring-after(.,'eprisement')"/></xsl:if>
       <xsl:if test="matches(.,'^DEPRISEMENT(\w*)$')">DÉPRISEMENT<xsl:value-of select="substring-after(.,'DEPRISEMENT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^veiglent$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eiglent$')"><xsl:value-of select="substring-before(.,'eiglent')"/>euillent</xsl:if>
       <xsl:if test="matches(.,'^VEIGLENT$')">VEUILLENT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^prelude(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]relude(\w*)$')"><xsl:value-of select="substring-before(.,'relude')"/>rélude<xsl:value-of select="substring-after(.,'relude')"/></xsl:if>
       <xsl:if test="matches(.,'^PRELUDE(\w*)$')">PRÉLUDE<xsl:value-of select="substring-after(.,'PRELUDE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^dignite(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ignite(\w*)$')"><xsl:value-of select="substring-before(.,'ignite')"/>ignité<xsl:value-of select="substring-after(.,'ignite')"/></xsl:if>
       <xsl:if test="matches(.,'^DIGNITE(\w*)$')">DIGNITÉ<xsl:value-of select="substring-after(.,'DIGNITE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^folaterie(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]olaterie(\w*)$')"><xsl:value-of select="substring-before(.,'olaterie')"/>olâtrerie<xsl:value-of select="substring-after(.,'olaterie')"/></xsl:if>
       <xsl:if test="matches(.,'^FOLATERIE(\w*)$')">FOLÂTRERIE<xsl:value-of select="substring-after(.,'FOLATERIE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^folastre(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]olastre(\w*)$')"><xsl:value-of select="substring-before(.,'olastre')"/>olâtre<xsl:value-of select="substring-after(.,'olastre')"/></xsl:if>
       <xsl:if test="matches(.,'^FOLASTRE(\w*)$')">FOLÂTRE<xsl:value-of select="substring-after(.,'FOLASTRE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)querir$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Qq]uerir$')"><xsl:value-of select="substring-before(.,'uerir')"/>uérir</xsl:if>
       <xsl:if test="matches(.,'^(\w*)QUERIR$')"><xsl:value-of select="substring-before(.,'QUERIR')"/>QUÉRIR</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^deri(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]eri(\w*)$')"><xsl:value-of select="substring-before(.,'eri')"/>éri<xsl:value-of select="substring-after(.,'eri')"/></xsl:if>
       <xsl:if test="matches(.,'^DERI(\w*)$')">DÉRI<xsl:value-of select="substring-after(.,'DERI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^[rd]edu(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[DdRr]edu(\w*)$')"><xsl:value-of select="substring-before(.,'edu')"/>édu<xsl:value-of select="substring-after(.,'edu')"/></xsl:if>
       <xsl:if test="matches(.,'^[RD]EDU(\w*)$')"><xsl:value-of select="substring-before(.,'EDU')"/>ÉDU<xsl:value-of select="substring-after(.,'EDU')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^legierete(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]egierete(\w*)$')"><xsl:value-of select="substring-before(.,'egierete')"/>égèreté<xsl:value-of select="substring-after(.,'egierete')"/></xsl:if>
       <xsl:if test="matches(.,'^LEGIERETE(\w*)$')">ÉGÈRETÉ<xsl:value-of select="substring-after(.,'LEGIERETE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^legiere(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]egiere(\w*)$')"><xsl:value-of select="substring-before(.,'egiere')"/>égère<xsl:value-of select="substring-after(.,'egiere')"/></xsl:if>
       <xsl:if test="matches(.,'^LEGIERE(\w*)$')">ÉGÈRE<xsl:value-of select="substring-after(.,'LEGIERE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^vestu(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]estu(\w*)$')"><xsl:value-of select="substring-before(.,'estu')"/>êtu<xsl:value-of select="substring-after(.,'estu')"/></xsl:if>
       <xsl:if test="matches(.,'^VESTU(\w*)$')">VÊTU<xsl:value-of select="substring-after(.,'VESTU')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^hespanol(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^hespanol(\w*)$')"><xsl:value-of select="substring-before(.,'hespanol')"/>espagnol<xsl:value-of select="substring-after(.,'hespanol')"/></xsl:if>
       <xsl:if test="matches(.,'^Hespanol(\w*)$')"><xsl:value-of select="substring-before(.,'Hespanol')"/>Espagnol<xsl:value-of select="substring-after(.,'Hespanol')"/></xsl:if>
       <xsl:if test="matches(.,'^HESPANOL(\w*)$')">ESPAGNOL<xsl:value-of select="substring-after(.,'HESPANOL')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)romettoi(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)romettoi(\w*)$')"><xsl:value-of select="substring-before(.,'romettoi')"/>romettai<xsl:value-of select="substring-after(.,'romettoi')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ROMETTOI(\w*)$')"><xsl:value-of select="substring-before(.,'ROMETTOI')"/>ROMETTAI<xsl:value-of select="substring-after(.,'ROMETTOI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^pretendoi(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]retendoi(\w*)$')"><xsl:value-of select="substring-before(.,'retendoi')"/>rétendai<xsl:value-of select="substring-after(.,'retendoi')"/></xsl:if>
       <xsl:if test="matches(.,'^PRETENDOI(\w*)$')">PRÉTENDAI<xsl:value-of select="substring-after(.,'PRETENDOI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^literal(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]iteral(\w*)$')"><xsl:value-of select="substring-before(.,'iteral')"/>ittéral<xsl:value-of select="substring-after(.,'iteral')"/></xsl:if>
       <xsl:if test="matches(.,'^LITERAL(\w*)$')">LITTÉRAL<xsl:value-of select="substring-after(.,'LITERAL')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^demour(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]emour(\w*)$')"><xsl:value-of select="substring-before(.,'emour')"/>emeur<xsl:value-of select="substring-after(.,'emour')"/></xsl:if>
       <xsl:if test="matches(.,'^DEMOUR(\w*)$')">DEMEUR<xsl:value-of select="substring-after(.,'DEMOUR')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^sirene(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]irene(\w*)$')"><xsl:value-of select="substring-before(.,'irene')"/>irène<xsl:value-of select="substring-after(.,'irene')"/></xsl:if>
       <xsl:if test="matches(.,'^SIRENE(\w*)$')">SIRÈNE<xsl:value-of select="substring-after(.,'SIRENE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^gaiete(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]aiete(\w*)$')"><xsl:value-of select="substring-before(.,'aiete')"/>aieté<xsl:value-of select="substring-after(.,'aiete')"/></xsl:if>
       <xsl:if test="matches(.,'^GAIETE(\w*)$')">GAIETÉ<xsl:value-of select="substring-after(.,'GAIETE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^crochetastes$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]rochetastes$')"><xsl:value-of select="substring-before(.,'rochetastes')"/>rochetâtes</xsl:if>
       <xsl:if test="matches(.,'^CROCHETASTES$')">CROCHETÂTES</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^veist$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eist$')"><xsl:value-of select="substring-before(.,'eist')"/>it</xsl:if>
       <xsl:if test="matches(.,'^VEIST$')">VIT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^veistes$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eistes$')"><xsl:value-of select="substring-before(.,'eistes')"/>îtes</xsl:if>
       <xsl:if test="matches(.,'^VEISTES$')">VÎTES</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^contenen(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ontenen(\w*)$')"><xsl:value-of select="substring-before(.,'ontenen')"/>ontenan<xsl:value-of select="substring-after(.,'ontenen')"/></xsl:if>
       <xsl:if test="matches(.,'^CONTENEN(\w*)$')">CONTENAN<xsl:value-of select="substring-after(.,'CONTENEN')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^medulare(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]edulare(\w*)$')"><xsl:value-of select="substring-before(.,'edulare')"/>édullaire<xsl:value-of select="substring-after(.,'edulare')"/></xsl:if>
       <xsl:if test="matches(.,'^MEDULARE(\w*)$')">MÉDULLAIRE<xsl:value-of select="substring-after(.,'MEDULARE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^beste(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]este(\w*)$')"><xsl:value-of select="substring-before(.,'este')"/>ête<xsl:value-of select="substring-after(.,'este')"/></xsl:if>
       <xsl:if test="matches(.,'^BESTE(\w*)$')">BÊTE<xsl:value-of select="substring-after(.,'BESTE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^pretend(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]retend(\w*)$')"><xsl:value-of select="substring-before(.,'retend')"/>rétend<xsl:value-of select="substring-after(.,'retend')"/></xsl:if>
       <xsl:if test="matches(.,'^PRETEND(\w*)$')">PRÉTEND<xsl:value-of select="substring-after(.,'PRETEND')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^deli(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]eli(\w+)$')"><xsl:value-of select="substring-before(.,'eli')"/>éli<xsl:value-of select="substring-after(.,'eli')"/></xsl:if>
       <xsl:if test="matches(.,'^DELI(\w+)$')">DÉLI<xsl:value-of select="substring-after(.,'DELI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^mouelle(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ouelle(\w*)$')"><xsl:value-of select="substring-before(.,'ouelle')"/>oelle<xsl:value-of select="substring-after(.,'ouelle')"/></xsl:if>
       <xsl:if test="matches(.,'^MOUELLE(\w*)$')">MOELLE<xsl:value-of select="substring-after(.,'MOUELLE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^gresse(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]resse(\w*)$')"><xsl:value-of select="substring-before(.,'resse')"/>raisse<xsl:value-of select="substring-after(.,'resse')"/></xsl:if>
       <xsl:if test="matches(.,'^GRESSE(\w*)$')">GRAISSE<xsl:value-of select="substring-after(.,'GRESSE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^legiers?$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]egiers?$')"><xsl:value-of select="substring-before(.,'legier')"/>léger<xsl:value-of select="substring-after(.,'legier')"/></xsl:if>
       <xsl:if test="matches(.,'^LEGIERS?$')">LÉGER<xsl:value-of select="substring-after(.,'LEGIER')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^hardiz$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]ardiz$')"><xsl:value-of select="substring-before(.,'ardiz')"/>ardis</xsl:if>
       <xsl:if test="matches(.,'^HARDIZ$')">HARDIS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^medit(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]edit(\w+)$')"><xsl:value-of select="substring-before(.,'edit')"/>édit<xsl:value-of select="substring-after(.,'edit')"/></xsl:if>
       <xsl:if test="matches(.,'^MEDIT(\w+)$')">MÉDIT<xsl:value-of select="substring-after(.,'MEDIT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^reveler(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]eveler(\w+)$')"><xsl:value-of select="substring-before(.,'eveler')"/>évèler<xsl:value-of select="substring-after(.,'eveler')"/></xsl:if>
       <xsl:if test="matches(.,'^REVELER(\w+)$')">RÉVÈLER<xsl:value-of select="substring-after(.,'REVELER')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^oeconomi(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^oeconomi(\w*)$')">économi<xsl:value-of select="substring-after(.,'oeconomi')"/></xsl:if>
       <xsl:if test="matches(.,'^Oeconomi(\w*)$')">économi<xsl:value-of select="substring-after(.,'oeconomi')"/></xsl:if>
       <xsl:if test="matches(.,'^OECONOMI(\w*)$')">ÉCONOMI<xsl:value-of select="substring-after(.,'OECONOMI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^croiez$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]roiez$')"><xsl:value-of select="substring-before(.,'roiez')"/>royez</xsl:if>
       <xsl:if test="matches(.,'^CROIEZ$')">CROYEZ</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^pensast$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ensast$')"><xsl:value-of select="substring-before(.,'ensast')"/>ensât</xsl:if>
       <xsl:if test="matches(.,'^PENSAST$')">PENSÂT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^meta(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]eta(\w*)$')"><xsl:value-of select="substring-before(.,'eta')"/>éta<xsl:value-of select="substring-after(.,'eta')"/></xsl:if>
       <xsl:if test="matches(.,'^META(\w*)$')">MÉTA<xsl:value-of select="substring-after(.,'META')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^demo(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]emo(\w+)$')"><xsl:value-of select="substring-before(.,'emo')"/>émo<xsl:value-of select="substring-after(.,'emo')"/></xsl:if>
       <xsl:if test="matches(.,'^DEMO(\w+)$')">DÉMO<xsl:value-of select="substring-after(.,'DEMO')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^fols$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ols$')"><xsl:value-of select="substring-before(.,'ols')"/>ous</xsl:if>
       <xsl:if test="matches(.,'^FOLS$')">FOUS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^beviez$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]eviez$')"><xsl:value-of select="substring-before(.,'eviez')"/>uviez</xsl:if>
       <xsl:if test="matches(.,'^BEVIEZ$')">BUVIEZ</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^perdiz$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]erdiz$')"><xsl:value-of select="substring-before(.,'erdiz')"/>erdis</xsl:if>
       <xsl:if test="matches(.,'^PERDIZ$')">PERDIS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^profund(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]rofund(\w*)$')"><xsl:value-of select="substring-before(.,'rofund')"/>rofond<xsl:value-of select="substring-after(.,'rofund')"/></xsl:if>
       <xsl:if test="matches(.,'^PROFUND(\w*)$')">PROFOND<xsl:value-of select="substring-after(.,'PROFUND')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^tesmo(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]esmo(\w+)$')"><xsl:value-of select="substring-before(.,'esmo')"/>émo<xsl:value-of select="substring-after(.,'esmo')"/></xsl:if>
       <xsl:if test="matches(.,'^TESMO(\w+)$')">TÉMO<xsl:value-of select="substring-after(.,'TESMO')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^malautru(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]alautru(\w*)$')"><xsl:value-of select="substring-before(.,'alautru')"/>alotru<xsl:value-of select="substring-after(.,'alautru')"/></xsl:if>
       <xsl:if test="matches(.,'^MALAUTRU(\w*)$')">MALOTRU<xsl:value-of select="substring-after(.,'MALAUTRU')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^sentoy(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]entoy(\w+)$')"><xsl:value-of select="substring-before(.,'entoy')"/>entai<xsl:value-of select="substring-after(.,'entoy')"/></xsl:if>
       <xsl:if test="matches(.,'^SENTOY(\w+)$')">SENTAI<xsl:value-of select="substring-after(.,'SENTOY')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^friant(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]riant(\w*)$')"><xsl:value-of select="substring-before(.,'riant')"/>riand<xsl:value-of select="substring-after(.,'riant')"/></xsl:if>
       <xsl:if test="matches(.,'^FRIANT(\w*)$')">FRIAND<xsl:value-of select="substring-after(.,'FRIANT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^huill(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]uill(\w*)$')"><xsl:value-of select="substring-before(.,'uill')"/>uil<xsl:value-of select="substring-after(.,'uill')"/></xsl:if>
       <xsl:if test="matches(.,'^HUILL(\w*)$')">HUIL<xsl:value-of select="substring-after(.,'HUILL')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^huyle(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]uyle(\w*)$')"><xsl:value-of select="substring-before(.,'uyle')"/>uile<xsl:value-of select="substring-after(.,'uyle')"/></xsl:if>
       <xsl:if test="matches(.,'^HUYLE(\w*)$')">HUILE<xsl:value-of select="substring-after(.,'HUYLE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)rendray(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Rr]endray(\w*)$')"><xsl:value-of select="substring-before(.,'endray')"/>endrai<xsl:value-of select="substring-after(.,'endray')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)RENDRAY(\w*)$')"><xsl:value-of select="substring-before(.,'RENDRAY')"/>RENDRAI<xsl:value-of select="substring-after(.,'RENDRAY')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^die$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ie$')"><xsl:value-of select="substring-before(.,'ie')"/>it</xsl:if>
       <xsl:if test="matches(.,'^DIE$')">DIT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^fist$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ist$')"><xsl:value-of select="substring-before(.,'ist')"/>it</xsl:if>
       <xsl:if test="matches(.,'^FIST$')">FIT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^disoi(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]isoi(\w*)$')"><xsl:value-of select="substring-before(.,'isoi')"/>isai<xsl:value-of select="substring-after(.,'isoi')"/></xsl:if>
       <xsl:if test="matches(.,'^DISOI(\w*)$')">DISAI<xsl:value-of select="substring-after(.,'DISOI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^dépendoi(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]épendoi(\w*)$')"><xsl:value-of select="substring-before(.,'épendoi')"/>épendai<xsl:value-of select="substring-after(.,'épendoi')"/></xsl:if>
       <xsl:if test="matches(.,'^DÉPENDOI(\w*)$')">DÉPENDAI<xsl:value-of select="substring-after(.,'DÉPENDOI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)sentoi(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Ss]entoi(\w*)$')"><xsl:value-of select="substring-before(.,'entoi')"/>entai<xsl:value-of select="substring-after(.,'entoi')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)SENTOI(\w*)$')"><xsl:value-of select="substring-before(.,'SENTOI')"/>SENTAI<xsl:value-of select="substring-after(.,'SENTOI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^serpilliere(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]erpilliere(\w*)$')"><xsl:value-of select="substring-before(.,'erpilliere')"/>erpillère<xsl:value-of select="substring-after(.,'erpilliere')"/></xsl:if>
       <xsl:if test="matches(.,'^SERPILLIERE(\w*)$')">SERPILLÈRE<xsl:value-of select="substring-after(.,'SERPILLIERE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^interpretez$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ii]nterpretez$')"><xsl:value-of select="substring-before(.,'nterpretez')"/>nterprétez</xsl:if>
       <xsl:if test="matches(.,'^INTERPRETEZ$')">INTERPRÉTEZ</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^paist$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]aist$')"><xsl:value-of select="substring-before(.,'aist')"/>aît</xsl:if>
       <xsl:if test="matches(.,'^PAIST$')">PAÎT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^povoir$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ovoir$')"><xsl:value-of select="substring-before(.,'ovoir')"/>ouvoir</xsl:if>
       <xsl:if test="matches(.,'^POVOIR$')">POUVOIR</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^esba(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^esba(\w*)$')">éba<xsl:value-of select="substring-after(.,'esba')"/></xsl:if>
       <xsl:if test="matches(.,'^Esba(\w*)$')">Éba<xsl:value-of select="substring-after(.,'Esba')"/></xsl:if>
       <xsl:if test="matches(.,'^ESBA(\w*)$')">ÉBA<xsl:value-of select="substring-after(.,'ESBA')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^guayement$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]uayement$')"><xsl:value-of select="substring-before(.,'uayement')"/>aiement</xsl:if>
       <xsl:if test="matches(.,'^GUAYEMENT$')">GAIEMENT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^viets$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]iets$')"><xsl:value-of select="substring-before(.,'iets')"/>its</xsl:if>
       <xsl:if test="matches(.,'^VIETS$')">VITS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^soubvienne(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]oubvienne(\w*)$')"><xsl:value-of select="substring-before(.,'oubvienne')"/>ouvienne<xsl:value-of select="substring-after(.,'oubvienne')"/></xsl:if>
       <xsl:if test="matches(.,'^SOUBVIENNE(\w*)$')">SOUVIENNE<xsl:value-of select="substring-after(.,'SOUBVIENNE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^my$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]y$')"><xsl:value-of select="substring-before(.,'y')"/>i</xsl:if>
       <xsl:if test="matches(.,'^MY$')">MI</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^metys$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]etys$')"><xsl:value-of select="substring-before(.,'etys')"/>etis</xsl:if>
       <xsl:if test="matches(.,'^METYS$')">METIS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^genealogie(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]enealogie(\w*)$')"><xsl:value-of select="substring-before(.,'enealogie')"/>énéalogie<xsl:value-of select="substring-after(.,'enealogie')"/></xsl:if>
       <xsl:if test="matches(.,'^GENEALOGIE(\w*)$')">GÉNÉALOGIE<xsl:value-of select="substring-after(.,'GENEALOGIE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^remects$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]emects$')"><xsl:value-of select="substring-before(.,'emects')"/>emets</xsl:if>
       <xsl:if test="matches(.,'^REMECTS$')">REMETS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^geands?$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]eands?$')"><xsl:value-of select="substring-before(.,'eand')"/>éant<xsl:value-of select="substring-after(.,'eand')"/></xsl:if>
       <xsl:if test="matches(.,'^GEANDS?(\w*)$')">GÉANT<xsl:value-of select="substring-after(.,'GEAND')"/></xsl:if></reg></choice>
</xsl:when> 
<xsl:when test="matches(.,'^nasqui(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Nn]asqui(\w+)$')"><xsl:value-of select="substring-before(.,'asqui')"/>aqui<xsl:value-of select="substring-after(.,'asqui')"/></xsl:if>
       <xsl:if test="matches(.,'^NASQUI(\w+)$')">NAQUI<xsl:value-of select="substring-after(.,'NASQUI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^remects$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]emects$')"><xsl:value-of select="substring-before(.,'emects')"/>emets</xsl:if>
       <xsl:if test="matches(.,'^REMECTS$')">REMETS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^yssit$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^yssit$')"><xsl:value-of select="substring-before(.,'yssit')"/>issit</xsl:if>
       <xsl:if test="matches(.,'^Yssit$')"><xsl:value-of select="substring-before(.,'Yssit')"/>Issit</xsl:if>
       <xsl:if test="matches(.,'^YSSIT$')">ISSIT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^fascher(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ascher(\w+)$')"><xsl:value-of select="substring-before(.,'ascher')"/>âcher<xsl:value-of select="substring-after(.,'ascher')"/></xsl:if>
       <xsl:if test="matches(.,'^FASCHER(\w+)$')">FÂCHER<xsl:value-of select="substring-after(.,'FASCHER')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^plairoi(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]lairoi(\w*)$')"><xsl:value-of select="substring-before(.,'lairoi')"/>lairai<xsl:value-of select="substring-after(.,'lairoi')"/></xsl:if>
       <xsl:if test="matches(.,'^PLAIROI(\w*)$')">PLAIRAI<xsl:value-of select="substring-after(.,'PLAIROI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^sust$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]ust$')"><xsl:value-of select="substring-before(.,'ust')"/>ût</xsl:if>
       <xsl:if test="matches(.,'^SUST$')">SÛT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^jusques$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Jj]usques$')"><xsl:value-of select="substring-before(.,'usques')"/>usque</xsl:if>
       <xsl:if test="matches(.,'^JUSQUES$')">JUSQUE</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^aujourdhuy$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ujourdhuy$')"><xsl:value-of select="substring-before(.,'ujourdhuy')"/>ujourd'hui</xsl:if>
       <xsl:if test="matches(.,'^AUJOURDHUY$')">AUJOURD'HUI</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^ducz$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ucz$')"><xsl:value-of select="substring-before(.,'ucz')"/>ucs</xsl:if>
       <xsl:if test="matches(.,'^DUCZ$')">DUCS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^descenduz$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]escenduz$')"><xsl:value-of select="substring-before(.,'escenduz')"/>escendus</xsl:if>
       <xsl:if test="matches(.,'^DESCENDUZ$')">DESCENDUS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^coustrets$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]oustrets$')"><xsl:value-of select="substring-before(.,'oustrets')"/>outrets</xsl:if>
       <xsl:if test="matches(.,'^COUSTRETS$')">COUTRETS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^hostiaire(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^hostiaire(\w*)$')">ostiaire<xsl:value-of select="substring-after(.,'hostiaire')"/></xsl:if>
       <xsl:if test="matches(.,'^Hostiaire(\w*)$')">Ostiaire<xsl:value-of select="substring-after(.,'Hostiaire')"/></xsl:if>
       <xsl:if test="matches(.,'^HOSTIAIRE(\w*)$')">OSTIAIRE<xsl:value-of select="substring-after(.,'HOSTIAIRE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^grandz$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]randz$')"><xsl:value-of select="substring-before(.,'randz')"/>rands</xsl:if>
       <xsl:if test="matches(.,'^GRANDZ$')">GRANDS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^es$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^es$')">ès</xsl:if>
       <xsl:if test="matches(.,'^Es$')">Ès</xsl:if>
       <xsl:if test="matches(.,'^ES$')">ÈS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^auseroie$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^auseroie$')">oserais</xsl:if>
       <xsl:if test="matches(.,'^Auseroie$')">Oserais</xsl:if>
       <xsl:if test="matches(.,'^AUSEROIE$')">OSERAIS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^soubhaitt(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]oubhaitt(\w+)$')"><xsl:value-of select="substring-before(.,'oubhaitt')"/>ouhait<xsl:value-of select="substring-after(.,'oubhaitt')"/></xsl:if>
       <xsl:if test="matches(.,'^SOUBHAITT(\w+)$')">SOUHAIT<xsl:value-of select="substring-after(.,'SOUBHAITT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^beuvans$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]euvans$')"><xsl:value-of select="substring-before(.,'euvans')"/>uvant<xsl:value-of select="substring-after(.,'euvans')"/></xsl:if>
       <xsl:if test="matches(.,'^BEUVANS(\w+)$')">BUVANT<xsl:value-of select="substring-after(.,'BEUVANS')"/></xsl:if></reg></choice>
</xsl:when>
            <xsl:when test="matches(.,'^beuveries?$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]euveries?$')"><xsl:value-of select="substring-before(.,'euverie')"/>euverie<xsl:value-of select="substring-after(.,'euverie')"/></xsl:if>
                    <xsl:if test="matches(.,'^BEUVERIES?$')">BEUVERIE<xsl:value-of select="substring-after(.,'BEUVERIE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^beuv(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]euv(\w+)$')"><xsl:value-of select="substring-before(.,'euv')"/>uv<xsl:value-of select="substring-after(.,'euv')"/></xsl:if>
       <xsl:if test="matches(.,'^BEUV(\w+)$')">BUV<xsl:value-of select="substring-after(.,'BEUV')"/></xsl:if></reg></choice>
</xsl:when>
            <xsl:when test="matches(.,'^beu$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]eu$')"><xsl:value-of select="substring-before(.,'eu')"/>u</xsl:if>
                    <xsl:if test="matches(.,'^BEU$')">BU</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^calumni(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]alumni(\w+)$')"><xsl:value-of select="substring-before(.,'alumni')"/>alomni<xsl:value-of select="substring-after(.,'alumni')"/></xsl:if>
       <xsl:if test="matches(.,'^CALUMNI(\w+)$')">CALOMNI<xsl:value-of select="substring-after(.,'CALUMNI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^caffars$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]affars$')"><xsl:value-of select="substring-before(.,'affars')"/>afards</xsl:if>
       <xsl:if test="matches(.,'^CAFFARS$')">CAFFARDS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^excluse(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^excluse(\w*)$')">écluse<xsl:value-of select="substring-after(.,'excluse')"/></xsl:if>
       <xsl:if test="matches(.,'^Excluse(\w*)$')">Écluse<xsl:value-of select="substring-after(.,'Excluse')"/></xsl:if>
       <xsl:if test="matches(.,'^EXCLUSE(\w*)$')">ÉCLUSE<xsl:value-of select="substring-after(.,'EXCLUSE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^goubel(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]oubel(\w+)$')"><xsl:value-of select="substring-before(.,'oubel')"/>obel<xsl:value-of select="substring-after(.,'oubel')"/></xsl:if>
       <xsl:if test="matches(.,'^GOUBEL(\w+)$')">GOBEL<xsl:value-of select="substring-after(.,'GOUBEL')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^assiet$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ssiet$')"><xsl:value-of select="substring-before(.,'ssiet')"/>ssied</xsl:if>
       <xsl:if test="matches(.,'^ASSIET$')">ASSIED</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^mylieu$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ylieu$')"><xsl:value-of select="substring-before(.,'ylieu')"/>ilieu</xsl:if>
       <xsl:if test="matches(.,'^MYLIEU$')">MILIEU</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^joly(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Jj]oly(\w*)$')"><xsl:value-of select="substring-before(.,'oly')"/>oli<xsl:value-of select="substring-after(.,'oly')"/></xsl:if>
       <xsl:if test="matches(.,'^JOLY(\w*)$')">JOLI<xsl:value-of select="substring-after(.,'JOLY')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^moisy(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]oisy(\w*)$')"><xsl:value-of select="substring-before(.,'oisy')"/>oisi<xsl:value-of select="substring-after(.,'oisy')"/></xsl:if>
       <xsl:if test="matches(.,'^MOISY(\w*)$')">MOISI<xsl:value-of select="substring-after(.,'MOISY')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^cere(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ere(\w*)$')"><xsl:value-of select="substring-before(.,'ere')"/>ire<xsl:value-of select="substring-after(.,'ere')"/></xsl:if>
       <xsl:if test="matches(.,'^CERE(\w*)$')">CIRE<xsl:value-of select="substring-after(.,'CERE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^poine(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]oine(\w*)$')"><xsl:value-of select="substring-before(.,'oine')"/>eine<xsl:value-of select="substring-after(.,'oine')"/></xsl:if>
       <xsl:if test="matches(.,'^POINE(\w*)$')">PEINE<xsl:value-of select="substring-after(.,'POINE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^povoi(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ovoi(\w*)$')"><xsl:value-of select="substring-before(.,'ovoi')"/>ouvai<xsl:value-of select="substring-after(.,'ovoi')"/></xsl:if>
       <xsl:if test="matches(.,'^POVOI(\w*)$')">POUVAI<xsl:value-of select="substring-after(.,'POVOI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^reconoître$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]econoître$')"><xsl:value-of select="substring-before(.,'econoître')"/>econnaître</xsl:if>
       <xsl:if test="matches(.,'^RECONOÎTRE$')">RECONNAÎTRE</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^ranc$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]anc$')"><xsl:value-of select="substring-before(.,'anc')"/>ang</xsl:if>
       <xsl:if test="matches(.,'^RANC$')">RANG</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^fuz$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]uz$')"><xsl:value-of select="substring-before(.,'uz')"/>us</xsl:if>
       <xsl:if test="matches(.,'^FUZ$')">FUS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^practiquant(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ractiquant(\w*)$')"><xsl:value-of select="substring-before(.,'ractiquant')"/>ratiquant<xsl:value-of select="substring-after(.,'ractiquant')"/></xsl:if>
       <xsl:if test="matches(.,'^PRACTIQUANT(\w*)$')">PRATIQUANT<xsl:value-of select="substring-after(.,'PRACTIQUANT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^practicant(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Pp]racticant(\w*)$')"><xsl:value-of select="substring-before(.,'racticant')"/>ratiquant<xsl:value-of select="substring-after(.,'racticant')"/></xsl:if>
                                <xsl:if test="matches(.,'^PRACTICANT(\w*)$')">PRATIQUANT<xsl:value-of select="substring-after(.,'PRACTICANT')"/></xsl:if></reg></choice>
                </xsl:when>
<xsl:when test="matches(.,'^translatay(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]ranslatay(\w*)$')"><xsl:value-of select="substring-before(.,'ranslatay')"/>ranslatai<xsl:value-of select="substring-after(.,'ranslatay')"/></xsl:if>
       <xsl:if test="matches(.,'^TRANSLATAY(\w*)$')">TRANSLATAI<xsl:value-of select="substring-after(.,'TRANSLATAY')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^contien$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ontien$')"><xsl:value-of select="substring-before(.,'ontien')"/>ontient</xsl:if>
       <xsl:if test="matches(.,'^CONTIEN$')">CONTIENT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^goubel(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]oubel(\w+)$')"><xsl:value-of select="substring-before(.,'oubel')"/>obel<xsl:value-of select="substring-after(.,'oubel')"/></xsl:if>
       <xsl:if test="matches(.,'^GOUBEL(\w+)$')">GOBEL<xsl:value-of select="substring-after(.,'GOUBEL')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^ded(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ed(\w+)$')"><xsl:value-of select="substring-before(.,'ed')"/>éd<xsl:value-of select="substring-after(.,'ed')"/></xsl:if>
       <xsl:if test="matches(.,'^DED(\w+)$')">DÉD<xsl:value-of select="substring-after(.,'DED')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^dialoge(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ialoge(\w*)$')"><xsl:value-of select="substring-before(.,'ialoge')"/>ialogue<xsl:value-of select="substring-after(.,'ialoge')"/></xsl:if>
       <xsl:if test="matches(.,'^DIALOGE(\w*)$')">DIALOGUE<xsl:value-of select="substring-after(.,'DIALOGE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^apothecaire(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]pothecaire(\w*)$')"><xsl:value-of select="substring-before(.,'pothecaire')"/>pothicaire<xsl:value-of select="substring-after(.,'pothecaire')"/></xsl:if>
       <xsl:if test="matches(.,'^APOTHECAIRE(\w*)$')">APOTHICAIRE<xsl:value-of select="substring-after(.,'APOTHECAIRE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^bridez$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]ridez$')"><xsl:value-of select="substring-before(.,'ridez')"/>ridés</xsl:if>
       <xsl:if test="matches(.,'^BRIDEZ$')">BRIDÉS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^boucqs?$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]oucqs?(\w*)$')"><xsl:value-of select="substring-before(.,'oucq')"/>ouc<xsl:value-of select="substring-after(.,'oucq')"/></xsl:if>
       <xsl:if test="matches(.,'^BOUCQS?(\w*)$')">BOUC<xsl:value-of select="substring-after(.,'BOUCQ')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^pinture(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]inture(\w*)$')"><xsl:value-of select="substring-before(.,'inture')"/>einture<xsl:value-of select="substring-after(.,'inture')"/></xsl:if>
       <xsl:if test="matches(.,'^PINTURE(\w*)$')">PEINTURE<xsl:value-of select="substring-after(.,'PINTURE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^rustics?$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]ustics?(\w*)$')"><xsl:value-of select="substring-before(.,'ustic')"/>ustique<xsl:value-of select="substring-after(.,'ustic')"/></xsl:if>
       <xsl:if test="matches(.,'^RUSTICS?(\w*)$')">RUSTIQUE<xsl:value-of select="substring-after(.,'RUSTIC')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^boytes?$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]oytes?(\w*)$')"><xsl:value-of select="substring-before(.,'oyte')"/>oite<xsl:value-of select="substring-after(.,'oyte')"/></xsl:if>
       <xsl:if test="matches(.,'^BOYTES?(\w*)$')">BOITE<xsl:value-of select="substring-after(.,'BOYTE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^facille(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]acille(\w*)$')"><xsl:value-of select="substring-before(.,'acille')"/>acile<xsl:value-of select="substring-after(.,'acille')"/></xsl:if>
       <xsl:if test="matches(.,'^FACILLE(\w*)$')">FACILE<xsl:value-of select="substring-after(.,'FACILLE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^mocqu(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ocqu(\w+)$')"><xsl:value-of select="substring-before(.,'ocqu')"/>oqu<xsl:value-of select="substring-after(.,'ocqu')"/></xsl:if>
       <xsl:if test="matches(.,'^MOCQU(\w+)$')">MOQU<xsl:value-of select="substring-after(.,'MOCQU')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^correspondente(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]orrespondente(\w*)$')"><xsl:value-of select="substring-before(.,'orrespondente')"/>orrespondante<xsl:value-of select="substring-after(.,'orrespondente')"/></xsl:if>
       <xsl:if test="matches(.,'^CORRESPONDENTE(\w*)$')">CORRESPONDANTE<xsl:value-of select="substring-after(.,'CORRESPONDENTE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^interpreter(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ii]nterpreter(\w*)$')"><xsl:value-of select="substring-before(.,'nterpreter')"/>nterpréter<xsl:value-of select="substring-after(.,'nterpreter')"/></xsl:if>
       <xsl:if test="matches(.,'^INTERPRETER(\w*)$')">INTERPRÉTER<xsl:value-of select="substring-after(.,'INTERPRETER')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^sugce(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]ugce(\w*)$')"><xsl:value-of select="substring-before(.,'ugce')"/>uce<xsl:value-of select="substring-after(.,'ugce')"/></xsl:if>
       <xsl:if test="matches(.,'^SUGCE(\w*)$')">SUCE<xsl:value-of select="substring-after(.,'SUGCE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^lecons?$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]econs?$')"><xsl:value-of select="substring-before(.,'econ')"/>eçon<xsl:value-of select="substring-after(.,'econ')"/></xsl:if>
       <xsl:if test="matches(.,'^LECONS?$')">LEÇON<xsl:value-of select="substring-after(.,'LECON')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^freque(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]reque(\w+)$')"><xsl:value-of select="substring-before(.,'reque')"/>réque<xsl:value-of select="substring-after(.,'reque')"/></xsl:if>
       <xsl:if test="matches(.,'^FREQUE(\w+)$')">FRÉQUE<xsl:value-of select="substring-after(.,'FREQUE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^sustan(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]ustan(\w+)$')"><xsl:value-of select="substring-before(.,'ustan')"/>ubstan<xsl:value-of select="substring-after(.,'ustan')"/></xsl:if>
       <xsl:if test="matches(.,'^SUSTAN(\w+)$')">SUBSTAN<xsl:value-of select="substring-after(.,'SUSTAN')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)icq$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)icq$')"><xsl:value-of select="substring-before(.,'icq')"/>ique<xsl:value-of select="substring-after(.,'icq')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ICQ$')"><xsl:value-of select="substring-before(.,'ICQ')"/>IQUE<xsl:value-of select="substring-after(.,'ICQ')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^evang(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^evang(\w+)$')"><xsl:value-of select="substring-before(.,'evang')"/>évang<xsl:value-of select="substring-after(.,'evang')"/></xsl:if>
       <xsl:if test="matches(.,'^Evang(\w+)$')"><xsl:value-of select="substring-before(.,'Evang')"/>Évang<xsl:value-of select="substring-after(.,'Evang')"/></xsl:if>
       <xsl:if test="matches(.,'^EVANG(\w+)$')">ÉVANG<xsl:value-of select="substring-after(.,'EVANG')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)monstrer$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Mm]onstrer$')"><xsl:value-of select="substring-before(.,'onstrer')"/>ontrer<xsl:value-of select="substring-after(.,'onstrer')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)MONSTRER$')"><xsl:value-of select="substring-before(.,'MONSTRER')"/>MONTRER<xsl:value-of select="substring-after(.,'MONSTRER')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)controi(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)controi(\w+)$')"><xsl:value-of select="substring-before(.,'controi')"/>contrai<xsl:value-of select="substring-after(.,'controi')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)CONTROI(\w+)$')"><xsl:value-of select="substring-before(.,'CONTROI')"/>CONTRAI<xsl:value-of select="substring-after(.,'CONTROI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^refec(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]efec(\w+)$')"><xsl:value-of select="substring-before(.,'efec')"/>éfec<xsl:value-of select="substring-after(.,'efec')"/></xsl:if>
       <xsl:if test="matches(.,'^REFEC(\w+)$')">RÉFEC<xsl:value-of select="substring-after(.,'REFEC')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^delec(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]elec(\w+)$')"><xsl:value-of select="substring-before(.,'elec')"/>élec<xsl:value-of select="substring-after(.,'elec')"/></xsl:if>
       <xsl:if test="matches(.,'^DELEC(\w+)$')">DÉLEC<xsl:value-of select="substring-after(.,'DELEC')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)eiforme(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)eiforme(\w*)$')"><xsl:value-of select="substring-before(.,'eiforme')"/>éiforme<xsl:value-of select="substring-after(.,'eiforme')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)EIFORME(\w*)$')"><xsl:value-of select="substring-before(.,'EIFORME')"/>ÉIFORME<xsl:value-of select="substring-after(.,'EIFORME')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^autorite(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]utorite(\w*)$')"><xsl:value-of select="substring-before(.,'utorite')"/>utorité<xsl:value-of select="substring-after(.,'utorite')"/></xsl:if>
       <xsl:if test="matches(.,'^AUTORITE(\w*)$')">AUTORITÉ<xsl:value-of select="substring-after(.,'AUTORITE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)reserv(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Rr]eserv(\w*)$')"><xsl:value-of select="substring-before(.,'eserv')"/>éserv<xsl:value-of select="substring-after(.,'eserv')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)RESERV(\w*)$')"><xsl:value-of select="substring-before(.,'RESERV')"/>RÉSERV<xsl:value-of select="substring-after(.,'RESERV')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^fossez$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ossez(\w*)$')"><xsl:value-of select="substring-before(.,'ossez')"/>ossés<xsl:value-of select="substring-after(.,'ossez')"/></xsl:if>
       <xsl:if test="matches(.,'^FOSSEZ$')">FOSSÉS<xsl:value-of select="substring-after(.,'FOSSEZ')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)entroi(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Ee]ntroi(\w*)$')"><xsl:value-of select="substring-before(.,'ntroi')"/>ntrai<xsl:value-of select="substring-after(.,'ntroi')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)ENTROI(\w*)$')"><xsl:value-of select="substring-before(.,'ENTROI')"/>ENTRAI<xsl:value-of select="substring-after(.,'ENTROI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^flaccon(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]laccon(\w*)$')"><xsl:value-of select="substring-before(.,'laccon')"/>lacon<xsl:value-of select="substring-after(.,'laccon')"/></xsl:if>
       <xsl:if test="matches(.,'^FLACCON(\w*)$')">FLACON<xsl:value-of select="substring-after(.,'FLACCON')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)ouvroi(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Oo]uvroi(\w*)$')"><xsl:value-of select="substring-before(.,'uvroi')"/>uvrai<xsl:value-of select="substring-after(.,'uvroi')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OUVROI(\w*)$')"><xsl:value-of select="substring-before(.,'OUVROI')"/>OUVRAI<xsl:value-of select="substring-after(.,'OUVROI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^avoient$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Aa]voient$')"><xsl:value-of select="substring-before(.,'voient')"/>vaient</xsl:if>
                                <xsl:if test="matches(.,'^AVOIENT$')">AVAIENT</xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w+)joust(\w*)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w+)joust(\w*)$')"><xsl:value-of select="substring-before(.,'joust')"/>jout<xsl:value-of select="substring-after(.,'joust')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w+)JOUST(\w*)$')"><xsl:value-of select="substring-before(.,'OUVROI')"/>JOUT<xsl:value-of select="substring-after(.,'JOUST')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^arrous(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Aa]rrous(\w+)$')"><xsl:value-of select="substring-before(.,'rrous')"/>rros<xsl:value-of select="substring-after(.,'rrous')"/></xsl:if>
                                <xsl:if test="matches(.,'^ARROUS(\w+)$')">ARROS<xsl:value-of select="substring-after(.,'ARROUS')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w*)pesch(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w*)[Pp]esch(\w+)$')"><xsl:value-of select="substring-before(.,'esch')"/>êch<xsl:value-of select="substring-after(.,'esch')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w*)PESCH(\w+)$')"><xsl:value-of select="substring-before(.,'PESCH')"/>PÊCH<xsl:value-of select="substring-after(.,'PESCH')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^(al)?leich(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                                <xsl:if test="matches(.,'^(al|Al)?[Ll]eich(\w+)$')"><xsl:value-of select="substring-before(.,'eich')"/>éch<xsl:value-of select="substring-after(.,'eich')"/></xsl:if>
                                <xsl:if test="matches(.,'^(AL)?LEICH(\w+)$')"><xsl:value-of select="substring-before(.,'LEICH')"/>LÉCH<xsl:value-of select="substring-after(.,'LEICH')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^fleich(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Ff]leich(\w+)$')"><xsl:value-of select="substring-before(.,'leich')"/>lèch<xsl:value-of select="substring-after(.,'leich')"/></xsl:if>
                                <xsl:if test="matches(.,'^FLEICH(\w+)$')">FLÈCH<xsl:value-of select="substring-after(.,'FLEICH')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^guaig(\w+)$', 'i')">
                        <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Gg]uaig(\w+)$')"><xsl:value-of select="substring-before(.,'uaig')"/>ag<xsl:value-of select="substring-after(.,'uaig')"/></xsl:if>
                                <xsl:if test="matches(.,'^GUAIG(\w+)$')">GAG<xsl:value-of select="substring-after(.,'GUAIG')"/></xsl:if></reg></choice>
                </xsl:when>
            <xsl:when test="matches(.,'^(\w*)chauf[^f](\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Cc]hauf[^f](\w*)$')"><xsl:value-of select="substring-before(.,'hauf')"/>hauff<xsl:value-of select="substring-after(.,'hauf')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)CHAUF[^F](\w*)$')"><xsl:value-of select="substring-before(.,'CHAUF')"/>CHAUFF<xsl:value-of select="substring-after(.,'CHAUF')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^noveau(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Nn]oveau(\w*)$')"><xsl:value-of select="substring-before(.,'oveau')"/>ouveau<xsl:value-of select="substring-after(.,'oveau')"/></xsl:if>
                    <xsl:if test="matches(.,'^NOVEAU(\w*)$')">NOUVEAU<xsl:value-of select="substring-after(.,'NOVEAU')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^baisler$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]aisler$')"><xsl:value-of select="substring-before(.,'aisler')"/>aîller</xsl:if>
                    <xsl:if test="matches(.,'^BAISLER$')">BAÎLLER</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^hou?stage(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^hou?stage(\w*)$')">otage<xsl:value-of select="substring-after(.,'stage')"/></xsl:if>
                    <xsl:if test="matches(.,'^Hou?stage(\w*)$')">Otage<xsl:value-of select="substring-after(.,'stage')"/></xsl:if>
                    <xsl:if test="matches(.,'^HOU?STAGE(\w*)$')">OTAGE<xsl:value-of select="substring-after(.,'STAGE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^quas$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^quas$')">cas</xsl:if>
                    <xsl:if test="matches(.,'^Quas$')">Cas</xsl:if>
                    <xsl:if test="matches(.,'^QUAS$')">CAS</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)enoille(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)enoille(\w*)$')"><xsl:value-of select="substring-before(.,'enoille')"/>enouille<xsl:value-of select="substring-after(.,'enoille')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w+)ENOILLE(\w*)$')"><xsl:value-of select="substring-before(.,'ENOILLE')"/>ENOUILLE<xsl:value-of select="substring-after(.,'ENOILLE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^sauconduit(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ss]auconduit(\w*)$')"><xsl:value-of select="substring-before(.,'auconduit')"/>auf-conduit<xsl:value-of select="substring-after(.,'auconduit')"/></xsl:if>
                    <xsl:if test="matches(.,'^SAUCONDUIT(\w*)$')">SAUF-CONDUIT<xsl:value-of select="substring-after(.,'SAUCONDUIT')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)ousch(\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)ousch(\w+)$')"><xsl:value-of select="substring-before(.,'ousch')"/>ouch<xsl:value-of select="substring-after(.,'ousch')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w+)OUSCH(\w+)$')"><xsl:value-of select="substring-before(.,'OUSCH')"/>OUCH<xsl:value-of select="substring-after(.,'OUSCH')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^gueret(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Gg]ueret(\w*)$')"><xsl:value-of select="substring-before(.,'ueret')"/>uéret<xsl:value-of select="substring-after(.,'ueret')"/></xsl:if>
                    <xsl:if test="matches(.,'^GUERET(\w*)$')">GUÉRET<xsl:value-of select="substring-after(.,'GUERET')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^aer$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Aa]er$')"><xsl:value-of select="substring-before(.,'er')"/>ir</xsl:if>
                    <xsl:if test="matches(.,'^AER$')">AIR</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^conclud$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Cc]onclud$')"><xsl:value-of select="substring-before(.,'onclud')"/>onclu</xsl:if>
                    <xsl:if test="matches(.,'^CONCLUD$')">CONCLU</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)crioi(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Cc]rioi(\w*)$')"><xsl:value-of select="substring-before(.,'rioi')"/>riai<xsl:value-of select="substring-after(.,'rioi')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)CRIOI(\w*)$')"><xsl:value-of select="substring-before(.,'CRIOI')"/>CRIAI<xsl:value-of select="substring-after(.,'CRIOI')"/></xsl:if></reg></choice>
            </xsl:when>
            
            <xsl:when test="matches(.,'^poyvr(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Pp]oyvr(\w*)$')"><xsl:value-of select="substring-before(.,'oyvr')"/>oivr<xsl:value-of select="substring-after(.,'oyvr')"/></xsl:if>
                    <xsl:if test="matches(.,'^POYVR(\w*)$')">POIVR<xsl:value-of select="substring-after(.,'POYVR')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^b?efro(\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]?[Ee]fro(\w+)$')"><xsl:value-of select="substring-before(.,'fro')"/>ffro<xsl:value-of select="substring-after(.,'fro')"/></xsl:if>
                    <xsl:if test="matches(.,'^B?EFRO(\w+)$')"><xsl:value-of select="substring-before(.,'EFRO')"/>EFFRO<xsl:value-of select="substring-after(.,'EFRO')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^triumph(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Tt]riumph(\w*)$')"><xsl:value-of select="substring-before(.,'riumph')"/>riomph<xsl:value-of select="substring-after(.,'riumph')"/></xsl:if>
                    <xsl:if test="matches(.,'^TRIUMPH(\w*)$')">TRIOMPH<xsl:value-of select="substring-after(.,'TRIUMPH')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)eroi(en)?t$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)eroi(en)?t$')"><xsl:value-of select="substring-before(.,'eroi')"/>erai<xsl:value-of select="substring-after(.,'eroi')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w+)EROI(EN)?T$')"><xsl:value-of select="substring-before(.,'EROI')"/>ERAI<xsl:value-of select="substring-after(.,'EROI')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)cocq(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Cc]ocq(\w*)$')"><xsl:value-of select="substring-before(.,'ocq')"/>oq<xsl:value-of select="substring-after(.,'ocq')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)COCQ(\w*)$')"><xsl:value-of select="substring-before(.,'COCQ')"/>COQ<xsl:value-of select="substring-after(.,'COCQ')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^toust$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Tt]oust$')"><xsl:value-of select="substring-before(.,'oust')"/>ôt</xsl:if>
                    <xsl:if test="matches(.,'^TOUST$')">TÔT</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^espo[^i](\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^espo[^i](\w*)$')">épo<xsl:value-of select="substring-after(.,'spo')"/></xsl:if>
                    <xsl:if test="matches(.,'^Espo[^i](\w*)$')">Épo<xsl:value-of select="substring-after(.,'spo')"/></xsl:if>
                    <xsl:if test="matches(.,'^ESPO[^I](\w*)$')">ÉPO<xsl:value-of select="substring-after(.,'ESPO')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^troigne(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Tt]roigne(\w*)$')"><xsl:value-of select="substring-before(.,'roigne')"/>rogne<xsl:value-of select="substring-after(.,'roigne')"/></xsl:if>
                    <xsl:if test="matches(.,'^TROIGNE(\w*)$')">TROGNE<xsl:value-of select="substring-after(.,'TROIGNE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^doz$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Dd]oz$')"><xsl:value-of select="substring-before(.,'oz')"/>os</xsl:if>
                    <xsl:if test="matches(.,'^DOZ$')">DOS</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^frot[ae](\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ff]rot[ae](\w*)$')"><xsl:value-of select="substring-before(.,'rot')"/>rott<xsl:value-of select="substring-after(.,'rot')"/></xsl:if>
                    <xsl:if test="matches(.,'^FROT[AE](\w*)$')">FROTT<xsl:value-of select="substring-after(.,'FROT')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^engrois(\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ee]ngrois(\w+)$')"><xsl:value-of select="substring-before(.,'ngrois')"/>ngros<xsl:value-of select="substring-after(.,'ngrois')"/></xsl:if>
                    <xsl:if test="matches(.,'^ENGROIS(\w+)$')">ENGROS<xsl:value-of select="substring-after(.,'ENGROIS')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^grois(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Gg]rois(\w*)$')"><xsl:value-of select="substring-before(.,'rois')"/>ros<xsl:value-of select="substring-after(.,'rois')"/></xsl:if>
                    <xsl:if test="matches(.,'^GROIS(\w*)$')">GROS<xsl:value-of select="substring-after(.,'GROIS')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^revoluë$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Rr]evoluë$')"><xsl:value-of select="substring-before(.,'evoluë')"/>évolue</xsl:if>
                    <xsl:if test="matches(.,'^REVOLUË$')">RÉVOLUE</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^revol(\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Rr]evol(\w+)$')"><xsl:value-of select="substring-before(.,'evol')"/>évol<xsl:value-of select="substring-after(.,'evol')"/></xsl:if>
                    <xsl:if test="matches(.,'^REVOL(\w+)$')">RÉVOL<xsl:value-of select="substring-after(.,'REVOL')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)nuyct(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Nn]uyct(\w*)$')"><xsl:value-of select="substring-before(.,'uyct')"/>uit<xsl:value-of select="substring-after(.,'uyct')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)NUYCT(\w*)$')"><xsl:value-of select="substring-before(.,'NUYCT')"/>NUIT<xsl:value-of select="substring-after(.,'NUYCT')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^allega(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Aa]llega(\w*)$')"><xsl:value-of select="substring-before(.,'llega')"/>llégua<xsl:value-of select="substring-after(.,'llega')"/></xsl:if>
                    <xsl:if test="matches(.,'^ALLEGA(\w*)$')">ALLÉGUA<xsl:value-of select="substring-after(.,'ALLEGA')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)leg[ai](\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Ll]eg[ai](\w+)$')"><xsl:value-of select="substring-before(.,'eg')"/>ég<xsl:value-of select="substring-after(.,'eg')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)LEG[AI](\w+)$')"><xsl:value-of select="substring-before(.,'LEG')"/>LÉG<xsl:value-of select="substring-after(.,'LEG')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^ause$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^ause$')"><xsl:value-of select="substring-before(.,'ause')"/>ose</xsl:if>
                    <xsl:if test="matches(.,'^Ause$')"><xsl:value-of select="substring-before(.,'Ause')"/>Ose</xsl:if>
                    <xsl:if test="matches(.,'^AUSE$')">OSE</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)ennans$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)ennans$')"><xsl:value-of select="substring-before(.,'ennans')"/>ennant</xsl:if>
                    <xsl:if test="matches(.,'^(\w+)ENNANS$')"><xsl:value-of select="substring-before(.,'ENNANS')"/>ENNANT</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^vefv(\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Vv]efv(\w+)$')"><xsl:value-of select="substring-before(.,'efv')"/>euv<xsl:value-of select="substring-after(.,'efv')"/></xsl:if>
                    <xsl:if test="matches(.,'^VEFV(\w+)$')">VEUV<xsl:value-of select="substring-after(.,'VEFV')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^cropp(\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Cc]ropp(\w+)$')"><xsl:value-of select="substring-before(.,'ropp')"/>roup<xsl:value-of select="substring-after(.,'ropp')"/></xsl:if>
                    <xsl:if test="matches(.,'^CROPP(\w+)$')">CROUP<xsl:value-of select="substring-after(.,'CROPP')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^acrop(\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Aa]crop(\w+)$')"><xsl:value-of select="substring-before(.,'crop')"/>ccroup<xsl:value-of select="substring-after(.,'crop')"/></xsl:if>
                    <xsl:if test="matches(.,'^ACROP(\w+)$')">ACCROUP<xsl:value-of select="substring-after(.,'ACROP')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^crop(\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Cc]rop(\w+)$')"><xsl:value-of select="substring-before(.,'rop')"/>roup<xsl:value-of select="substring-after(.,'rop')"/></xsl:if>
                    <xsl:if test="matches(.,'^CROP(\w+)$')">CROUP<xsl:value-of select="substring-after(.,'CROP')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^mariz$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Mm]ariz')"><xsl:value-of select="substring-before(.,'ariz')"/>aris</xsl:if>
                    <xsl:if test="matches(.,'^MARIZ$')">MARIS</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^desb(\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Dd]esb(\w+)$')"><xsl:value-of select="substring-before(.,'esb')"/>éb<xsl:value-of select="substring-after(.,'esb')"/></xsl:if>
                    <xsl:if test="matches(.,'^DESB(\w+)$')">DÉB<xsl:value-of select="substring-after(.,'DESB')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^heri(\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Hh]eri(\w+)$')"><xsl:value-of select="substring-before(.,'eri')"/>éri<xsl:value-of select="substring-after(.,'eri')"/></xsl:if>
                    <xsl:if test="matches(.,'^HERI(\w+)$')">HÉRI<xsl:value-of select="substring-after(.,'HERI')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^courbeau(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Cc]ourbeau(\w*)$')"><xsl:value-of select="substring-before(.,'ourbeau')"/>orbeau<xsl:value-of select="substring-after(.,'ourbeau')"/></xsl:if>
                    <xsl:if test="matches(.,'^COURBEAU(\w*)$')">CORBEAU<xsl:value-of select="substring-after(.,'COURBEAU')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)oultre(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Oo]ultre(\w*)$')"><xsl:value-of select="substring-before(.,'ultre')"/>utre<xsl:value-of select="substring-after(.,'ultre')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)OULTRE(\w*)$')"><xsl:value-of select="substring-before(.,'OULTRE')"/>OUTRE<xsl:value-of select="substring-after(.,'OULTRE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^pilots?$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Pp]ilots?(\w*)$')"><xsl:value-of select="substring-before(.,'ilot')"/>ilote<xsl:value-of select="substring-after(.,'ilot')"/></xsl:if>
                    <xsl:if test="matches(.,'^PILOTS?$')">PILOTE<xsl:value-of select="substring-after(.,'PILOT')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)deront$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)deront$')"><xsl:value-of select="substring-before(.,'deront')"/>dront</xsl:if>
                    <xsl:if test="matches(.,'^(\w+)DERONT$')"><xsl:value-of select="substring-before(.,'DERONT')"/>DRONT</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^raport(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Rr]aport(\w*)$')"><xsl:value-of select="substring-before(.,'aport')"/>apport<xsl:value-of select="substring-after(.,'aport')"/></xsl:if>
                    <xsl:if test="matches(.,'^RAPORT(\w*)$')">RAPPORT<xsl:value-of select="substring-after(.,'RAPORT')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^fauldr(\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ff]auldr(\w+)$')"><xsl:value-of select="substring-before(.,'auldr')"/>audr<xsl:value-of select="substring-after(.,'auldr')"/></xsl:if>
                    <xsl:if test="matches(.,'^FAULDR(\w+)$')">FAUDR<xsl:value-of select="substring-after(.,'FAULDR')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^tortre$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Tt]ortre$')"><xsl:value-of select="substring-before(.,'ortre')"/>ordre</xsl:if>
                    <xsl:if test="matches(.,'^TORTRE$')">TORDRE</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^clouse(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Cc]louse(\w*)$')"><xsl:value-of select="substring-before(.,'louse')"/>lose<xsl:value-of select="substring-after(.,'louse')"/></xsl:if>
                    <xsl:if test="matches(.,'^CLOUSE(\w*)$')">CLOSE<xsl:value-of select="substring-after(.,'CLOUSE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^escapp(\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^escapp(\w+)$')">échapp<xsl:value-of select="substring-after(.,'escapp')"/></xsl:if>
                    <xsl:if test="matches(.,'^Escapp(\w+)$')">Échapp<xsl:value-of select="substring-after(.,'Escapp')"/></xsl:if>
                    <xsl:if test="matches(.,'^ESCAPP(\w+)$')">ÉCHAPP<xsl:value-of select="substring-after(.,'ESCAPP')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^apresdinées?$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Aa]presdinées?$')"><xsl:value-of select="substring-before(.,'presdinée')"/>pres-dinée<xsl:value-of select="substring-after(.,'presdinée')"/></xsl:if>
                    <xsl:if test="matches(.,'^APRESDINÉES?$')">APRES-DINÉE<xsl:value-of select="substring-after(.,'APRESDINÉE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^febvrier$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ff]ebvrier$')"><xsl:value-of select="substring-before(.,'ebvrier')"/>évrier</xsl:if>
                    <xsl:if test="matches(.,'^FEBVRIER$')">FÉVRIER</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^engress(\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ee]ngress(\w+)$')"><xsl:value-of select="substring-before(.,'ngress')"/>ngraiss<xsl:value-of select="substring-after(.,'ngress')"/></xsl:if>
                    <xsl:if test="matches(.,'^ENGRESS(\w+)$')">ENGRAISS<xsl:value-of select="substring-after(.,'ENGRESS')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)rdy$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)rdy$')"><xsl:value-of select="substring-before(.,'rdy')"/>rdi</xsl:if>
                    <xsl:if test="matches(.,'^(\w+)RDY$')"><xsl:value-of select="substring-before(.,'RDY')"/>RDI</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^commemo(\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Cc]ommemo(\w+)$')"><xsl:value-of select="substring-before(.,'ommemo')"/>ommémo<xsl:value-of select="substring-after(.,'ommemo')"/></xsl:if>
                    <xsl:if test="matches(.,'^COMMEMO(\w+)$')">COMMÉMO<xsl:value-of select="substring-after(.,'COMMEMO')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)acion$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)acion$')"><xsl:value-of select="substring-before(.,'acion')"/>ation</xsl:if>
                    <xsl:if test="matches(.,'^(\w+)ACION$')"><xsl:value-of select="substring-before(.,'ACION')"/>ATION</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(in)?dec(\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(in|In)?[Dd]ec(\w+)$')"><xsl:value-of select="substring-before(.,'ec')"/>éc<xsl:value-of select="substring-after(.,'ec')"/></xsl:if>
                    <xsl:if test="matches(.,'^(IN)?DEC(\w+)$')"><xsl:value-of select="substring-before(.,'DEC')"/>DÉC<xsl:value-of select="substring-after(.,'DEC')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^gue$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Gg]ue$')"><xsl:value-of select="substring-before(.,'ue')"/>ué</xsl:if>
                    <xsl:if test="matches(.,'^GUE$')">GUÉ</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^beveus?$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]eveus?$')"><xsl:value-of select="substring-before(.,'eveu')"/>uveu<xsl:value-of select="substring-after(.,'eveu')"/></xsl:if>
                    <xsl:if test="matches(.,'^BEVEUS?$')">BUVEU<xsl:value-of select="substring-after(.,'BEVEU')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)neues?$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Nn]eues?$')"><xsl:value-of select="substring-before(.,'eue')"/>ue<xsl:value-of select="substring-after(.,'eue')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)NEUES?$')"><xsl:value-of select="substring-before(.,'NEUE')"/>NUE<xsl:value-of select="substring-after(.,'NEUE')"/></xsl:if></reg></choice>
            </xsl:when>
            <!--Addition co(n)gneu(e)(s) => connu(e)(s)-->
             <xsl:when test="matches(.,'^(re)?con?g?neue?s?$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(re)?con?g?neue?s?$')"><xsl:value-of select="substring-before(.,'eu')"/>u<xsl:value-of select="substring-after(.,'eu')"/></xsl:if>
                    <xsl:if test="matches(.,'^(RE)?CON?G?NEUE?S?$')"><xsl:value-of select="substring-before(.,'EU')"/>U<xsl:value-of select="substring-after(.,'UE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)commend(\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Cc]ommend(\w+)$')"><xsl:value-of select="substring-before(.,'ommend')"/>ommand<xsl:value-of select="substring-after(.,'ommend')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)COMMEND(\w+)$')"><xsl:value-of select="substring-before(.,'COMMEND')"/>COMMAND<xsl:value-of select="substring-after(.,'COMMEND')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)ndoi(en)?t$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)ndoi(en)?t$')"><xsl:value-of select="substring-before(.,'ndoi')"/>ndai<xsl:value-of select="substring-after(.,'ndoi')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w+)NDOI(EN)?T$')"><xsl:value-of select="substring-before(.,'NDOI')"/>NDAI<xsl:value-of select="substring-after(.,'NDOI')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^masts?$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Mm]asts?$')"><xsl:value-of select="substring-before(.,'ast')"/>ât<xsl:value-of select="substring-after(.,'ast')"/></xsl:if>
                    <xsl:if test="matches(.,'^MASTS?$')">MÂT<xsl:value-of select="substring-after(.,'MAST')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^masch(\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Mm]asch(\w+)$')"><xsl:value-of select="substring-before(.,'asch')"/>âch<xsl:value-of select="substring-after(.,'asch')"/></xsl:if>
                    <xsl:if test="matches(.,'^MASCH(\w+)$')"><xsl:value-of select="substring-before(.,'MASCH')"/>MÂCH<xsl:value-of select="substring-after(.,'MASCH')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^mangeue$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Mm]angeue$')"><xsl:value-of select="substring-before(.,'angeue')"/>ange</xsl:if>
                    <xsl:if test="matches(.,'^MANGEUE$')">MANGE</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^seze$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ss]eze$')"><xsl:value-of select="substring-before(.,'eze')"/>eize</xsl:if>
                    <xsl:if test="matches(.,'^SEZE$')">SEIZE</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)uss?ars?$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)uss?ars?$')"><xsl:value-of select="substring-before(.,'ar')"/>ard<xsl:value-of select="substring-after(.,'ar')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w+)USS?ARS?$')"><xsl:value-of select="substring-before(.,'AR')"/>ARD<xsl:value-of select="substring-after(.,'AR')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)doivoi(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Dd]oivoi(\w*)$')"><xsl:value-of select="substring-before(.,'oivoi')"/>evai<xsl:value-of select="substring-after(.,'oivoi')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)DOIVOI(\w*)$')"><xsl:value-of select="substring-before(.,'DOIVOI')"/>DEVAI<xsl:value-of select="substring-after(.,'DOIVOI')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^doulce(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Dd]oulce(\w*)$')"><xsl:value-of select="substring-before(.,'oulce')"/>ouce<xsl:value-of select="substring-after(.,'oulce')"/></xsl:if>
                    <xsl:if test="matches(.,'^DOULCE(\w*)$')">DOUCE<xsl:value-of select="substring-after(.,'DOULCE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)enyvr(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Ee]nyvr(\w*)$')"><xsl:value-of select="substring-before(.,'nyvr')"/>nivr<xsl:value-of select="substring-after(.,'nyvr')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)ENYVR(\w*)$')"><xsl:value-of select="substring-before(.,'ENYVR')"/>ENIVR<xsl:value-of select="substring-after(.,'ENYVR')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^trote(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Tt]rote(\w*)$')"><xsl:value-of select="substring-before(.,'rote')"/>rotte<xsl:value-of select="substring-after(.,'rote')"/></xsl:if>
                    <xsl:if test="matches(.,'^TROTE(\w*)$')">TROTTE<xsl:value-of select="substring-after(.,'TROTE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^gualente(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Gg]ualente(\w*)$')"><xsl:value-of select="substring-before(.,'ualente')"/>alante<xsl:value-of select="substring-after(.,'ualente')"/></xsl:if>
                    <xsl:if test="matches(.,'^GUALENTE(\w*)$')">GALANTE<xsl:value-of select="substring-after(.,'GUALENTE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^fiebvre(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ff]iebvre(\w*)$')"><xsl:value-of select="substring-before(.,'iebvre')"/>ièvre<xsl:value-of select="substring-after(.,'iebvre')"/></xsl:if>
                    <xsl:if test="matches(.,'^FIEBVRE(\w*)$')">FIÈVRE<xsl:value-of select="substring-after(.,'FIEBVRE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^fy$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ff]y$')"><xsl:value-of select="substring-before(.,'y')"/>i</xsl:if>
                    <xsl:if test="matches(.,'^FY$')">FI</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)mulle(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Mm]ulle(\w*)$')"><xsl:value-of select="substring-before(.,'ulle')"/>ule<xsl:value-of select="substring-after(.,'ulle')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)MULLE(\w*)$')"><xsl:value-of select="substring-before(.,'MULLE')"/>MULE<xsl:value-of select="substring-after(.,'MULLE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)brevi(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Bb]revi(\w*)$')"><xsl:value-of select="substring-before(.,'revi')"/>révi<xsl:value-of select="substring-after(.,'revi')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)BREVI(\w*)$')"><xsl:value-of select="substring-before(.,'BREVI')"/>BRÉVI<xsl:value-of select="substring-after(.,'BREVI')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^breves?$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]reves?$')"><xsl:value-of select="substring-before(.,'reve')"/>rève<xsl:value-of select="substring-after(.,'reve')"/></xsl:if>
                    <xsl:if test="matches(.,'^BREVES?$')">BRÈVE<xsl:value-of select="substring-after(.,'BREVE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^pech(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Pp]ech(\w*)$')"><xsl:value-of select="substring-before(.,'ech')"/>éch<xsl:value-of select="substring-after(.,'ech')"/></xsl:if>
                    <xsl:if test="matches(.,'^PECH(\w*)$')">PÉCH<xsl:value-of select="substring-after(.,'PECH')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^innocens$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ii]nnocens$')"><xsl:value-of select="substring-before(.,'nnocens')"/>nnocents</xsl:if>
                    <xsl:if test="matches(.,'^INNOCENS$')">INNOCENTS</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(as|des)?seich[ée](\w+)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(as|des|As|Des)?[Ss]eich[ée](\w+)$')"><xsl:value-of select="substring-before(.,'eich')"/>éch<xsl:value-of select="substring-after(.,'eich')"/></xsl:if>
                    <xsl:if test="matches(.,'^(AS|DES)?SEICH[ÉE](\w+)$')"><xsl:value-of select="substring-before(.,'EICH')"/>ÉCH<xsl:value-of select="substring-after(.,'EICH')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(as|des)?seiche$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^(as|des|As|Des)?[Ss]eiche$')"><xsl:value-of select="substring-before(.,'eiche')"/>èche<xsl:value-of select="substring-after(.,'eiche')"/></xsl:if>
                    <xsl:if test="matches(.,'^(AS|DES)?SEICHE$')"><xsl:value-of select="substring-before(.,'SEICHE')"/>SÈCHE<xsl:value-of select="substring-after(.,'SEICHE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^r?aproch(\w*)$', 'i')">
                <choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><reg><xsl:value-of select="ancestor::tei:choice/tei:reg"/></reg><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Rr]?[Aa]proch(\w*)$')"><xsl:value-of select="substring-before(.,'proch')"/>pproch<xsl:value-of select="substring-after(.,'proch')"/></xsl:if>
                    <xsl:if test="matches(.,'^R?APROCH(\w*)$')"><xsl:value-of select="substring-before(.,'APROCH')"/>APPROCH<xsl:value-of select="substring-after(.,'APROCH')"/></xsl:if></reg></choice>
            </xsl:when> 
            <!--pour les mots n'étant concernés par aucune régle, on copie la même chose-->
     <xsl:otherwise><choice><xsl:copy-of select="ancestor::tei:choice/tei:orig"/><xsl:copy-of select="ancestor::tei:choice/tei:reg"/></choice></xsl:otherwise>
        </xsl:choose>
        </xsl:for-each>
    </xsl:template> 
    
    
    <!--Suppression des w restés dans les reg pour lesquels aucune règles n'a été appliquée-->
  <!--  <xsl:template name="deletew" match="tei:w[parent::tei:reg[parent::tei:choice]]" mode="pass3"><xsl:value-of select="."/></xsl:template> -->
    
    
    <!--    3° 2ème passage pour ceux n'étant pas dans des reg application de règle pour chaque w (ici dès qu'un règle est appliquée, 
        les autres ne le sont pas et plus de <w> mais du choice-->
    
<!--Sans <reg>-->
   <xsl:template match="tei:*[not(self::tei:reg)]/tei:w" mode="pass3">
        <xsl:choose>           
                <xsl:when test="matches(.,'^treshaultz$', 'i')">
                        <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Tt]reshaultz$')"><xsl:value-of select="substring-before(.,'reshaultz')"/>rès hauts</xsl:if>
                                <xsl:if test="matches(.,'^TRESHAULTZ$')">TRÈS HAUTS</xsl:if></reg></choice>
                </xsl:when>
            <!--Termes fréquents (parmi les 5000 mots mots les plus fréquents du corpus Epistemon au 23/01/14)-->
<xsl:when test="matches(.,'^plustost$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]lustost$')"><xsl:value-of select="substring-before(.,'lustost')"/>lutôt</xsl:if>
       <xsl:if test="matches(.,'^PLUSTOST$')">PLUTÔT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)esfoys$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)esfoys$')"><xsl:value-of select="substring-before(.,'esfoys')"/>efois<xsl:value-of select="substring-after(.,'esfoys')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ESFOYS$')"><xsl:value-of select="substring-before(.,'ESFOYS')"/>EFOIS<xsl:value-of select="substring-after(.,'ESFOYS')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ainsin$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]insin$')"><xsl:value-of select="substring-before(.,'insin')"/>insi</xsl:if>
       <xsl:if test="matches(.,'^AINSIN$')">AINSI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^croy$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]roy$')"><xsl:value-of select="substring-before(.,'roy')"/>rois</xsl:if>
       <xsl:if test="matches(.,'^CROY$')">CROIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^royne(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]oyne(\w*)$')"><xsl:value-of select="substring-before(.,'oyne')"/>eine<xsl:value-of select="substring-after(.,'oyne')"/></xsl:if>
       <xsl:if test="matches(.,'^ROYNE(\w*)$')">REINE<xsl:value-of select="substring-after(.,'ROYNE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^quilz$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Qq]uilz$')"><xsl:value-of select="substring-before(.,'uilz')"/>u'ils</xsl:if>
       <xsl:if test="matches(.,'^QUILZ$')">QU'ILS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^myeulx$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]yeulx$')"><xsl:value-of select="substring-before(.,'yeulx')"/>ieux</xsl:if>
       <xsl:if test="matches(.,'^MYEULX$')">MIEUX</xsl:if></reg></choice>
            </xsl:when>
<!--Addition ici pareil-->
<xsl:when test="matches(.,'^ceulx$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]eulx$')"><xsl:value-of select="substring-before(.,'eulx')"/>eux</xsl:if>
       <xsl:if test="matches(.,'^CEULX$')">CEUX</xsl:if></reg></choice>
            </xsl:when>            
<xsl:when test="matches(.,'^demonstr(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]emonstr(\w*)$')"><xsl:value-of select="substring-before(.,'emonstr')"/>émonstr<xsl:value-of select="substring-after(.,'emonstr')"/></xsl:if>
       <xsl:if test="matches(.,'^DEMONSTR(\w*)$')">DÉMONSTR<xsl:value-of select="substring-after(.,'DEMONSTR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^soymesme(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]oymesme(\w*)$')"><xsl:value-of select="substring-before(.,'oymesme')"/>oi-même<xsl:value-of select="substring-after(.,'oymesme')"/></xsl:if>
       <xsl:if test="matches(.,'^SOYMESME(\w*)$')">SOI-MÊME<xsl:value-of select="substring-after(.,'SOYMESME')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pourtraict(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ourtraict(\w*)$')"><xsl:value-of select="substring-before(.,'ourtraict')"/>ortrait<xsl:value-of select="substring-after(.,'ourtraict')"/></xsl:if>
       <xsl:if test="matches(.,'^POURTRAICT(\w*)$')">PORTRAIT<xsl:value-of select="substring-after(.,'POURTRAICT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pensemen(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ensemen(\w*)$')"><xsl:value-of select="substring-before(.,'ensemen')"/>ensée<xsl:value-of select="substring-after(.,'ensemen')"/></xsl:if>
       <xsl:if test="matches(.,'^PENSEMEN(\w*)$')">PENSÉE<xsl:value-of select="substring-after(.,'PENSEMEN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^chault$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]hault$')"><xsl:value-of select="substring-before(.,'hault')"/>haut</xsl:if>
       <xsl:if test="matches(.,'^MYEULX$')">MIEUX</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)paroistr(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Pp]aroistr(\w+)$')"><xsl:value-of select="substring-before(.,'aroistr')"/>araîtr<xsl:value-of select="substring-after(.,'aroistr')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)PAROISTR(\w*)$')"><xsl:value-of select="substring-before(.,'PAROISTR')"/>PARAÎTR<xsl:value-of select="substring-after(.,'PAROISTR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^peust$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]eust$')"><xsl:value-of select="substring-before(.,'eust')"/>ut</xsl:if>
       <xsl:if test="matches(.,'^PEUST$')">PUT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^[vp]eult$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[vpVP]eult$')"><xsl:value-of select="substring-before(.,'eult')"/>eut</xsl:if>
       <xsl:if test="matches(.,'^[VP]EULT$')">EUT</xsl:if></reg></choice>
            </xsl:when>
<!--Addition pour peulvent => peuvent-->
 <xsl:when test="matches(.,'^veulvent$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[pP]eulvent$')"><xsl:value-of select="substring-before(.,'eulvent')"/>euvent</xsl:if>
       <xsl:if test="matches(.,'^PEULVENT$')">PEUVENT</xsl:if></reg></choice>
            </xsl:when>           
<xsl:when test="matches(.,'^maniere(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]aniere(\w*)$')"><xsl:value-of select="substring-before(.,'aniere')"/>anière<xsl:value-of select="substring-after(.,'aniere')"/></xsl:if>
       <xsl:if test="matches(.,'^MANIERE(\w*)$')">MANIÈRE<xsl:value-of select="substring-after(.,'MANIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estat(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^estat(\w*)$')">état<xsl:value-of select="substring-after(.,'estat')"/></xsl:if>
       <xsl:if test="matches(.,'^Estat(\w*)$')">État<xsl:value-of select="substring-after(.,'Estat')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTAT(\w*)$')">ÉTAT<xsl:value-of select="substring-after(.,'ESTAT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^toutesfois$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]outesfois$')"><xsl:value-of select="substring-before(.,'outesfois')"/>outefois</xsl:if>
       <xsl:if test="matches(.,'^TOUTESFOIS$')">TOUTEFOIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fortunez$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ortunez$')"><xsl:value-of select="substring-before(.,'ortunez')"/>ortunés</xsl:if>
       <xsl:if test="matches(.,'^FORTUNEZ$')">FORTUNÉS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^encor$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]ncor$')"><xsl:value-of select="substring-before(.,'ncor')"/>ncore</xsl:if>
       <xsl:if test="matches(.,'^ENCOR$')">ENCORE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^premiere(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]remiere(\w*)$')"><xsl:value-of select="substring-before(.,'remiere')"/>remière<xsl:value-of select="substring-after(.,'remiere')"/></xsl:if>
       <xsl:if test="matches(.,'^PREMIERE(\w*)$')">PREMIÈRE<xsl:value-of select="substring-after(.,'PREMIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^verité(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]erité(\w*)$')"><xsl:value-of select="substring-before(.,'erité')"/>érité<xsl:value-of select="substring-after(.,'erité')"/></xsl:if>
       <xsl:if test="matches(.,'^VERITÉ(\w*)$')">VÉRITÉ<xsl:value-of select="substring-after(.,'VERITÉ')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^desiroi(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esiroi(\w*)$')"><xsl:value-of select="substring-before(.,'esiroi')"/>ésirai<xsl:value-of select="substring-after(.,'esiroi')"/></xsl:if>
       <xsl:if test="matches(.,'^DESIROI(\w*)$')">DÉSIRAI<xsl:value-of select="substring-after(.,'DESIROI')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^desir(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esir(\w*)$')"><xsl:value-of select="substring-before(.,'esir')"/>ésir<xsl:value-of select="substring-after(.,'esir')"/></xsl:if>
       <xsl:if test="matches(.,'^DESIR(\w*)$')">DÉSIR<xsl:value-of select="substring-after(.,'DESIR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ja$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^ja$')"><xsl:value-of select="substring-before(.,'ja')"/>déjà</xsl:if>
       <xsl:if test="matches(.,'^Ja$')"><xsl:value-of select="substring-before(.,'Ja')"/>Déjà</xsl:if>
       <xsl:if test="matches(.,'^JA$')">DÉJÀ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(p|m|fr)eres?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(P|p|M|m|fr|Fr)eres?$')"><xsl:value-of select="substring-before(.,'ere')"/>ère<xsl:value-of select="substring-after(.,'^ere')"/></xsl:if>
       <xsl:if test="matches(.,'^(P|M|FR)ERES?$')"><xsl:value-of select="substring-before(.,'ERE')"/>PÈRE<xsl:value-of select="substring-after(.,'ERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estoi[st]$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^estoi[st]$')">étai<xsl:value-of select="substring-after(.,'estoi')"/></xsl:if>
       <xsl:if test="matches(.,'^Estoi[st]$')">Étai<xsl:value-of select="substring-after(.,'Estoi')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTOI[ST]$')">ÉTAI<xsl:value-of select="substring-after(.,'ESTOI')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estre$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^estre$')">être</xsl:if>
         <xsl:if test="matches(.,'^Estre$')">Être</xsl:if>
         <xsl:if test="matches(.,'^ESTRE$')">ÊTRE</xsl:if></reg></choice>
            </xsl:when>
                <xsl:when test="matches(.,'^cest$', 'i')">
                        <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Cc]est$')"><xsl:value-of select="substring-before(.,'est')"/>et</xsl:if>
                                <xsl:if test="matches(.,'^CEST$')">CET</xsl:if></reg></choice>
                </xsl:when>
<xsl:when test="matches(.,'^ceste$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^[Cc]este$')"><xsl:value-of select="substring-before(.,'este')"/>ette</xsl:if>
         <xsl:if test="matches(.,'^CESTE$')">CETTE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^avoit$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^[Aa]voit$')"><xsl:value-of select="substring-before(.,'voit')"/>vait</xsl:if>
         <xsl:if test="matches(.,'^AVOIT$')">AVAIT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^apres$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^[Aa]pres$')"><xsl:value-of select="substring-before(.,'pres')"/>près</xsl:if>
         <xsl:if test="matches(.,'^APRES$')">APRÈS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^esté$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^esté$')"><xsl:value-of select="substring-before(.,'esté')"/>été</xsl:if>
         <xsl:if test="matches(.,'^Esté$')"><xsl:value-of select="substring-before(.,'Esté')"/>Été</xsl:if>
         <xsl:if test="matches(.,'^ESTÉ$')">ÉTÉ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^este$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^este$')"><xsl:value-of select="substring-before(.,'este')"/>été</xsl:if>
       <xsl:if test="matches(.,'^Este$')"><xsl:value-of select="substring-before(.,'Este')"/>Été</xsl:if>
       <xsl:if test="matches(.,'^ESTE$')">ÉTÉ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estoient$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^estoient$')"><xsl:value-of select="substring-before(.,'estoient')"/>étaient</xsl:if>
         <xsl:if test="matches(.,'^Estoient$')"><xsl:value-of select="substring-before(.,'Estoient')"/>Étaient</xsl:if>
         <xsl:if test="matches(.,'^ESTOIENT$')">ÉTAIENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pource$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^[pP]ource$')"><xsl:value-of select="substring-before(.,'ource')"/>arce</xsl:if>
         <xsl:if test="matches(.,'^POURCE$')">PARCE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ames?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^ames?$')">âme<xsl:value-of select="substring-after(.,'^ame')"/></xsl:if>
         <xsl:if test="matches(.,'^Ames?$')">Âme<xsl:value-of select="substring-after(.,'Ame')"/></xsl:if>
         <xsl:if test="matches(.,'^AMES?$')">ÂME<xsl:value-of select="substring-after(.,'AME')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^grace$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^[Gg]race$')"><xsl:value-of select="substring-before(.,'race')"/>râce</xsl:if>
         <xsl:if test="matches(.,'^GRACE$')">GRÂCE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^faisoit$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^[Ff]aisoit$')"><xsl:value-of select="substring-before(.,'aisoit')"/>aisait</xsl:if>
         <xsl:if test="matches(.,'^FAISOIT$')">FAISAIT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^avois$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^[Aa]vois$')"><xsl:value-of select="substring-before(.,'vois')"/>vais</xsl:if>
         <xsl:if test="matches(.,'^AVOIS$')">AVAIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^doib[tv](\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]oib[tv](\w*)$')"><xsl:value-of select="substring-before(.,'oib')"/>oi<xsl:value-of select="substring-after(.,'oib')"/></xsl:if>
       <xsl:if test="matches(.,'^DOIB[TV](\w*)$')">DOI<xsl:value-of select="substring-after(.,'DOIB')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^veult$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^[Vv]eult$')"><xsl:value-of select="substring-before(.,'eult')"/>eut</xsl:if>
         <xsl:if test="matches(.,'^VEULT$')">VEUT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^presens$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]resens$')"><xsl:value-of select="substring-before(.,'resens')"/>résents<xsl:value-of select="substring-after(.,'resens')"/></xsl:if>
       <xsl:if test="matches(.,'^PRESENS(\w*)$')">PRÉSENTS<xsl:value-of select="substring-after(.,'PRESENS')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^presen(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]resen(\w*)$')"><xsl:value-of select="substring-before(.,'resen')"/>résen<xsl:value-of select="substring-after(.,'resen')"/></xsl:if>
       <xsl:if test="matches(.,'^PRESEN(\w*)$')">PRÉSEN<xsl:value-of select="substring-after(.,'PRESEN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^plaist$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^[Pp]laist$')"><xsl:value-of select="substring-before(.,'laist')"/>lait</xsl:if>
         <xsl:if test="matches(.,'^PLAIST$')">PLAIT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ayans$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^[Aa]yans$')"><xsl:value-of select="substring-before(.,'yans')"/>yant</xsl:if>
         <xsl:if test="matches(.,'^AYANS$')">AYANT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fol$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^[Ff]ol$')"><xsl:value-of select="substring-before(.,'ol')"/>ou</xsl:if>
         <xsl:if test="matches(.,'^FOL$')">FOU</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^memoire(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]emoire(\w*)$')"><xsl:value-of select="substring-before(.,'emoire')"/>émoire<xsl:value-of select="substring-after(.,'emoire')"/></xsl:if>
       <xsl:if test="matches(.,'^MEMOIRE(\w*)$')">MÉMOIRE<xsl:value-of select="substring-after(.,'MEMOIRE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aus$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^[Aa]us$')"><xsl:value-of select="substring-before(.,'us')"/>ux</xsl:if>
         <xsl:if test="matches(.,'^AUS$')">AUX</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^costé(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]osté(\w*)$')"><xsl:value-of select="substring-before(.,'osté')"/>ôté<xsl:value-of select="substring-after(.,'osté')"/></xsl:if>
       <xsl:if test="matches(.,'^COSTÉ(\w*)$')">CÔTÉ<xsl:value-of select="substring-after(.,'COSTÉ')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pourroit$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^[Pp]ourroit$')"><xsl:value-of select="substring-before(.,'ourroit')"/>ourrait</xsl:if>
       <xsl:if test="matches(.,'^POURROIT$')">POURRAIT</xsl:if></reg></choice>
            </xsl:when>
<!--Encore pourroient => pourraient-->
<xsl:when test="matches(.,'^pourroient$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^[Pp]ourroient$')"><xsl:value-of select="substring-before(.,'ourroient')"/>ourraient</xsl:if>
       <xsl:if test="matches(.,'^POURROIENT$')">POURRAIENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^advis$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]dvis$')"><xsl:value-of select="substring-before(.,'dvis')"/>vis</xsl:if>
       <xsl:if test="matches(.,'^ADVIS$')">AVIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^neantmoins$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Nn]eantmoins$')"><xsl:value-of select="substring-before(.,'eantmoins')"/>éanmoins</xsl:if>
       <xsl:if test="matches(.,'^NEANTMOINS$')">NÉANMOINS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aupres$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]upres$')"><xsl:value-of select="substring-before(.,'upres')"/>uprès</xsl:if>
       <xsl:if test="matches(.,'^AUPRES$')">AUPRÈS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^gueres?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]ueres?$')"><xsl:value-of select="substring-before(.,'uere')"/>uère</xsl:if>
       <xsl:if test="matches(.,'^GUERES?$')">GUÈRE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^merite(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]erite(\w*)$')"><xsl:value-of select="substring-before(.,'erite')"/>érite<xsl:value-of select="substring-after(.,'erite')"/></xsl:if>
       <xsl:if test="matches(.,'^MERITE(\w*)$')">MÉRITE<xsl:value-of select="substring-after(.,'MERITE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aye$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ye$')"><xsl:value-of select="substring-before(.,'ye')"/>ie</xsl:if>
       <xsl:if test="matches(.,'^AYE$')">AIE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^seullement$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]eullement$')"><xsl:value-of select="substring-before(.,'eullement')"/>eulement</xsl:if>
       <xsl:if test="matches(.,'^SEULLEMENT$')">SEULEMENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mary(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ary(\w*)$')"><xsl:value-of select="substring-before(.,'ary')"/>ari<xsl:value-of select="substring-after(.,'ary')"/></xsl:if>
       <xsl:if test="matches(.,'^MARY(\w*)$')">MARI<xsl:value-of select="substring-after(.,'MARY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^premierement$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]remierement$')"><xsl:value-of select="substring-before(.,'remierement')"/>remièrement</xsl:if>
       <xsl:if test="matches(.,'^PREMIEREMENT$')">PREMIÈREMENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^matiere(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]atiere(\w*)$')"><xsl:value-of select="substring-before(.,'atiere')"/>atière<xsl:value-of select="substring-after(.,'atiere')"/></xsl:if>
       <xsl:if test="matches(.,'^MATIERE(\w*)$')">MATIÈRE<xsl:value-of select="substring-after(.,'MATIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^voila$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]oila$')"><xsl:value-of select="substring-before(.,'oila')"/>oilà</xsl:if>
       <xsl:if test="matches(.,'^VOILA$')">VOILÀ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^facon(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]acon(\w*)$')"><xsl:value-of select="substring-before(.,'acon')"/>açon<xsl:value-of select="substring-after(.,'acon')"/></xsl:if>
       <xsl:if test="matches(.,'^FACON(\w*)$')">FAÇON<xsl:value-of select="substring-after(.,'FACON')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^agreable(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]greable(\w*)$')"><xsl:value-of select="substring-before(.,'greable')"/>gréable<xsl:value-of select="substring-after(.,'greable')"/></xsl:if>
       <xsl:if test="matches(.,'^AGREABLE(\w*)$')">AGRÉABLE<xsl:value-of select="substring-after(.,'AGREABLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^avoyent$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]voyent$')"><xsl:value-of select="substring-before(.,'voyent')"/>vaient</xsl:if>
       <xsl:if test="matches(.,'^AVOYENT$')">AVAIENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^bestes(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]estes(\w*)$')"><xsl:value-of select="substring-before(.,'estes')"/>êtes<xsl:value-of select="substring-after(.,'estes')"/></xsl:if>
       <xsl:if test="matches(.,'^BESTES(\w*)$')">BÊTES<xsl:value-of select="substring-after(.,'BESTES')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^cete$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ete$')"><xsl:value-of select="substring-before(.,'ete')"/>ette</xsl:if>
       <xsl:if test="matches(.,'^CETE$')">CETTE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^derriere$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]erriere$')"><xsl:value-of select="substring-before(.,'erriere')"/>errière</xsl:if>
       <xsl:if test="matches(.,'^DERRIERE$')">DERRIÈRE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^presence(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]resence(\w*)$')"><xsl:value-of select="substring-before(.,'resence')"/>résence<xsl:value-of select="substring-after(.,'resence')"/></xsl:if>
       <xsl:if test="matches(.,'^PRESENCE(\w*)$')">PRÉSENCE<xsl:value-of select="substring-after(.,'PRESENCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^esperance(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]sperance(\w*)$')"><xsl:value-of select="substring-before(.,'sperance')"/>spérance<xsl:value-of select="substring-after(.,'sperance')"/></xsl:if>
       <xsl:if test="matches(.,'^ESPERANCE(\w*)$')">ESPÉRANCE<xsl:value-of select="substring-after(.,'ESPERANCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^auroit', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]uroit$')"><xsl:value-of select="substring-before(.,'uroit')"/>urait</xsl:if>
       <xsl:if test="matches(.,'^AUROIT$')">AURAIT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^grenoille(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]renoille(\w*)$')"><xsl:value-of select="substring-before(.,'renoille')"/>renouille<xsl:value-of select="substring-after(.,'grenoille')"/></xsl:if>
       <xsl:if test="matches(.,'^GRENOILLE(\w*)$')">GRENOUILLE<xsl:value-of select="substring-after(.,'GRENOILLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^receu(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]eceu(\w*)$')"><xsl:value-of select="substring-before(.,'eceu')"/>eçu<xsl:value-of select="substring-after(.,'eceu')"/></xsl:if>
       <xsl:if test="matches(.,'^RECEU(\w*)$')">REÇU<xsl:value-of select="substring-after(.,'RECEU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fors', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^fors$')">hormis</xsl:if>
       <xsl:if test="matches(.,'^Fors$')">Hormis</xsl:if>
       <xsl:if test="matches(.,'^FORS$')">HORMIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pensee(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ensee(\w*)$')"><xsl:value-of select="substring-before(.,'ensee')"/>ensée<xsl:value-of select="substring-after(.,'ensee')"/></xsl:if>
       <xsl:if test="matches(.,'^PENSEE(\w*)$')">PENSÉE<xsl:value-of select="substring-after(.,'PENSEE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^donques$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]onques$')"><xsl:value-of select="substring-before(.,'onques')"/>onc</xsl:if>
       <xsl:if test="matches(.,'^DONQUES$')">DONC</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^veue$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eue$')"><xsl:value-of select="substring-before(.,'eue')"/>ue</xsl:if>
       <xsl:if test="matches(.,'^VEUE$')">VUE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^helas$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]elas$')"><xsl:value-of select="substring-before(.,'elas')"/>élas</xsl:if>
       <xsl:if test="matches(.,'^HELAS$')">HÉLAS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fee(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ee(\w*)$')"><xsl:value-of select="substring-before(.,'ee')"/>ée<xsl:value-of select="substring-after(.,'ee')"/></xsl:if>
       <xsl:if test="matches(.,'^FEE(\w*)$')">FÉE<xsl:value-of select="substring-after(.,'FEE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^guerir$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]uerir$')"><xsl:value-of select="substring-before(.,'uerir')"/>uérir</xsl:if>
       <xsl:if test="matches(.,'^GUERIR$')">GUÉRIR</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^honneste(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]onneste(\w*)$')"><xsl:value-of select="substring-before(.,'onneste')"/>onnête<xsl:value-of select="substring-after(.,'onneste')"/></xsl:if>
       <xsl:if test="matches(.,'^HONNESTE(\w*)$')">HONNÊTE<xsl:value-of select="substring-after(.,'HONNESTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estions$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^estions$')">étions</xsl:if>
       <xsl:if test="matches(.,'^Estions$')">Étions</xsl:if>
       <xsl:if test="matches(.,'^ESTIONS$')">ÉTIONS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^reverence(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]everence(\w*)$')"><xsl:value-of select="substring-before(.,'everence')"/>évérence<xsl:value-of select="substring-after(.,'everence')"/></xsl:if>
       <xsl:if test="matches(.,'^REVERENCE(\w*)$')">RÉVÉRENCE<xsl:value-of select="substring-after(.,'REVERENCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^yeus$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Yy]eus$')"><xsl:value-of select="substring-before(.,'eus')"/>eux</xsl:if>
       <xsl:if test="matches(.,'^YEUS$')">YEUX</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^remede(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]emede(\w*)$')"><xsl:value-of select="substring-before(.,'emede')"/>emède<xsl:value-of select="substring-after(.,'emede')"/></xsl:if>
       <xsl:if test="matches(.,'^REMEDE(\w*)$')">REMÈDE<xsl:value-of select="substring-after(.,'REMEDE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^remedier(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]emedier(\w*)$')"><xsl:value-of select="substring-before(.,'emedier')"/>emédier<xsl:value-of select="substring-after(.,'emedier')"/></xsl:if>
       <xsl:if test="matches(.,'^REMEDIER(\w*)$')">REMÉDIER<xsl:value-of select="substring-after(.,'REMEDIER')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^piece(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]iece(\w*)$')"><xsl:value-of select="substring-before(.,'iece')"/>ièce<xsl:value-of select="substring-after(.,'iece')"/></xsl:if>
       <xsl:if test="matches(.,'^PIECE(\w*)$')">PIÈCE<xsl:value-of select="substring-after(.,'PIECE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^riviere(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]iviere(\w*)$')"><xsl:value-of select="substring-before(.,'iviere')"/>ivière<xsl:value-of select="substring-after(.,'iviere')"/></xsl:if>
       <xsl:if test="matches(.,'^RIVIERE(\w*)$')">RIVIÈRE<xsl:value-of select="substring-after(.,'RIVIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ennuy(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]nnuy(\w*)$')"><xsl:value-of select="substring-before(.,'nnuy')"/>nnui<xsl:value-of select="substring-after(.,'nnuy')"/></xsl:if>
       <xsl:if test="matches(.,'^ENNUY(\w*)$')">ENNUI<xsl:value-of select="substring-after(.,'ENNUY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^entree(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]ntree(\w*)$')"><xsl:value-of select="substring-before(.,'ntree')"/>ntrée<xsl:value-of select="substring-after(.,'ntree')"/></xsl:if>
       <xsl:if test="matches(.,'^ENTREE(\w*)$')">ENTRÉE<xsl:value-of select="substring-after(.,'ENTREE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^necessaire(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Nn]ecessaire(\w*)$')"><xsl:value-of select="substring-before(.,'ecessaire')"/>écessaire<xsl:value-of select="substring-after(.,'ecessaire')"/></xsl:if>
       <xsl:if test="matches(.,'^NECESSAIRE(\w*)$')">NÉCESSAIRE<xsl:value-of select="substring-after(.,'NECESSAIRE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^tems$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]ems$')"><xsl:value-of select="substring-before(.,'ems')"/>emps</xsl:if>
       <xsl:if test="matches(.,'^TEMS$')">TEMPS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^come$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ome$')"><xsl:value-of select="substring-before(.,'ome')"/>omme</xsl:if>
       <xsl:if test="matches(.,'^COME$')">COMME</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^celeste$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]eleste$')"><xsl:value-of select="substring-before(.,'eleste')"/>éleste</xsl:if>
       <xsl:if test="matches(.,'^CELESTE$')">CÉLESTE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^gue$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]ue$')"><xsl:value-of select="substring-before(.,'ue')"/>ué</xsl:if>
       <xsl:if test="matches(.,'^GUE$')">GUÉ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^Amerique$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]merique$')"><xsl:value-of select="substring-before(.,'merique')"/>mérique</xsl:if>
       <xsl:if test="matches(.,'^AMERIQUE$')">AMÉRIQUE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^espece(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]spece(\w*)$')"><xsl:value-of select="substring-before(.,'spece')"/>spèce<xsl:value-of select="substring-after(.,'spece')"/></xsl:if>
       <xsl:if test="matches(.,'^ESPECE(\w*)$')">ESPÈCE<xsl:value-of select="substring-after(.,'ESPECE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^quarré(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^quarré(\w*)$')">carré<xsl:value-of select="substring-after(.,'quarré')"/></xsl:if>
       <xsl:if test="matches(.,'^Quarré(\w*)$')">Carré<xsl:value-of select="substring-after(.,'Quarré')"/></xsl:if>
       <xsl:if test="matches(.,'^QUARRÉ(\w*)$')">CARRÉ<xsl:value-of select="substring-after(.,'QUARRÉ')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^quarrez(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^quarrez(\w*)$')">carrés<xsl:value-of select="substring-after(.,'quarrez')"/></xsl:if>
       <xsl:if test="matches(.,'^Quarrez(\w*)$')">Carrés<xsl:value-of select="substring-after(.,'Quarrez')"/></xsl:if>
       <xsl:if test="matches(.,'^QUARREZ(\w*)$')">CARRÉS<xsl:value-of select="substring-after(.,'QUARREZ')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^delice(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]elice(\w*)$')"><xsl:value-of select="substring-before(.,'elice')"/>élice<xsl:value-of select="substring-after(.,'elice')"/></xsl:if>
       <xsl:if test="matches(.,'^DELICE(\w*)$')">DÉLICE<xsl:value-of select="substring-after(.,'DELICE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^forest$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]orest$')"><xsl:value-of select="substring-before(.,'orest')"/>orêt</xsl:if>
       <xsl:if test="matches(.,'^FOREST$')">FORÊT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^extreme(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]xtreme(\w*)$')"><xsl:value-of select="substring-before(.,'xtreme')"/>xtrême<xsl:value-of select="substring-after(.,'xtreme')"/></xsl:if>
       <xsl:if test="matches(.,'^EXTREME(\w*)$')">EXTRÊME<xsl:value-of select="substring-after(.,'EXTREME')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^prest$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]rest$')"><xsl:value-of select="substring-before(.,'rest')"/>rêt</xsl:if>
       <xsl:if test="matches(.,'^PREST$')">PRÊT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^derniere(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]erniere(\w*)$')"><xsl:value-of select="substring-before(.,'erniere')"/>ernière<xsl:value-of select="substring-after(.,'erniere')"/></xsl:if>
       <xsl:if test="matches(.,'^DERNIERE(\w*)$')">DERNIÈRE<xsl:value-of select="substring-after(.,'DERNIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^grecz$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]recz$')"><xsl:value-of select="substring-before(.,'recz')"/>recs</xsl:if>
       <xsl:if test="matches(.,'^GRECZ$')">GRECS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mile$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ile$')"><xsl:value-of select="substring-before(.,'ile')"/>ille</xsl:if>
       <xsl:if test="matches(.,'^MILE$')">MILLE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^verd$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]erd$')"><xsl:value-of select="substring-before(.,'erd')"/>ert</xsl:if>
       <xsl:if test="matches(.,'^VERD$')">VERT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^veritable(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eritable(\w*)$')"><xsl:value-of select="substring-before(.,'eritable')"/>éritable<xsl:value-of select="substring-after(.,'eritable')"/></xsl:if>
       <xsl:if test="matches(.,'^VERITABLE(\w*)$')">VÉRITABLE<xsl:value-of select="substring-after(.,'ERITABLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^parens$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[pP]arens$')"><xsl:value-of select="substring-before(.,'arens')"/>arents</xsl:if>
       <xsl:if test="matches(.,'^PARENS$')">PARENTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^treuve(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]reuve(\w*)$')"><xsl:value-of select="substring-before(.,'reuve')"/>rouve<xsl:value-of select="substring-after(.,'reuve')"/></xsl:if>
       <xsl:if test="matches(.,'^TREUVE(\w*)$')">TROUVE<xsl:value-of select="substring-after(.,'TREUVE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^resolu(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]esolu(\w*)$')"><xsl:value-of select="substring-before(.,'esolu')"/>ésolu<xsl:value-of select="substring-after(.,'esolu')"/></xsl:if>
       <xsl:if test="matches(.,'^RESOLU(\w*)$')">RÉSOLU<xsl:value-of select="substring-after(.,'RESOLU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^miserable(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]iserable(\w*)$')"><xsl:value-of select="substring-before(.,'iserable')"/>isérable<xsl:value-of select="substring-after(.,'iserable')"/></xsl:if>
       <xsl:if test="matches(.,'^MISERABLE(\w*)$')">MISÉRABLE<xsl:value-of select="substring-after(.,'MISERABLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fidele(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]idele(\w*)$')"><xsl:value-of select="substring-before(.,'idele')"/>idèle<xsl:value-of select="substring-after(.,'idele')"/></xsl:if>
       <xsl:if test="matches(.,'^FIDELE(\w*)$')">FIDÈLE<xsl:value-of select="substring-after(.,'FIDELE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pourveu(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ourveu(\w*)$')"><xsl:value-of select="substring-before(.,'ourveu')"/>ourvu<xsl:value-of select="substring-after(.,'ourveu')"/></xsl:if>
       <xsl:if test="matches(.,'^POURVEU(\w*)$')">POURVU<xsl:value-of select="substring-after(.,'POURVEU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^puys$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[pP]uys$')"><xsl:value-of select="substring-before(.,'uys')"/>uis</xsl:if>
       <xsl:if test="matches(.,'^PUYS$')">PUIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^appetit(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ppetit(\w*)$')"><xsl:value-of select="substring-before(.,'ppetit')"/>ppétit<xsl:value-of select="substring-after(.,'ppetit')"/></xsl:if>
       <xsl:if test="matches(.,'^APPETIT(\w*)$')">APPÉTIT<xsl:value-of select="substring-after(.,'APPETIT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mestier(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]estier(\w*)$')"><xsl:value-of select="substring-before(.,'estier')"/>étier<xsl:value-of select="substring-after(.,'estier')"/></xsl:if>
       <xsl:if test="matches(.,'^MESTIER(\w*)$')">MÉTIER<xsl:value-of select="substring-after(.,'MESTIER')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^petis$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[pP]etis$')"><xsl:value-of select="substring-before(.,'etis')"/>etits</xsl:if>
       <xsl:if test="matches(.,'^PETIS$')">PETITS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^escrip(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^escrip(\w+)$')">écri<xsl:value-of select="substring-after(.,'escrip')"/></xsl:if>
       <xsl:if test="matches(.,'^Escrip(\w+)$')">Écri<xsl:value-of select="substring-after(.,'Escrip')"/></xsl:if>
       <xsl:if test="matches(.,'^ESCRIP(\w+)$')">ÉCRI<xsl:value-of select="substring-after(.,'ESCRIP')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^escri[^m](\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^escri[^m](\w*)$')">écri<xsl:value-of select="substring-after(.,'escri')"/></xsl:if>
       <xsl:if test="matches(.,'^Escri[^m](\w*)$')">Écri<xsl:value-of select="substring-after(.,'Escri')"/></xsl:if>
       <xsl:if test="matches(.,'^ESCRI[^M](\w*)$')">ÉCRI<xsl:value-of select="substring-after(.,'ESCRI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^entiere(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]ntiere(\w*)$')"><xsl:value-of select="substring-before(.,'ntiere')"/>ntière<xsl:value-of select="substring-after(.,'ntiere')"/></xsl:if>
       <xsl:if test="matches(.,'^ENTIERE(\w*)$')">ENTIÈRE<xsl:value-of select="substring-after(.,'ENTIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^autruy$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]utruy$')"><xsl:value-of select="substring-before(.,'utruy')"/>utrui</xsl:if>
       <xsl:if test="matches(.,'^AUTRUY$')">AUTRUI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^experience(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]xperience(\w*)$')"><xsl:value-of select="substring-before(.,'xperience')"/>xpérience<xsl:value-of select="substring-after(.,'xperience')"/></xsl:if>
       <xsl:if test="matches(.,'^EXPERIENCE(\w*)$')">EXPÉRIENCE<xsl:value-of select="substring-after(.,'EXPERIENCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^leu$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]eu$')"><xsl:value-of select="substring-before(.,'eu')"/>u</xsl:if>
       <xsl:if test="matches(.,'^LEU$')">LU</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^plain$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]lain$')"><xsl:value-of select="substring-before(.,'lain')"/>lein</xsl:if>
       <xsl:if test="matches(.,'^PLAIN$')">PLEIN</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^prent$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]rent$')"><xsl:value-of select="substring-before(.,'rent')"/>rend</xsl:if>
       <xsl:if test="matches(.,'^PRENT$')">PREND</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fusmes$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]usmes$')"><xsl:value-of select="substring-before(.,'usmes')"/>ûmes</xsl:if>
       <xsl:if test="matches(.,'^FUSMES$')">FÛMES</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^tens$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]ens$')"><xsl:value-of select="substring-before(.,'ens')"/>emps</xsl:if>
       <xsl:if test="matches(.,'^TENS$')">TEMPS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mension$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ension$')"><xsl:value-of select="substring-before(.,'ension')"/>ention</xsl:if>
       <xsl:if test="matches(.,'^MENSION$')">MENTION</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mieus$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ieus$')"><xsl:value-of select="substring-before(.,'ieus')"/>ieux</xsl:if>
       <xsl:if test="matches(.,'^MIEUS$')">MIEUX</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fueillet(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ueillet(\w*)$')"><xsl:value-of select="substring-before(.,'ueillet')"/>euillet<xsl:value-of select="substring-after(.,'ueillet')"/></xsl:if>
       <xsl:if test="matches(.,'^FUEILLET(\w*)$')">FEUILLET<xsl:value-of select="substring-after(.,'FUEILLET')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fueillage(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ueillage(\w*)$')"><xsl:value-of select="substring-before(.,'ueillage')"/>euillage<xsl:value-of select="substring-after(.,'ueillage')"/></xsl:if>
       <xsl:if test="matches(.,'^FUEILLAGE(\w*)$')">FEUILLAGE<xsl:value-of select="substring-after(.,'FUEILLAGE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fueil$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ueil$')"><xsl:value-of select="substring-before(.,'ueil')"/>euille</xsl:if>
       <xsl:if test="matches(.,'^FUEIL$')">FEUILLE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^siege(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]iege(\w*)$')"><xsl:value-of select="substring-before(.,'iege')"/>iège<xsl:value-of select="substring-after(.,'iege')"/></xsl:if>
       <xsl:if test="matches(.,'^SIEGE(\w*)$')">SIÈGE<xsl:value-of select="substring-after(.,'SIEGE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^acquerir$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]cquerir$')"><xsl:value-of select="substring-before(.,'cquerir')"/>cquérir</xsl:if>
       <xsl:if test="matches(.,'^ACQUERIR$')">ACQUÉRIR</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^degrez', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]egrez$')"><xsl:value-of select="substring-before(.,'egrez')"/>egrés</xsl:if>
       <xsl:if test="matches(.,'^DEGREZ$')">DEGRÉS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ennemys', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]nnemys$')"><xsl:value-of select="substring-before(.,'nnemys')"/>nnemis</xsl:if>
       <xsl:if test="matches(.,'^ENNEMYS$')">ENNEMIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^poete(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]oete(\w*)$')"><xsl:value-of select="substring-before(.,'oete')"/>oète<xsl:value-of select="substring-after(.,'oete')"/></xsl:if>
       <xsl:if test="matches(.,'^POETE(\w*)$')">POÈTE<xsl:value-of select="substring-after(.,'POETE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^Romme', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]omme$')"><xsl:value-of select="substring-before(.,'omme')"/>ome</xsl:if>
       <xsl:if test="matches(.,'^ROMME$')">ROME</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^dous', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ous$')"><xsl:value-of select="substring-before(.,'ous')"/>oux</xsl:if>
       <xsl:if test="matches(.,'^OUS$')">OUX</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^nommee(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Nn]ommee(\w*)$')"><xsl:value-of select="substring-before(.,'ommee')"/>ommée<xsl:value-of select="substring-after(.,'ommee')"/></xsl:if>
       <xsl:if test="matches(.,'^NOMMEE(\w*)$')">NOMMÉE<xsl:value-of select="substring-after(.,'NOMMEE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^paour(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]aour(\w*)$')"><xsl:value-of select="substring-before(.,'aour')"/>eur<xsl:value-of select="substring-after(.,'aour')"/></xsl:if>
       <xsl:if test="matches(.,'^PAOUR(\w*)$')">PEUR<xsl:value-of select="substring-after(.,'PAOUR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^proces$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]roces$')"><xsl:value-of select="substring-before(.,'roces')"/>rocès</xsl:if>
       <xsl:if test="matches(.,'^PROCES$')">PROCÈS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^brief$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]rief$')"><xsl:value-of select="substring-before(.,'rief')"/>ref</xsl:if>
       <xsl:if test="matches(.,'^BRIEF$')">BREF</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^esperit(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]sperit(\w*)$')"><xsl:value-of select="substring-before(.,'sperit')"/>sprit<xsl:value-of select="substring-after(.,'sperit')"/></xsl:if>
       <xsl:if test="matches(.,'^ESPERIT(\w*)$')">ESPRIT<xsl:value-of select="substring-after(.,'ESPERIT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^considere$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]onsidere$')"><xsl:value-of select="substring-before(.,'onsidere')"/>onsidère</xsl:if>
       <xsl:if test="matches(.,'^CONSIDERE$')">CONSIDÈRE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^considerer$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]onsiderer$')"><xsl:value-of select="substring-before(.,'onsiderer')"/>onsidérer</xsl:if>
       <xsl:if test="matches(.,'^CONSIDERER$')">CONSIDÉRER</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^consideré(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]onsideré(\w*)$')"><xsl:value-of select="substring-before(.,'onsideré')"/>onsidéré</xsl:if>
       <xsl:if test="matches(.,'^CONSIDERÉ(\w*)$')">CONSIDÉRÉ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^considerant(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]onsiderant(\w*)$')"><xsl:value-of select="substring-before(.,'onsiderant')"/>onsidérant</xsl:if>
       <xsl:if test="matches(.,'^CONSIDERANT(\w*)$')">CONSIDÉRANT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estude(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^estude(\w*)$')">étude<xsl:value-of select="substring-after(.,'estude')"/></xsl:if>
       <xsl:if test="matches(.,'^Estude(\w*)$')">Étude<xsl:value-of select="substring-after(.,'Estude')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTUDE(\w*)$')">ÉTUDE<xsl:value-of select="substring-after(.,'ESTUDE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^testes$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]estes$')"><xsl:value-of select="substring-before(.,'estes')"/>êtes</xsl:if>
       <xsl:if test="matches(.,'^TESTES$')">TÊTES</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^priere(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]riere(\w*)$')"><xsl:value-of select="substring-before(.,'riere')"/>rière<xsl:value-of select="substring-after(.,'riere')"/></xsl:if>
       <xsl:if test="matches(.,'^PRIERE(\w*)$')">PRIÈRE<xsl:value-of select="substring-after(.,'PRIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^voyes$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]oyes$')"><xsl:value-of select="substring-before(.,'voyes')"/>voies</xsl:if>
       <xsl:if test="matches(.,'^VOYES$')">VOIES</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^homes?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]omes?$')"><xsl:value-of select="substring-before(.,'ome')"/>omme<xsl:value-of select="substring-after(.,'ome')"/></xsl:if>
       <xsl:if test="matches(.,'^HOMES?$')">HOMME<xsl:value-of select="substring-after(.,'HOME')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^espaule(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^espaule(\w*)$')">épaule<xsl:value-of select="substring-after(.,'espaule')"/></xsl:if>
       <xsl:if test="matches(.,'^Espaule(\w*)$')">Épaule<xsl:value-of select="substring-after(.,'Espaule')"/></xsl:if>
       <xsl:if test="matches(.,'^ESPAULE(\w*)$')">ÉPAULE<xsl:value-of select="substring-after(.,'ESPAULE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^nud$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Nn]ud$')"><xsl:value-of select="substring-before(.,'ud')"/>u</xsl:if>
       <xsl:if test="matches(.,'^NUD$')">NU</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^presques$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]resques$')"><xsl:value-of select="substring-before(.,'resques')"/>resque</xsl:if>
       <xsl:if test="matches(.,'^PRESQUES$')">PRESQUE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^eternelle(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^eternelle(\w*)$')">éternelle<xsl:value-of select="substring-after(.,'eternelle')"/></xsl:if>
       <xsl:if test="matches(.,'^Eternelle(\w*)$')">Éternelle<xsl:value-of select="substring-after(.,'Eternelle')"/></xsl:if>
       <xsl:if test="matches(.,'^ETERNELLE(\w*)$')">ÉTERNELLE<xsl:value-of select="substring-after(.,'ETERNELLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^arriere(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]rriere(\w*)$')"><xsl:value-of select="substring-before(.,'rriere')"/>rrière<xsl:value-of select="substring-after(.,'rriere')"/></xsl:if>
       <xsl:if test="matches(.,'^ARRIERE(\w*)$')">ARRIÈRE<xsl:value-of select="substring-after(.,'ARRIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pais$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ais$')"><xsl:value-of select="substring-before(.,'ais')"/>ays</xsl:if>
       <xsl:if test="matches(.,'^PAIS$')">PAYS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^Ameriquains$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]meriquains$')"><xsl:value-of select="substring-before(.,'meriquains')"/>méricains</xsl:if>
       <xsl:if test="matches(.,'^AMERIQUAINS$')">AMÉRICAINS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^reput(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]eput(\w*)$')"><xsl:value-of select="substring-before(.,'eput')"/>éput<xsl:value-of select="substring-after(.,'eput')"/></xsl:if>
       <xsl:if test="matches(.,'^REPUT(\w*)$')">RÉPUT<xsl:value-of select="substring-after(.,'REPUT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ensuy(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]nsuy(\w*)$')"><xsl:value-of select="substring-before(.,'nsuy')"/>nsui<xsl:value-of select="substring-after(.,'nsuy')"/></xsl:if>
       <xsl:if test="matches(.,'^ENSUY(\w*)$')">ENSUI<xsl:value-of select="substring-after(.,'ENSUY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^doulceur(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]oulceur(\w*)$')"><xsl:value-of select="substring-before(.,'oulceur')"/>ouceur<xsl:value-of select="substring-after(.,'oulceur')"/></xsl:if>
       <xsl:if test="matches(.,'^DOULCEUR(\w*)$')">DOUCEUR<xsl:value-of select="substring-after(.,'DOULCEUR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^dautant$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]autant$')"><xsl:value-of select="substring-before(.,'autant')"/>'autant</xsl:if>
       <xsl:if test="matches(.,'^DAUTANT$')">D'AUTANT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^medecin(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]edecin(\w*)$')"><xsl:value-of select="substring-before(.,'edecin')"/>édecin<xsl:value-of select="substring-after(.,'edecin')"/></xsl:if>
       <xsl:if test="matches(.,'^MEDECIN(\w*)$')">MÉDECIN<xsl:value-of select="substring-after(.,'MEDECIN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^soucy(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]oucy(\w*)$')"><xsl:value-of select="substring-before(.,'oucy')"/>ouci<xsl:value-of select="substring-after(.,'oucy')"/></xsl:if>
       <xsl:if test="matches(.,'^SOUCY(\w*)$')">SOUCI<xsl:value-of select="substring-after(.,'SOUCY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^sejour(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]ejour(\w*)$')"><xsl:value-of select="substring-before(.,'ejour')"/>éjour<xsl:value-of select="substring-after(.,'ejour')"/></xsl:if>
       <xsl:if test="matches(.,'^SEJOUR(\w*)$')">SÉJOUR<xsl:value-of select="substring-after(.,'SEJOUR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^esc[^lira](\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^esc[^lira](\w*)$')">éc<xsl:value-of select="substring-after(.,'esc')"/></xsl:if>
    <xsl:if test="matches(.,'^Esc[^lira](\w*)$')">Éc<xsl:value-of select="substring-after(.,'Esc')"/></xsl:if>
    <xsl:if test="matches(.,'^ESC[^LIRA](\w*)$')">ÉC<xsl:value-of select="substring-after(.,'ESC')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^declar(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]eclar(\w*)$')"><xsl:value-of select="substring-before(.,'eclar')"/>éclar<xsl:value-of select="substring-after(.,'eclar')"/></xsl:if>
       <xsl:if test="matches(.,'^DECLAR(\w*)$')">DÉCLAR<xsl:value-of select="substring-after(.,'DECLAR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^levre(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]evre(\w*)$')"><xsl:value-of select="substring-before(.,'evre')"/>èvre<xsl:value-of select="substring-after(.,'evre')"/></xsl:if>
       <xsl:if test="matches(.,'^LEVRE(\w*)$')">LÈVRE<xsl:value-of select="substring-after(.,'LEVRE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mil$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]il$')"><xsl:value-of select="substring-before(.,'il')"/>ille</xsl:if>
       <xsl:if test="matches(.,'^MIL$')">MILLE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^regne(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]egne(\w*)$')"><xsl:value-of select="substring-before(.,'egne')"/>ègne<xsl:value-of select="substring-after(.,'egne')"/></xsl:if>
       <xsl:if test="matches(.,'^REGNE(\w*)$')">RÈGNE<xsl:value-of select="substring-after(.,'REGNE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^veus$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eus$')"><xsl:value-of select="substring-before(.,'eus')"/>us</xsl:if>
       <xsl:if test="matches(.,'^VEUS$')">VUS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^discretion(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]iscretion(\w*)$')"><xsl:value-of select="substring-before(.,'iscretion')"/>iscrétion<xsl:value-of select="substring-after(.,'iscretion')"/></xsl:if>
       <xsl:if test="matches(.,'^DISCRETION(\w*)$')">DISCRÉTION<xsl:value-of select="substring-after(.,'DISCRETION')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^prestre(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]restre(\w*)$')"><xsl:value-of select="substring-before(.,'restre')"/>rêtre<xsl:value-of select="substring-after(.,'restre')"/></xsl:if>
       <xsl:if test="matches(.,'^PRESTRE(\w*)$')">PRÊTRE<xsl:value-of select="substring-after(.,'PRESTRE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^voluntiers$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]oluntiers$')"><xsl:value-of select="substring-before(.,'oluntiers')"/>olontiers</xsl:if>
       <xsl:if test="matches(.,'^VOLUNTIERS$')">VOLONTIERS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^frize(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]rize(\w*)$')"><xsl:value-of select="substring-before(.,'rize')"/>rise<xsl:value-of select="substring-after(.,'rize')"/></xsl:if>
       <xsl:if test="matches(.,'^PRESTRE(\w*)$')">PRÊTRE<xsl:value-of select="substring-after(.,'PRESTRE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^obei(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]bei(\w*)$')"><xsl:value-of select="substring-before(.,'bei')"/>béi<xsl:value-of select="substring-after(.,'bei')"/></xsl:if>
       <xsl:if test="matches(.,'^OBEI(\w*)$')">OBÉI<xsl:value-of select="substring-after(.,'OBEI')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^procede(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]rocede(\w*)$')"><xsl:value-of select="substring-before(.,'rocede')"/>rocède<xsl:value-of select="substring-after(.,'rocede')"/></xsl:if>
       <xsl:if test="matches(.,'^PROCEDE(\w*)$')">PROCÈDE<xsl:value-of select="substring-after(.,'PROCEDE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^gist$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]ist$')"><xsl:value-of select="substring-before(.,'ist')"/>ît</xsl:if>
       <xsl:if test="matches(.,'^GIST$')">GÎT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^resis(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]esis(\w*)$')"><xsl:value-of select="substring-before(.,'esis')"/>ésis<xsl:value-of select="substring-after(.,'esis')"/></xsl:if>
       <xsl:if test="matches(.,'^RESIS(\w*)$')">RÉSIS<xsl:value-of select="substring-after(.,'RESIS')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^descou(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]escou(\w*)$')"><xsl:value-of select="substring-before(.,'escou')"/>écou<xsl:value-of select="substring-after(.,'escou')"/></xsl:if>
       <xsl:if test="matches(.,'^DESCOU(\w*)$')">DÉCOU<xsl:value-of select="substring-after(.,'DESCOU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mescha(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]escha(\w*)$')"><xsl:value-of select="substring-before(.,'escha')"/>écha<xsl:value-of select="substring-after(.,'escha')"/></xsl:if>
       <xsl:if test="matches(.,'^MESCHA(\w*)$')">MÉCHA<xsl:value-of select="substring-after(.,'MESCHA')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^verite(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]erite(\w*)$')"><xsl:value-of select="substring-before(.,'erite')"/>érité<xsl:value-of select="substring-after(.,'erite')"/></xsl:if>
       <xsl:if test="matches(.,'^VERITE(\w*)$')">VÉRITÉ<xsl:value-of select="substring-after(.,'VERITE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^verit(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]erit(\w*)$')"><xsl:value-of select="substring-before(.,'erit')"/>érit<xsl:value-of select="substring-after(.,'erit')"/></xsl:if>
       <xsl:if test="matches(.,'^VERIT(\w*)$')">VÉRIT<xsl:value-of select="substring-after(.,'VERIT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^oyseau(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]yseau(\w*)$')"><xsl:value-of select="substring-before(.,'yseau')"/>iseau<xsl:value-of select="substring-after(.,'yseau')"/></xsl:if>
       <xsl:if test="matches(.,'^OYSEAU(\w*)$')">OISEAU<xsl:value-of select="substring-after(.,'OYSEAU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^desormais$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esormais$')"><xsl:value-of select="substring-before(.,'esormais')"/>ésormais</xsl:if>
       <xsl:if test="matches(.,'^DESORMAIS$')">DÉSORMAIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pouvois$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ouvois$')"><xsl:value-of select="substring-before(.,'ouvois')"/>ouvais</xsl:if>
       <xsl:if test="matches(.,'^POUVOIS$')">POUVAIS</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)aiges?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)aiges?$')"><xsl:value-of select="substring-before(.,'aige')"/>age<xsl:value-of select="substring-after(.,'aige')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w+)AIGES?$')"><xsl:value-of select="substring-before(.,'AIGE')"/>AGE<xsl:value-of select="substring-after(.,'AIGE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fasché(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]asché(\w*)$')"><xsl:value-of select="substring-before(.,'asché')"/>âché<xsl:value-of select="substring-after(.,'isaige')"/></xsl:if>
       <xsl:if test="matches(.,'^FASCHÉ(\w*)$')">FÂCHÉ<xsl:value-of select="substring-after(.,'FASCHÉ')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^expres$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]xpres$')"><xsl:value-of select="substring-before(.,'xpres')"/>xprès</xsl:if>
       <xsl:if test="matches(.,'^EXPRES$')">EXPRÈS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^chasteau(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]hasteau(\w*)$')"><xsl:value-of select="substring-before(.,'hasteau')"/>hâteau<xsl:value-of select="substring-after(.,'hasteau')"/></xsl:if>
       <xsl:if test="matches(.,'^CHASTEAU(\w*)$')">CHÂTEAU<xsl:value-of select="substring-after(.,'CHASTEAU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^receut$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]eceut$')"><xsl:value-of select="substring-before(.,'eceut')"/>eçut</xsl:if>
       <xsl:if test="matches(.,'^RECEUT$')">REÇUT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ars$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]rs$')"><xsl:value-of select="substring-before(.,'rs')"/>rts</xsl:if>
       <xsl:if test="matches(.,'^ARS$')">ARTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^veit$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eit$')"><xsl:value-of select="substring-before(.,'eit')"/>it</xsl:if>
       <xsl:if test="matches(.,'^VEIT$')">VIT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^compere(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ompere(\w*)$')"><xsl:value-of select="substring-before(.,'ompere')"/>ompère<xsl:value-of select="substring-after(.,'hasteau')"/></xsl:if>
       <xsl:if test="matches(.,'^COMPERE(\w*)$')">COMPÈRE<xsl:value-of select="substring-after(.,'COMPERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^riens$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]iens$')"><xsl:value-of select="substring-before(.,'iens')"/>ien</xsl:if>
       <xsl:if test="matches(.,'^RIENS$')">RIEN</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^eviter$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^eviter$')">éviter</xsl:if>
       <xsl:if test="matches(.,'^Eviter$')">Éviter</xsl:if>
       <xsl:if test="matches(.,'^EVITER$')">ÉVITER</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^lheure$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]heure$')"><xsl:value-of select="substring-before(.,'heure')"/>'heure</xsl:if>
       <xsl:if test="matches(.,'^LHEURE$')">L'HEURE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^colere(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]olere(\w*)$')"><xsl:value-of select="substring-before(.,'olere')"/>olère<xsl:value-of select="substring-after(.,'olere')"/></xsl:if>
       <xsl:if test="matches(.,'^COLERE(\w*)$')">COLÈRE<xsl:value-of select="substring-after(.,'COLERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^damoyselle(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]amoyselle(\w*)$')"><xsl:value-of select="substring-before(.,'amoyselle')"/>amoiselle<xsl:value-of select="substring-after(.,'olere')"/></xsl:if>
       <xsl:if test="matches(.,'^DAMOYSELLE(\w*)$')">DAMOISELLE<xsl:value-of select="substring-after(.,'DAMOYSELLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^precieu(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]recieu(\w*)$')"><xsl:value-of select="substring-before(.,'recieu')"/>récieu<xsl:value-of select="substring-after(.,'recieu')"/></xsl:if>
       <xsl:if test="matches(.,'^PRECIEU(\w*)$')">PRÉCIEU<xsl:value-of select="substring-after(.,'PRECIEU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^gener(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]ener(\w*)$')"><xsl:value-of select="substring-before(.,'ener')"/>énér<xsl:value-of select="substring-after(.,'ener')"/></xsl:if>
       <xsl:if test="matches(.,'^GENER(\w*)$')">GÉNÉR<xsl:value-of select="substring-after(.,'GENER')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^vescu(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]escu(\w*)$')"><xsl:value-of select="substring-before(.,'escu')"/>écu<xsl:value-of select="substring-after(.,'escu')"/></xsl:if>
       <xsl:if test="matches(.,'^VESCU(\w*)$')">VÉCU<xsl:value-of select="substring-after(.,'VESCU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^louenge(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]ouenge(\w*)$')"><xsl:value-of select="substring-before(.,'ouenge')"/>ouange<xsl:value-of select="substring-after(.,'ouenge')"/></xsl:if>
       <xsl:if test="matches(.,'^LOUENGE(\w*)$')">LOUANGE<xsl:value-of select="substring-after(.,'LOUENGE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^meine$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]eine$')"><xsl:value-of select="substring-before(.,'eine')"/>ène</xsl:if>
       <xsl:if test="matches(.,'^MEINE$')">MÈNE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)iesmes?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)iesmes?$')"><xsl:value-of select="substring-before(.,'iesme')"/>ième<xsl:value-of select="substring-after(.,'iesme')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)IESMES?$')"><xsl:value-of select="substring-before(.,'IESME')"/>IÈME<xsl:value-of select="substring-after(.,'IESME')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^recomp(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]ecomp(\w*)$')"><xsl:value-of select="substring-before(.,'ecomp')"/>écomp<xsl:value-of select="substring-after(.,'ecomp')"/></xsl:if>
       <xsl:if test="matches(.,'^RECOMP(\w*)$')">RÉCOMP<xsl:value-of select="substring-after(.,'RECOMP')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^liez$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]iez$')"><xsl:value-of select="substring-before(.,'iez')"/>iés</xsl:if>
       <xsl:if test="matches(.,'^LIEZ$')">LIÉS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^difference(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ifference(\w*)$')"><xsl:value-of select="substring-before(.,'ifference')"/>ifférence<xsl:value-of select="substring-after(.,'ifference')"/></xsl:if>
       <xsl:if test="matches(.,'^DIFFERENCE(\w*)$')">DIFFÉRENCE<xsl:value-of select="substring-after(.,'DIFFERENCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ignorans$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ii]gnorans$')"><xsl:value-of select="substring-before(.,'gnorans')"/>gnorants</xsl:if>
       <xsl:if test="matches(.,'^IGNORANS$')">IGNORANTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^consequence(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]onsequence(\w*)$')"><xsl:value-of select="substring-before(.,'onsequence')"/>onséquence<xsl:value-of select="substring-after(.,'onsequence')"/></xsl:if>
       <xsl:if test="matches(.,'^CONSEQUENCE(\w*)$')">CONSÉQUENCE<xsl:value-of select="substring-after(.,'CONSEQUENCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^voulte(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]oulte(\w*)$')"><xsl:value-of select="substring-before(.,'oulte')"/>oûte<xsl:value-of select="substring-after(.,'oulte')"/></xsl:if>
       <xsl:if test="matches(.,'^VOULTE(\w*)$')">VOÛTE<xsl:value-of select="substring-after(.,'VOULTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^vuide(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]uide(\w*)$')"><xsl:value-of select="substring-before(.,'uide')"/>ide<xsl:value-of select="substring-after(.,'uide')"/></xsl:if>
       <xsl:if test="matches(.,'^VUIDE(\w*)$')">VIDE<xsl:value-of select="substring-after(.,'VUIDE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^vey$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]ey$')"><xsl:value-of select="substring-before(.,'ey')"/>is</xsl:if>
       <xsl:if test="matches(.,'^VEY$')">VIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^arrest(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]rrest(\w*)$')"><xsl:value-of select="substring-before(.,'rrest')"/>rrêt<xsl:value-of select="substring-after(.,'rrest')"/></xsl:if>
       <xsl:if test="matches(.,'^ARREST(\w*)$')">ARRÊT<xsl:value-of select="substring-after(.,'ARREST')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)credit(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Cc]redit(\w*)$')"><xsl:value-of select="substring-before(.,'redit')"/>rédit<xsl:value-of select="substring-after(.,'redit')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)CREDIT(\w*)$')"><xsl:value-of select="substring-before(.,'CREDIT')"/>CRÉDIT<xsl:value-of select="substring-after(.,'CREDIT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^povre(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ovre(\w*)$')"><xsl:value-of select="substring-before(.,'ovre')"/>auvre<xsl:value-of select="substring-after(.,'ovre')"/></xsl:if>
       <xsl:if test="matches(.,'^POVRE(\w*)$')">PAUVRE<xsl:value-of select="substring-after(.,'POVRE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)[^fh]erent$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)[^fh]erent$')"><xsl:value-of select="substring-before(.,'erent')"/>èrent</xsl:if>
                    <xsl:if test="matches(.,'^(\w+)[^FH]ERENT$')"><xsl:value-of select="substring-before(.,'ERENT')"/>ÈRENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ceans$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]eans$')"><xsl:value-of select="substring-before(.,'eans')"/>éans</xsl:if>
       <xsl:if test="matches(.,'^CEANS$')">CÉANS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mystere(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ystere(\w*)$')"><xsl:value-of select="substring-before(.,'ystere')"/>ystère<xsl:value-of select="substring-after(.,'ystere')"/></xsl:if>
       <xsl:if test="matches(.,'^MYSTERE(\w*)$')">MYSTÈRE<xsl:value-of select="substring-after(.,'MYSTERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^tenebre(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]enebre(\w*)$')"><xsl:value-of select="substring-before(.,'enebre')"/>énèbre<xsl:value-of select="substring-after(.,'enebre')"/></xsl:if>
       <xsl:if test="matches(.,'^TENEBRE(\w*)$')">TÉNÈBRE<xsl:value-of select="substring-after(.,'TENEBRE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^deliberé(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]eliberé(\w*)$')"><xsl:value-of select="substring-before(.,'eliberé')"/>elibéré<xsl:value-of select="substring-after(.,'eliberé')"/></xsl:if>
       <xsl:if test="matches(.,'^DELIBERÉ(\w*)$')">DELIBÉRÉ<xsl:value-of select="substring-after(.,'DELIBERÉ')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^serpens$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]erpens$')"><xsl:value-of select="substring-before(.,'erpens')"/>erpents</xsl:if>
       <xsl:if test="matches(.,'^SERPENS$')">SERPENTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^propous$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ropous$')"><xsl:value-of select="substring-before(.,'ropous')"/>ropos</xsl:if>
       <xsl:if test="matches(.,'^PROPOUS$')">PROPOS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^festes$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[fF]estes$')"><xsl:value-of select="substring-before(.,'estes')"/>êtes</xsl:if>
       <xsl:if test="matches(.,'^FESTES$')">FÊTES</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^annee(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]nnee(\w*)$')"><xsl:value-of select="substring-before(.,'nnee')"/>nnée<xsl:value-of select="substring-after(.,'nnee')"/></xsl:if>
       <xsl:if test="matches(.,'^ANNEE(\w*)$')">ANNÉE<xsl:value-of select="substring-after(.,'ANNEE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^misere(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]isere(\w*)$')"><xsl:value-of select="substring-before(.,'isere')"/>isère<xsl:value-of select="substring-after(.,'isere')"/></xsl:if>
       <xsl:if test="matches(.,'^MISERE(\w*)$')">MISÈRE<xsl:value-of select="substring-after(.,'MISERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fumee(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]umee(\w*)$')"><xsl:value-of select="substring-before(.,'umee')"/>umée<xsl:value-of select="substring-after(.,'umee')"/></xsl:if>
       <xsl:if test="matches(.,'^FUMEE(\w*)$')">FUMÉE<xsl:value-of select="substring-after(.,'FUMEE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pluye(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]luye(\w*)$')"><xsl:value-of select="substring-before(.,'luye')"/>luie<xsl:value-of select="substring-after(.,'luye')"/></xsl:if>
       <xsl:if test="matches(.,'^PLUYE(\w*)$')">PLUIE<xsl:value-of select="substring-after(.,'PLUYE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^poeut$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]oeut$')"><xsl:value-of select="substring-before(.,'oeut')"/>eut</xsl:if>
       <xsl:if test="matches(.,'^POEUT$')">PEUT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^closture(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]losture(\w*)$')"><xsl:value-of select="substring-before(.,'losture')"/>lôture<xsl:value-of select="substring-after(.,'luye')"/></xsl:if>
       <xsl:if test="matches(.,'^CLOSTURE(\w*)$')">CLÔTURE<xsl:value-of select="substring-after(.,'CLOSTURE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^singuliere(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]inguliere(\w*)$')"><xsl:value-of select="substring-before(.,'inguliere')"/>ingulière<xsl:value-of select="substring-after(.,'inguliere')"/></xsl:if>
       <xsl:if test="matches(.,'^INGULIERE(\w*)$')">INGULIÈRE<xsl:value-of select="substring-after(.,'INGULIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^desespoir(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esespoir(\w*)$')"><xsl:value-of select="substring-before(.,'esespoir')"/>ésespoir<xsl:value-of select="substring-after(.,'esespoir')"/></xsl:if>
       <xsl:if test="matches(.,'^DESESPOIR(\w*)$')">DÉSESPOIR<xsl:value-of select="substring-after(.,'DESESPOIR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^operation(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]peration(\w*)$')"><xsl:value-of select="substring-before(.,'peration')"/>pération<xsl:value-of select="substring-after(.,'peration')"/></xsl:if>
       <xsl:if test="matches(.,'^OPERATION(\w*)$')">OPÉRATION<xsl:value-of select="substring-after(.,'OPERATION')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^flame(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]lame(\w*)$')"><xsl:value-of select="substring-before(.,'lame')"/>lamme<xsl:value-of select="substring-after(.,'lame')"/></xsl:if>
       <xsl:if test="matches(.,'^FLAME(\w*)$')">FLAMME<xsl:value-of select="substring-after(.,'FLAME')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^moien(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]oien(\w*)$')"><xsl:value-of select="substring-before(.,'oien')"/>oyen<xsl:value-of select="substring-after(.,'oien')"/></xsl:if>
       <xsl:if test="matches(.,'^MOIEN(\w*)$')">MOYEN<xsl:value-of select="substring-after(.,'MOIEN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^haste$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]aste$')"><xsl:value-of select="substring-before(.,'aste')"/>âte</xsl:if>
       <xsl:if test="matches(.,'^HASTE$')">HÂTE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^edifice(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^edifice(\w*)$')">édifice<xsl:value-of select="substring-after(.,'edifice')"/></xsl:if>
       <xsl:if test="matches(.,'^Edifice(\w*)$')">Édifice<xsl:value-of select="substring-after(.,'Edifice')"/></xsl:if>
       <xsl:if test="matches(.,'^EDIFICE(\w*)$')">ÉDIFICE<xsl:value-of select="substring-after(.,'EDIFICE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^preface(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]reface(\w*)$')"><xsl:value-of select="substring-before(.,'reface')"/>réface<xsl:value-of select="substring-after(.,'reface')"/></xsl:if>
       <xsl:if test="matches(.,'^PREFACE(\w*)$')">PRÉFACE<xsl:value-of select="substring-after(.,'PREFACE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^gay(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]ay(\w*)$')"><xsl:value-of select="substring-before(.,'ay')"/>ai<xsl:value-of select="substring-after(.,'ay')"/></xsl:if>
       <xsl:if test="matches(.,'^GAY(\w*)$')">GAI<xsl:value-of select="substring-after(.,'GAY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^esgard(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^esgard(\w*)$')">égard<xsl:value-of select="substring-after(.,'esgard')"/></xsl:if>
       <xsl:if test="matches(.,'^Esgard(\w*)$')">Égard<xsl:value-of select="substring-after(.,'Esgard')"/></xsl:if>
       <xsl:if test="matches(.,'^ESGARD(\w*)$')">ÉGARD<xsl:value-of select="substring-after(.,'ESGARD')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^diametre(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]iametre(\w*)$')"><xsl:value-of select="substring-before(.,'iametre')"/>iamètre<xsl:value-of select="substring-after(.,'iametre')"/></xsl:if>
       <xsl:if test="matches(.,'^DIAMETRE(\w*)$')">DIAMÈTRE<xsl:value-of select="substring-after(.,'DIAMETRE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^onc$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]nc$')"><xsl:value-of select="substring-before(.,'nc')"/>nques</xsl:if>
       <xsl:if test="matches(.,'^ONC$')">ONQUES</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pronun(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ronun(\w*)$')"><xsl:value-of select="substring-before(.,'ronun')"/>ronon<xsl:value-of select="substring-after(.,'ronun')"/></xsl:if>
       <xsl:if test="matches(.,'^PRONUN(\w*)$')">PRONON<xsl:value-of select="substring-after(.,'PRONUN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^debat(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ebat(\w*)$')"><xsl:value-of select="substring-before(.,'ebat')"/>ébat<xsl:value-of select="substring-after(.,'ebat')"/></xsl:if>
       <xsl:if test="matches(.,'^DEBAT(\w*)$')">DÉBAT<xsl:value-of select="substring-after(.,'DEBAT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mors$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ors$')"><xsl:value-of select="substring-before(.,'ors')"/>orts</xsl:if>
       <xsl:if test="matches(.,'^MORS$')">MORTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pillier(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]illier(\w*)$')"><xsl:value-of select="substring-before(.,'illier')"/>ilier<xsl:value-of select="substring-after(.,'illier')"/></xsl:if>
       <xsl:if test="matches(.,'^PILLIER(\w*)$')">PILIER<xsl:value-of select="substring-after(.,'PILLIER')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^communement$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ommunement$')"><xsl:value-of select="substring-before(.,'ommunement')"/>ommunément</xsl:if>
       <xsl:if test="matches(.,'^COMMUNEMENT$')">COMMUNÉMENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^flesche(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]lesche(\w*)$')"><xsl:value-of select="substring-before(.,'lesche')"/>lêche<xsl:value-of select="substring-after(.,'lesche')"/></xsl:if>
       <xsl:if test="matches(.,'^FLESCHE(\w*)$')">FLÊCHE<xsl:value-of select="substring-after(.,'FLESCHE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^scelon$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]celon$')"><xsl:value-of select="substring-before(.,'celon')"/>elon</xsl:if>
       <xsl:if test="matches(.,'^SCELON$')">SELON</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^souloit$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^souloit$')">avait l'habitude de</xsl:if>
       <xsl:if test="matches(.,'^Souloit$')">Avait l'habitude de</xsl:if>
       <xsl:if test="matches(.,'^SOULOIT$')">AVAIT L'HABITUDE DE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^vien$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[vV]ien$')"><xsl:value-of select="substring-before(.,'ien')"/>iens</xsl:if>
       <xsl:if test="matches(.,'^VIEN$')">VIENS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^apertement$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^apertement$')">ouvertement</xsl:if>
       <xsl:if test="matches(.,'^Apertement$')">Ouvertement</xsl:if>
       <xsl:if test="matches(.,'^APERTEMENT$')">OUVERTEMENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estang(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^estang(\w*)$')">étang<xsl:value-of select="substring-after(.,'estang')"/></xsl:if>
       <xsl:if test="matches(.,'^Estang(\w*)$')">Étang<xsl:value-of select="substring-after(.,'Estang')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTANG(\w*)$')">ÉTANG<xsl:value-of select="substring-after(.,'ESTANG')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^remply(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[rR]emply(\w*)$')"><xsl:value-of select="substring-before(.,'emply')"/>empli<xsl:value-of select="substring-after(.,'emply')"/></xsl:if>
       <xsl:if test="matches(.,'^REMPLY(\w*)$')">REMPLI<xsl:value-of select="substring-after(.,'REMPLY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^clerement(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]lerement(\w*)$')"><xsl:value-of select="substring-before(.,'lerement')"/>lairement<xsl:value-of select="substring-after(.,'lerement')"/></xsl:if>
       <xsl:if test="matches(.,'^CLEREMENT(\w*)$')">CLAIREMENT<xsl:value-of select="substring-after(.,'CLEREMENT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^masle(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]asle(\w*)$')"><xsl:value-of select="substring-before(.,'asle')"/>âle<xsl:value-of select="substring-after(.,'asle')"/></xsl:if>
       <xsl:if test="matches(.,'^MASLE(\w*)$')">MÂLE<xsl:value-of select="substring-after(.,'masle')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^allegue(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]llegue(\w*)$')"><xsl:value-of select="substring-before(.,'llegue')"/>llègue<xsl:value-of select="substring-after(.,'llegue')"/></xsl:if>
       <xsl:if test="matches(.,'^ALLEGUE(\w*)$')">ALLÈGUE<xsl:value-of select="substring-after(.,'ALLEGUE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^donnee(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]onnee(\w*)$')"><xsl:value-of select="substring-before(.,'onnee')"/>onnée<xsl:value-of select="substring-after(.,'onnee')"/></xsl:if>
       <xsl:if test="matches(.,'^DONNEE(\w*)$')">DONNÉE<xsl:value-of select="substring-after(.,'DONNEE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^egal(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^egal(\w*)$')">égal<xsl:value-of select="substring-after(.,'egal')"/></xsl:if>
       <xsl:if test="matches(.,'^Egal(\w*)$')">Égal<xsl:value-of select="substring-after(.,'Egal')"/></xsl:if>
       <xsl:if test="matches(.,'^EGAL(\w*)$')">ÉGAL<xsl:value-of select="substring-after(.,'EGAL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^gregeois(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]regeois(\w*)$')"><xsl:value-of select="substring-before(.,'regeois')"/>régeois<xsl:value-of select="substring-after(.,'regeois')"/></xsl:if>
       <xsl:if test="matches(.,'^GREGEOIS(\w*)$')">GRÉGEOIS<xsl:value-of select="substring-after(.,'GREGEOIS')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^etern(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^etern(\w*)$')">étern<xsl:value-of select="substring-after(.,'etern')"/></xsl:if>
       <xsl:if test="matches(.,'^Etern(\w*)$')">Étern<xsl:value-of select="substring-after(.,'Etern')"/></xsl:if>
       <xsl:if test="matches(.,'^ETERN(\w*)$')">ÉTERN<xsl:value-of select="substring-after(.,'ETERN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^siecle(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]iecle(\w*)$')"><xsl:value-of select="substring-before(.,'iecle')"/>iècle<xsl:value-of select="substring-after(.,'iecle')"/></xsl:if>
       <xsl:if test="matches(.,'^SIECLE(\w*)$')">SIÈCLE<xsl:value-of select="substring-after(.,'SIECLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^poulce(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]oulce(\w*)$')"><xsl:value-of select="substring-before(.,'oulce')"/>ouce<xsl:value-of select="substring-after(.,'oulce')"/></xsl:if>
       <xsl:if test="matches(.,'^POULCE(\w*)$')">POUCE<xsl:value-of select="substring-after(.,'POULCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fenestre(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]enestre(\w*)$')"><xsl:value-of select="substring-before(.,'enestre')"/>enêtre<xsl:value-of select="substring-after(.,'enestre')"/></xsl:if>
       <xsl:if test="matches(.,'^FENESTRE(\w*)$')">FENÊTRE<xsl:value-of select="substring-after(.,'FENESTRE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^tempeste(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]empeste(\w*)$')"><xsl:value-of select="substring-before(.,'empeste')"/>empête<xsl:value-of select="substring-after(.,'empeste')"/></xsl:if>
       <xsl:if test="matches(.,'^TEMPESTE(\w*)$')">TEMPÊTE<xsl:value-of select="substring-after(.,'TEMPESTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^depart(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]epart(\w*)$')"><xsl:value-of select="substring-before(.,'epart')"/>épart<xsl:value-of select="substring-after(.,'epart')"/></xsl:if>
       <xsl:if test="matches(.,'^DEPART(\w*)$')">DÉPART<xsl:value-of select="substring-after(.,'DEPART')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^creature(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]reature(\w*)$')"><xsl:value-of select="substring-before(.,'reature')"/>réature<xsl:value-of select="substring-after(.,'reature')"/></xsl:if>
       <xsl:if test="matches(.,'^CREATURE(\w*)$')">CRÉATURE<xsl:value-of select="substring-after(.,'CREATURE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^braz$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]raz$')"><xsl:value-of select="substring-before(.,'raz')"/>ras</xsl:if>
       <xsl:if test="matches(.,'^BRAZ$')">BRAS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^soupper(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]oupper(\w*)$')"><xsl:value-of select="substring-before(.,'oupper')"/>ouper<xsl:value-of select="substring-after(.,'oupper')"/></xsl:if>
       <xsl:if test="matches(.,'^SOUPPER(\w*)$')">SOUPER<xsl:value-of select="substring-after(.,'SOUPPER')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^opposite$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]pposite$')"><xsl:value-of select="substring-before(.,'pposite')"/>opposé</xsl:if>
       <xsl:if test="matches(.,'^OPPOSITE$')">OPPOSÉ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^facent$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]acent$')"><xsl:value-of select="substring-before(.,'acent')"/>assent</xsl:if>
       <xsl:if test="matches(.,'^FACENT$')">FASSENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^leger(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]eger(\w*)$')"><xsl:value-of select="substring-before(.,'eger')"/>éger<xsl:value-of select="substring-after(.,'eger')"/></xsl:if>
       <xsl:if test="matches(.,'^LEGER(\w*)$')">LÉGER<xsl:value-of select="substring-after(.,'LEGER')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^eaue$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[eE]aue$')"><xsl:value-of select="substring-before(.,'aue')"/>au</xsl:if>
       <xsl:if test="matches(.,'^EAUE$')">EAU</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^zele(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Zz]ele(\w*)$')"><xsl:value-of select="substring-before(.,'ele')"/>èle<xsl:value-of select="substring-after(.,'ele')"/></xsl:if>
       <xsl:if test="matches(.,'^ZELE(\w*)$')">ZÈLE<xsl:value-of select="substring-after(.,'ZELE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(s|ntr|pl|cr)ainct(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(s|ntr|pl|cr|Pl|Cr|S)ainct(\w*)$')"><xsl:value-of select="substring-before(.,'ainct')"/>aint<xsl:value-of select="substring-after(.,'ainct')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(S|NTR|PL|CR)AINCT(\w*)$')"><xsl:value-of select="substring-before(.,'AINCT')"/>AINT<xsl:value-of select="substring-after(.,'AINCT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^obeyr$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]beyr$')"><xsl:value-of select="substring-before(.,'beyr')"/>béir</xsl:if>
       <xsl:if test="matches(.,'^OBEYR$')">OBÉIR</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^cercher$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ercher$')"><xsl:value-of select="substring-before(.,'ercher')"/>hercher</xsl:if>
       <xsl:if test="matches(.,'^CERCHER$')">CHERCHER</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^renommee(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]enommee(\w*)$')"><xsl:value-of select="substring-before(.,'enommee')"/>enommée<xsl:value-of select="substring-after(.,'enommee')"/></xsl:if>
       <xsl:if test="matches(.,'^RENOMMEE(\w*)$')">RENOMMÉE<xsl:value-of select="substring-after(.,'RENOMMEE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^arrivee(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]rrivee(\w*)$')"><xsl:value-of select="substring-before(.,'rrivee')"/>rrivée<xsl:value-of select="substring-after(.,'rrivee')"/></xsl:if>
       <xsl:if test="matches(.,'^ARRIVEE(\w*)$')">ARRIVÉE<xsl:value-of select="substring-after(.,'ARRIVEE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^requerir$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]equerir$')"><xsl:value-of select="substring-before(.,'equerir')"/>equérir</xsl:if>
       <xsl:if test="matches(.,'^REQUERIR$')">REQUÉRIR</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ceremonie(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]eremonie(\w*)$')"><xsl:value-of select="substring-before(.,'eremonie')"/>érémonie<xsl:value-of select="substring-after(.,'eremonie')"/></xsl:if>
       <xsl:if test="matches(.,'^CEREMONIE(\w*)$')">CÉRÉMONIE<xsl:value-of select="substring-after(.,'CEREMONIE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fiere(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]iere(\w*)$')"><xsl:value-of select="substring-before(.,'iere')"/>ière<xsl:value-of select="substring-after(.,'iere')"/></xsl:if>
       <xsl:if test="matches(.,'^FIERE(\w*)$')">FIÈRE<xsl:value-of select="substring-after(.,'FIERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^tetin(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]etin(\w*)$')"><xsl:value-of select="substring-before(.,'etin')"/>étin<xsl:value-of select="substring-after(.,'etin')"/></xsl:if>
       <xsl:if test="matches(.,'^TETIN(\w*)$')">TÉTIN<xsl:value-of select="substring-after(.,'TETIN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^mons$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ons$')"><xsl:value-of select="substring-before(.,'ons')"/>onts</xsl:if>
       <xsl:if test="matches(.,'^MONS$')">MONTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^sepulchr(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]epulchr(\w*)$')"><xsl:value-of select="substring-before(.,'epulchr')"/>épulchr<xsl:value-of select="substring-after(.,'epulchr')"/></xsl:if>
       <xsl:if test="matches(.,'^SEPULCHR(\w*)$')">SÉPULCHR<xsl:value-of select="substring-after(.,'SEPULCHR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estiez$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^estiez$')">étiez</xsl:if>
       <xsl:if test="matches(.,'^Estiez$')">Étiez</xsl:if>
       <xsl:if test="matches(.,'^ESTIEZ$')">ÉTIEZ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ancor$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^ancor$')">encore</xsl:if>
       <xsl:if test="matches(.,'^Ancor$')">Encore</xsl:if>
       <xsl:if test="matches(.,'^ANCOR$')">ENCORE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^cuyde$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^[Cc]uyde$')"><xsl:value-of select="substring-before(.,'uyde')"/>uide</xsl:if>
       <xsl:if test="matches(.,'^CUYDE$')">CUIDE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^prez$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]rez$')"><xsl:value-of select="substring-before(.,'rez')"/>rés</xsl:if>
       <xsl:if test="matches(.,'^PREZ$')">PRÉS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^esbahy(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^esbahy(\w*)$')">ébahi<xsl:value-of select="substring-after(.,'esbahy')"/></xsl:if>
       <xsl:if test="matches(.,'^Esbahy(\w*)$')">Ébahi<xsl:value-of select="substring-after(.,'Esbahy')"/></xsl:if>
       <xsl:if test="matches(.,'^ESBAHY(\w*)$')">ÉBAHI<xsl:value-of select="substring-after(.,'ESBAHY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^apris$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]pris$')"><xsl:value-of select="substring-before(.,'pris')"/>ppris</xsl:if>
       <xsl:if test="matches(.,'^APRIS$')">APPRIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^presompt(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]resompt(\w*)$')"><xsl:value-of select="substring-before(.,'resompt')"/>résompt<xsl:value-of select="substring-after(.,'resompt')"/></xsl:if>
       <xsl:if test="matches(.,'^PRESOMPT(\w*)$')">PRÉSOMPT<xsl:value-of select="substring-after(.,'PRESOMPT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^seurs$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]eurs$')"><xsl:value-of select="substring-before(.,'eurs')"/>oeurs</xsl:if>
       <xsl:if test="matches(.,'^SEURS$')">SOEURS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ingenieu(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ii]ngenieu(\w*)$')"><xsl:value-of select="substring-before(.,'ngenieu')"/>ngénieu<xsl:value-of select="substring-after(.,'ngenieu')"/></xsl:if>
       <xsl:if test="matches(.,'^INGENIEU(\w*)$')">INGÉNIEU<xsl:value-of select="substring-after(.,'INGENIEU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^emblem(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]mblem(\w*)$')"><xsl:value-of select="substring-before(.,'mblem')"/>mblèm<xsl:value-of select="substring-after(.,'mblem')"/></xsl:if>
       <xsl:if test="matches(.,'^EMBLEM(\w*)$')">EMBLÈM<xsl:value-of select="substring-after(.,'EMBLEM')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^avient$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]vient$')"><xsl:value-of select="substring-before(.,'vient')"/>dvient</xsl:if>
       <xsl:if test="matches(.,'^AVIENT$')">ADVIENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^colomne(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]olomne(\w*)$')"><xsl:value-of select="substring-before(.,'olomne')"/>olonne<xsl:value-of select="substring-after(.,'olomne')"/></xsl:if>
       <xsl:if test="matches(.,'^COLOMNE(\w*)$')">COLONNE<xsl:value-of select="substring-after(.,'COLOMNE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^execut(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^execut(\w*)$')">exécut<xsl:value-of select="substring-after(.,'execut')"/></xsl:if>
       <xsl:if test="matches(.,'^Execut(\w*)$')">Exécut<xsl:value-of select="substring-after(.,'Execut')"/></xsl:if>
       <xsl:if test="matches(.,'^EXECUT(\w*)$')">EXÉCUT<xsl:value-of select="substring-after(.,'EXECUT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^peniten(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^peniten(\w*)$')">péniten<xsl:value-of select="substring-after(.,'peniten')"/></xsl:if>
       <xsl:if test="matches(.,'^PENITEN(\w*)$')">PÉNITEN<xsl:value-of select="substring-after(.,'PENITEN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ecri(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^ecri(\w*)$')">écri<xsl:value-of select="substring-after(.,'ecri')"/></xsl:if>
       <xsl:if test="matches(.,'^ECRI(\w*)$')">ÉCRI<xsl:value-of select="substring-after(.,'ECRI')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^bous$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]ous$')"><xsl:value-of select="substring-before(.,'ous')"/>outs</xsl:if>
       <xsl:if test="matches(.,'^BOUS$')">BOUTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^greque(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]reque(\w*)$')"><xsl:value-of select="substring-before(.,'reque')"/>recque<xsl:value-of select="substring-after(.,'reque')"/></xsl:if>
       <xsl:if test="matches(.,'^GREQUE(\w*)$')">GRECQUE<xsl:value-of select="substring-after(.,'GREQUE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^defaut(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]efaut(\w*)$')"><xsl:value-of select="substring-before(.,'efaut')"/>éfaut<xsl:value-of select="substring-after(.,'efaut')"/></xsl:if>
       <xsl:if test="matches(.,'^DEFAUT(\w*)$')">DÉFAUT<xsl:value-of select="substring-after(.,'DEFAUT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ditte(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]itte(\w*)$')"><xsl:value-of select="substring-before(.,'itte')"/>ite<xsl:value-of select="substring-after(.,'itte')"/></xsl:if>
       <xsl:if test="matches(.,'^DITTE(\w*)$')">DITE<xsl:value-of select="substring-after(.,'DITTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^accens$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ccens$')"><xsl:value-of select="substring-before(.,'ccens')"/>ccents</xsl:if>
       <xsl:if test="matches(.,'^ACCENS$')">ACCENTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^hayne(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]ayne(\w*)$')"><xsl:value-of select="substring-before(.,'ayne')"/>aine<xsl:value-of select="substring-after(.,'ayne')"/></xsl:if>
       <xsl:if test="matches(.,'^HAYNE(\w*)$')">HAINE<xsl:value-of select="substring-after(.,'HAYNE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^jay(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Jj]ay(\w*)$')"><xsl:value-of select="substring-before(.,'ay')"/>'ai<xsl:value-of select="substring-after(.,'ay')"/></xsl:if>
       <xsl:if test="matches(.,'^JAY(\w*)$')">J'AI<xsl:value-of select="substring-after(.,'JAY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^deseing(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]eseing(\w*)$')"><xsl:value-of select="substring-before(.,'eseing')"/>essin<xsl:value-of select="substring-after(.,'eseing')"/></xsl:if>
       <xsl:if test="matches(.,'^DESEING(\w*)$')">DESSEIN<xsl:value-of select="substring-after(.,'DESEING')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^umbr(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^umbr(\w*)$')">ombr<xsl:value-of select="substring-after(.,'umbr')"/></xsl:if>
       <xsl:if test="matches(.,'^Umbr(\w*)$')">Ombr<xsl:value-of select="substring-after(.,'Umbr')"/></xsl:if>
       <xsl:if test="matches(.,'^UMBR(\w*)$')">OMBR<xsl:value-of select="substring-after(.,'UMBR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pitie(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^pitie(\w*)$')"><xsl:value-of select="substring-before(.,'pitie')"/>pitié<xsl:value-of select="substring-after(.,'pitie')"/></xsl:if>
       <xsl:if test="matches(.,'^PITIE(\w*)$')">PITIÉ<xsl:value-of select="substring-after(.,'PITIE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^region(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]egion(\w*)$')"><xsl:value-of select="substring-before(.,'egion')"/>égion<xsl:value-of select="substring-after(.,'egion')"/></xsl:if>
       <xsl:if test="matches(.,'^REGION(\w*)$')">RÉGION<xsl:value-of select="substring-after(.,'REGION')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^desert(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esert(\w*)$')"><xsl:value-of select="substring-before(.,'esert')"/>ésert<xsl:value-of select="substring-after(.,'esert')"/></xsl:if>
       <xsl:if test="matches(.,'^DESERT(\w*)$')">DÉSERT<xsl:value-of select="substring-after(.,'DESERT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estoille(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^estoille(\w*)$')">étoile<xsl:value-of select="substring-after(.,'estoille')"/></xsl:if>
       <xsl:if test="matches(.,'^Estoille(\w*)$')">Étoile<xsl:value-of select="substring-after(.,'Estoille')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTOILLE(\w*)$')">ÉSTOILE<xsl:value-of select="substring-after(.,'ESTOILLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^toille(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]oille(\w*)$')"><xsl:value-of select="substring-before(.,'oille')"/>oile<xsl:value-of select="substring-after(.,'oille')"/></xsl:if>
       <xsl:if test="matches(.,'^TOILLE(\w*)$')">TOILE<xsl:value-of select="substring-after(.,'TOILLE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^evide(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^evide(\w*)$')">évide<xsl:value-of select="substring-after(.,'evide')"/></xsl:if>
       <xsl:if test="matches(.,'^Evide(\w*)$')">Évide<xsl:value-of select="substring-after(.,'Evide')"/></xsl:if>
       <xsl:if test="matches(.,'^EVIDE(\w*)$')">ÉVIDE<xsl:value-of select="substring-after(.,'EVIDE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^Ameriq$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]meriq$')"><xsl:value-of select="substring-before(.,'meriq')"/>mérique</xsl:if>
       <xsl:if test="matches(.,'^AMERIQ$')">AMÉRIQUE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^recit(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]ecit(\w*)$')"><xsl:value-of select="substring-before(.,'ecit')"/>écit<xsl:value-of select="substring-after(.,'ecit')"/></xsl:if>
       <xsl:if test="matches(.,'^RECIT(\w*)$')">RÉCIT<xsl:value-of select="substring-after(.,'RECIT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^moings$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]oings$')"><xsl:value-of select="substring-before(.,'oings')"/>oins</xsl:if>
       <xsl:if test="matches(.,'^MOINGS$')">MOINS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^commant$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ommant$')"><xsl:value-of select="substring-before(.,'ommant')"/>omment</xsl:if>
       <xsl:if test="matches(.,'^COMMANT$')">COMMENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^denote(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]enote(\w*)$')"><xsl:value-of select="substring-before(.,'enote')"/>énote<xsl:value-of select="substring-after(.,'enote')"/></xsl:if>
       <xsl:if test="matches(.,'^DENOTE(\w*)$')">DÉNOTE<xsl:value-of select="substring-after(.,'DENOTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^peus$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]eus$')"><xsl:value-of select="substring-before(.,'eus')"/>eux</xsl:if>
       <xsl:if test="matches(.,'^PEUS$')">PEUX</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^heureus$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]eureus$')"><xsl:value-of select="substring-before(.,'eureus')"/>eureux</xsl:if>
       <xsl:if test="matches(.,'^HEUREUS$')">HEUREUX</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fons$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ons$')"><xsl:value-of select="substring-before(.,'ons')"/>ond</xsl:if>
       <xsl:if test="matches(.,'^FONS$')">FOND</xsl:if></reg></choice>
            </xsl:when>
<!--CONJUGAISON-->
<xsl:when test="matches(.,'^voyt$', 'i')">
              <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^(v|V)oyt$')"><xsl:value-of select="substring-before(.,'oyt')"/>oit</xsl:if>
   <xsl:if test="matches(.,'^VOYT$')">VOIT</xsl:if></reg></choice>
           </xsl:when>
<xsl:when test="matches(.,'^(\w+)(n|l)oyt$', 'i')">
              <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^(\w+)(n|l)oyt$')"><xsl:value-of select="substring-before(.,'oyt')"/>ait</xsl:if>
    <xsl:if test="matches(.,'^(\w+)(N|L)OYT$')"><xsl:value-of select="substring-before(.,'OYT')"/>AIT</xsl:if></reg></choice>
           </xsl:when>
<xsl:when test="matches(.,'^(\w+)(n|l)oyent$', 'i')">
              <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^(\w+)(n|l)oyent$')"><xsl:value-of select="substring-before(.,'oyent')"/>aient</xsl:if>
    <xsl:if test="matches(.,'^(\w+)(N|L)OYENT$')"><xsl:value-of select="substring-before(.,'OYENT')"/>AIENT</xsl:if></reg></choice>
           </xsl:when>
<xsl:when test="matches(.,'^(\w+)(n|l)oi(t|s)$', 'i')">
              <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^(\w+)(n|l)oi(t|s)$')"><xsl:value-of select="substring-before(.,'oi')"/>ai<xsl:value-of select="substring-after(.,'oi')"/></xsl:if>
    <xsl:if test="matches(.,'^(\w+)(N|L)OI(T|S)$')"><xsl:value-of select="substring-before(.,'OI')"/>AI<xsl:value-of select="substring-after(.,'OI')"/></xsl:if></reg></choice>
           </xsl:when>
<xsl:when test="matches(.,'^(\w+)(n|l)oient$', 'i')">
              <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^(\w+)(n|l)oient$')"><xsl:value-of select="substring-before(.,'oient')"/>aient</xsl:if>
    <xsl:if test="matches(.,'^(\w+)(N|L)OIENT$')"><xsl:value-of select="substring-before(.,'OIENT')"/>AIENT</xsl:if></reg></choice>
           </xsl:when>
<xsl:when test="matches(.,'^(\w+)ploye$', 'i')">
              <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^(\w+)ploye$')"><xsl:value-of select="substring-before(.,'ploye')"/>ploie</xsl:if>
    <xsl:if test="matches(.,'^(\w+)PLOYE$')"><xsl:value-of select="substring-before(.,'PLOYE')"/>PLOIE</xsl:if></reg></choice>
           </xsl:when>
<xsl:when test="matches(.,'^vouloye$', 'i')">
              <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^(v|V)ouloye$')"><xsl:value-of select="substring-before(.,'ouloye')"/>oulais</xsl:if>
    <xsl:if test="matches(.,'^VOULOYE$')"><xsl:value-of select="substring-before(.,'VOULOYE')"/>OULAIS</xsl:if></reg></choice>
           </xsl:when>
<xsl:when test="matches(.,'^ayent$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)yent$')"><xsl:value-of select="substring-before(.,'yent')"/>ient</xsl:if>
       <xsl:if test="matches(.,'^AYENT$')">AIENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[^y]eray$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^y]eray$')"><xsl:value-of select="substring-before(.,'eray')"/>erai</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^Y]ERAY$')"><xsl:value-of select="substring-before(.,'ERAY')"/>ERAI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)yeray$', 'i')"><!--payeray-->
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)yeray$')"><xsl:value-of select="substring-before(.,'yeray')"/>ierai</xsl:if>
       <xsl:if test="matches(.,'^(\w+)YERAY$')"><xsl:value-of select="substring-before(.,'YERAY')"/>IERAI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^appoy(\w+)', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)ppoy(\w+)$')"><xsl:value-of select="substring-before(.,'ppoy')"/>ppuy<xsl:value-of select="substring-after(.,'ppoy')"/></xsl:if>
       <xsl:if test="matches(.,'^APPOY(\w+)$')">APPUY<xsl:value-of select="substring-after(.,'APPOY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)tost$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(t|T)ost$')"><xsl:value-of select="substring-before(.,'ost')"/>ôt</xsl:if>
       <xsl:if test="matches(.,'^(\w*)TOST$')"><xsl:value-of select="substring-before(.,'TOST')"/>ÔT</xsl:if></reg></choice>
            </xsl:when> 
<xsl:when test="matches(.,'^h?ost[^ir](\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]?ost[^ir](\w+)$')"><xsl:value-of select="substring-before(.,'ost')"/>ôt<xsl:value-of select="substring-after(.,'ost')"/></xsl:if>
       <xsl:if test="matches(.,'^H?OST[^IR](\w+)$')"><xsl:value-of select="substring-before(.,'OST')"/>ÔT<xsl:value-of select="substring-after(.,'OST')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^goust(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(G|g)oust(\w*)$')"><xsl:value-of select="substring-before(.,'oust')"/>oût<xsl:value-of select="substring-after(.,'oust')"/></xsl:if>
       <xsl:if test="matches(.,'^GOUST(\w*)$')">GOÛT<xsl:value-of select="substring-after(.,'GOUST')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^feist$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(f|F)eist$')"><xsl:value-of select="substring-before(.,'eist')"/>ît</xsl:if>
       <xsl:if test="matches(.,'^FEIST$')">FÎT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^feust$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(f|F)eust$')"><xsl:value-of select="substring-before(.,'eust')"/>ut</xsl:if>
       <xsl:if test="matches(.,'^FEUST$')">FUT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^feut$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(f|F)eut$')"><xsl:value-of select="substring-before(.,'eut')"/>ut</xsl:if>
       <xsl:if test="matches(.,'^FEUT$')">FUT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^afestoit$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)festoit$')"><xsl:value-of select="substring-before(.,'festoit')"/>ffûtait</xsl:if>
       <xsl:if test="matches(.,'^AFESTOIT$')">AFFÛTAIT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^a(p|c)rest(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)(p|c)rest(\w+)$')"><xsl:value-of select="substring-before(.,'rest')"/>rêt<xsl:value-of select="substring-after(.,'rest')"/></xsl:if>
       <xsl:if test="matches(.,'^A(P|C)REST(\w+)$')"><xsl:value-of select="substring-before(.,'REST')"/>RÊT<xsl:value-of select="substring-after(.,'REST')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^batee(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(B|b)atee(\w*)$')"><xsl:value-of select="substring-before(.,'atee')"/>âtée<xsl:value-of select="substring-after(.,'atee')"/></xsl:if>
       <xsl:if test="matches(.,'^BATEE(\w*)$')">BÂTÉE<xsl:value-of select="substring-after(.,'BASTEE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)(l|t)ast$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)(l|t)ast$')"><xsl:value-of select="substring-before(.,'ast')"/>ât</xsl:if>
       <xsl:if test="matches(.,'^(\w+)(L|T)AST$')"><xsl:value-of select="substring-before(.,'AST')"/>ÂT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^a?basta(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)?(B|b)asta(\w*)$')"><xsl:value-of select="substring-before(.,'asta')"/>âta<xsl:value-of select="substring-after(.,'asta')"/></xsl:if>
       <xsl:if test="matches(.,'^A?BASTA(\w*)$')"><xsl:value-of select="substring-before(.,'BASTA')"/>BÂTA<xsl:value-of select="substring-after(.,'BASTA')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^baste(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^(B|b)aste(\w*)$')"><xsl:value-of select="substring-before(.,'aste')"/>ate<xsl:value-of select="substring-after(.,'aste')"/></xsl:if>
         <xsl:if test="matches(.,'^BASTE(\w*)$')">BATE<xsl:value-of select="substring-after(.,'BASTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(d|m)ist$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(d|m|D|M)ist$')"><xsl:value-of select="substring-before(.,'ist')"/>it</xsl:if>
       <xsl:if test="matches(.,'^(\w*)(D|M)IST$')"><xsl:value-of select="substring-before(.,'IST')"/>IT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aisne(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)isne(\w*)$')"><xsl:value-of select="substring-before(.,'isne')"/>iné<xsl:value-of select="substring-after(.,'isne')"/></xsl:if>
       <xsl:if test="matches(.,'^AISNE(\w*)$')">AINÉ<xsl:value-of select="substring-after(.,'AISNE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^asn(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^asn(\w*)$')">ân<xsl:value-of select="substring-after(.,'asn')"/></xsl:if>
       <xsl:if test="matches(.,'^Asn(\w*)$')">Ân<xsl:value-of select="substring-after(.,'Asn')"/></xsl:if>
       <xsl:if test="matches(.,'^ASN(\w*)$')">ÂN<xsl:value-of select="substring-after(.,'ASN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[(d|ha|u)]isne(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[(d|D|ha|Ha|u)]isne(\w*)$')"><xsl:value-of select="substring-before(.,'isne')"/>îne<xsl:value-of select="substring-after(.,'isne')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)[(D|HA|U)]ISNE(\w*)$')"><xsl:value-of select="substring-before(.,'ISNE')"/>ÎNE<xsl:value-of select="substring-after(.,'ISNE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(d|dor|m)esn(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(d|dor|m|D|Dor|M)esn(\w+)$')"><xsl:value-of select="substring-before(.,'esn')"/>én<xsl:value-of select="substring-after(.,'esn')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(D|DOR|M)ESN(\w+)$')"><xsl:value-of select="substring-before(.,'ESN')"/>ÉN<xsl:value-of select="substring-after(.,'ESN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(r|ch)esn(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(r|ch|R|CH)esn(\w+)$')"><xsl:value-of select="substring-before(.,'esn')"/>ên<xsl:value-of select="substring-after(.,'esn')"/></xsl:if>
       <xsl:if test="matches(.,'^(R|CH)ESN(\w+)$')"><xsl:value-of select="substring-before(.,'ESN')"/>ÊN<xsl:value-of select="substring-after(.,'ESN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^vesn(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(V|v)esn(\w*)$')"><xsl:value-of select="substring-before(.,'esn')"/>en<xsl:value-of select="substring-after(.,'esn')"/></xsl:if>
       <xsl:if test="matches(.,'^VESN(\w*)$')">VEN<xsl:value-of select="substring-after(.,'VESN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aprint$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)print$')"><xsl:value-of select="substring-before(.,'print')"/>pprît</xsl:if>
       <xsl:if test="matches(.,'^APRINT$')">APPRÎT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)print$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(p|P)rint$')"><xsl:value-of select="substring-before(.,'rint')"/>rît</xsl:if>
       <xsl:if test="matches(.,'^(\w*)PRINT$')"><xsl:value-of select="substring-before(.,'PRINT')"/>PRÎT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)prinse$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(p|P)rinse$')"><xsl:value-of select="substring-before(.,'rinse')"/>rise</xsl:if>
       <xsl:if test="matches(.,'^(\w*)PRINSE$')"><xsl:value-of select="substring-before(.,'PRINSE')"/>PRISE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[^(m|prouv|pl)]eurent$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^(m|prouv|pl)]eurent$')"><xsl:value-of select="substring-before(.,'eurent')"/>urent</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^(M|PROUV|PL)]EURENT$')"><xsl:value-of select="substring-before(.,'EURENT')"/>URENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[^p]leurent$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^p](l|L)eurent$')"><xsl:value-of select="substring-before(.,'eurent')"/>urent</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^p]LEURENT$')"><xsl:value-of select="substring-before(.,'LEURENT')"/>LURENT</xsl:if></reg></choice>
            </xsl:when>      
<xsl:when test="matches(.,'^(dep)?leurent$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(dep|Dep)?(l|L)eurent$')"><xsl:value-of select="substring-before(.,'eurent')"/>urent</xsl:if>
       <xsl:if test="matches(.,'^(DEP)?LEURENT$')"><xsl:value-of select="substring-before(.,'LEURENT')"/>LURENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^prouveurent$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(p|P)rouveurent$')"><xsl:value-of select="substring-before(.,'rouveurent')"/>rouvèrent</xsl:if>
       <xsl:if test="matches(.,'^PROUVEURENT$')">PROUVÈRENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(m|l|[^n]t|r|p)asm(es|ans|oit)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(m|l|[^n]t|r|p)asm(es|ans|oit)$')"><xsl:value-of select="substring-before(.,'asm')"/>âm<xsl:value-of select="substring-after(.,'asm')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(M|L|[^N]T|R|P)ASM(ES|ANS|OIT)$')"><xsl:value-of select="substring-before(.,'ASM')"/>ÂM<xsl:value-of select="substring-after(.,'ASM')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(tr|m)esme(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(tr|m|Tr|M)esme(\w*)$')"><xsl:value-of select="substring-before(.,'esme')"/>ême<xsl:value-of select="substring-after(.,'esme')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(TR|M)ESME(\w*)$')"><xsl:value-of select="substring-before(.,'ESME')"/>ÊME<xsl:value-of select="substring-after(.,'ESME')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(omp|sp|nt|et|es?s|ur|gr|enr|yvr|enfr|char|g)aig[^r](\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(omp|sp|nt|et|es?s|ur|gr|enr|yvr|enfr|char|g|Es?s|ur|Gr|Enr|Yvr|Enfr|Char|G)aig[^r](\w*)$')"><xsl:value-of select="substring-before(.,'aig')"/>ag<xsl:value-of select="substring-after(.,'aig')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(OMP|SP|NT|ET|ES?S|UR|GR|ENR|YVR|ENFR|CHAR|G)AIG[^R](\w*)$')"><xsl:value-of select="substring-before(.,'AIG')"/>AG<xsl:value-of select="substring-after(.,'AIG')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(omp|sp|nt|et|es?s|ur|gr|enr|yvr|enfr|char|g)oig[^r](\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(omp|sp|nt|et|es?s|ur|gr|enr|yvr|enfr|char|g|Es?s|ur|Gr|Enr|Yvr|Enfr|Char|G)oig[^r](\w*)$')"><xsl:value-of select="substring-before(.,'oig')"/>og<xsl:value-of select="substring-after(.,'oig')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(OMP|SP|NT|ET|ES?S|UR|GR|ENR|YVR|ENFR|CHAR|G)OIG[^R](\w*)$')"><xsl:value-of select="substring-before(.,'OIG')"/>OG<xsl:value-of select="substring-after(.,'OIG')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(esl|p|j)ongn(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(esl|p|j|Esl|P|J)ongn(\w+)$')"><xsl:value-of select="substring-before(.,'ongn')"/>oign<xsl:value-of select="substring-after(.,'ongn')"/></xsl:if>
       <xsl:if test="matches(.,'^(ESL|P|J)ONGN(\w+)$')"><xsl:value-of select="substring-before(.,'ONGN')"/>OIGN<xsl:value-of select="substring-after(.,'ONGN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[^lpj]ongn(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^lpjPJL]ongn(\w+)$')"><xsl:value-of select="substring-before(.,'ongn')"/>onn<xsl:value-of select="substring-after(.,'ongn')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^LPJ]ONGN(\w+)$')"><xsl:value-of select="substring-before(.,'ONGN')"/>ONN<xsl:value-of select="substring-after(.,'ONGN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)rengea$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(R|r)engea$')"><xsl:value-of select="substring-before(.,'engea')"/>angea</xsl:if>
       <xsl:if test="matches(.,'^(\w*)RENGEA$')"><xsl:value-of select="substring-before(.,'RENGEA')"/>RANGEA</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)renge(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(R|r)enge(\w*)$')"><xsl:value-of select="substring-before(.,'enge')"/>ange<xsl:value-of select="substring-after(.,'enge')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)RENGE(\w*)$')"><xsl:value-of select="substring-before(.,'RENGE')"/>RANGE<xsl:value-of select="substring-after(.,'RENGE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)veoir$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(V|v)eoir$')"><xsl:value-of select="substring-before(.,'eoir')"/>oir</xsl:if>
       <xsl:if test="matches(.,'^(\w*)VEOIR$')"><xsl:value-of select="substring-before(.,'VEOIR')"/>VOIR</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^veu$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(v|V)eu$')"><xsl:value-of select="substring-before(.,'eu')"/>u</xsl:if>
       <xsl:if test="matches(.,'^VEU$')">VU</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^deu$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(d|D)eu$')"><xsl:value-of select="substring-before(.,'deu')"/>dû</xsl:if>
       <xsl:if test="matches(.,'^DEU$')">DÛ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^void$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(v|V)oid$')"><xsl:value-of select="substring-before(.,'oid')"/>oit</xsl:if>
       <xsl:if test="matches(.,'^VOID$')">VOIT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)chea$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)chea$')"><xsl:value-of select="substring-before(.,'chea')"/>cha</xsl:if>
       <xsl:if test="matches(.,'^(\w+)CHEA$')"><xsl:value-of select="substring-before(.,'CHEA')"/>CHA</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)chea[ns](\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)chea[ns](\w*)$')"><xsl:value-of select="substring-before(.,'chea')"/>cha<xsl:value-of select="substring-after(.,'chea')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)CHEA[NS](\w*)$')"><xsl:value-of select="substring-before(.,'CHEA')"/>CHA<xsl:value-of select="substring-after(.,'CHEA')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)cea$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)cea$')"><xsl:value-of select="substring-before(.,'cea')"/>ça</xsl:if>
       <xsl:if test="matches(.,'^(\w+)CEA$')"><xsl:value-of select="substring-before(.,'CEA')"/>ÇA</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^achapt(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)chapt(\w+)$')"><xsl:value-of select="substring-before(.,'chapt')"/>chet<xsl:value-of select="substring-after(.,'chapt')"/></xsl:if>
       <xsl:if test="matches(.,'^ACHAPT(\w+)$')">ACHET<xsl:value-of select="substring-after(.,'ACHAPT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)ipte?s?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)ipte?s?$')"><xsl:value-of select="substring-before(.,'ipt')"/>it<xsl:value-of select="substring-after(.,'ipt')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w+)IPTE?S?$')"><xsl:value-of select="substring-before(.,'IPT')"/>IT<xsl:value-of select="substring-after(.,'IPT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)epv(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)epv(\w+)$')"><xsl:value-of select="substring-before(.,'epv')"/>ev<xsl:value-of select="substring-after(.,'epv')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)EPV(\w+)$')"><xsl:value-of select="substring-before(.,'EPV')"/>EV<xsl:value-of select="substring-after(.,'EPV')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)izer$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)izer$')"><xsl:value-of select="substring-before(.,'izer')"/>iser</xsl:if>
       <xsl:if test="matches(.,'^(\w+)IZER$')"><xsl:value-of select="substring-before(.,'IZER')"/>ISER</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^astrinct(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)strinct(\w*)$')"><xsl:value-of select="substring-before(.,'strinct')"/>streint<xsl:value-of select="substring-after(.,'strinct')"/></xsl:if>
       <xsl:if test="matches(.,'^ASTRINCT(\w*)$')">ASTREINT<xsl:value-of select="substring-after(.,'STRINCT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estrainct(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(E|e)strainct(\w*)$')"><xsl:value-of select="substring-before(.,'strainct')"/>treint<xsl:value-of select="substring-after(.,'strainct')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTRAINCT(\w*)$')">ETREINT<xsl:value-of select="substring-after(.,'STRAINCT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estainct(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(E|e)stainct(\w*)$')"><xsl:value-of select="substring-before(.,'stainct')"/>teint<xsl:value-of select="substring-after(.,'stainct')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTAINCT(\w*)$')">ETEINT<xsl:value-of select="substring-after(.,'STAINCT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(t|p|f|pr|fr|restr|astr)ainct(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(t|p|f|pr|fr|restr|astr|Restr|Astr|T|P|F)ainct(\w*)$')"><xsl:value-of select="substring-before(.,'ainct')"/>eint<xsl:value-of select="substring-after(.,'ainct')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(T|P|F|PR|FR|RESTR|ASTR)AINCT(\w*)$')"><xsl:value-of select="substring-before(.,'AINCT')"/>EINT<xsl:value-of select="substring-after(.,'AINCT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^vainct$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(V|v)ainct$')"><xsl:value-of select="substring-before(.,'ainct')"/>ainc</xsl:if>
       <xsl:if test="matches(.,'^VAINCT$')">VAINC</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)hay$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(h|H)ay$')"><xsl:value-of select="substring-before(.,'ay')"/>ais</xsl:if>
       <xsl:if test="matches(.,'^(\w*)HAY$')"><xsl:value-of select="substring-before(.,'HAY')"/>HAIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)preigne(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(p|P)reigne(\w*)$')"><xsl:value-of select="substring-before(.,'reigne')"/>renne<xsl:value-of select="substring-after(.,'reigne')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)PREIGNE(\w*)$')"><xsl:value-of select="substring-before(.,'PREIGNE')"/>PRENNE<xsl:value-of select="substring-after(.,'PREIGNE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^preignan(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(p|P)reignan(\w*)$')"><xsl:value-of select="substring-before(.,'reignan')"/>régnan<xsl:value-of select="substring-after(.,'reignan')"/></xsl:if>
       <xsl:if test="matches(.,'^PREIGNAN(\w*)$')">PRÉGNAN<xsl:value-of select="substring-after(.,'PREIGNAN')"/></xsl:if></reg></choice>
            </xsl:when>
            
            <!--RACINE-->
<xsl:when test="matches(.,'^faulce(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(F|f)aulce(\w*)$')"><xsl:value-of select="substring-before(.,'aulce')"/>ausse<xsl:value-of select="substring-after(.,'aulce')"/></xsl:if>
       <xsl:if test="matches(.,'^FAULCE(\w*)$')">FAUSSE<xsl:value-of select="substring-after(.,'FAULCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)aul[ct](\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(A|a)ul[ct](\w*)$')"><xsl:value-of select="substring-before(.,'ul')"/>u<xsl:value-of select="substring-after(.,'ul')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)AUL[CT](\w*)$')"><xsl:value-of select="substring-before(.,'AUL')"/>AU<xsl:value-of select="substring-after(.,'AUL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)tiltr(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(t|T)iltr(\w+)$')"><xsl:value-of select="substring-before(.,'iltr')"/>itr<xsl:value-of select="substring-after(.,'iltr')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)TILTR(\w+)$')"><xsl:value-of select="substring-before(.,'TILTR')"/>TITR<xsl:value-of select="substring-after(.,'TILTR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(fe|pe|spo)nce(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(fe|pe|spo|Pe)nce(\w*)$')"><xsl:value-of select="substring-before(.,'nce')"/>nse<xsl:value-of select="substring-after(.,'nce')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(FE|PE|SPO)NCE(\w*)$')"><xsl:value-of select="substring-before(.,'NCE')"/>NSE<xsl:value-of select="substring-after(.,'NCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^[rmd]esp[eor][^c](\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[rmdRMD]esp[eor][^c](\w*)$')"><xsl:value-of select="substring-before(.,'esp')"/>ép<xsl:value-of select="substring-after(.,'esp')"/></xsl:if>
       <xsl:if test="matches(.,'^[RMD]ESP[EOR][^C](\w*)$')"><xsl:value-of select="substring-before(.,'ESP')"/>ÉP<xsl:value-of select="substring-after(.,'ESP')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^desp[il](\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(d|D)esp[il](\w+)$')"><xsl:value-of select="substring-before(.,'esp')"/>ép<xsl:value-of select="substring-after(.,'esp')"/></xsl:if>
       <xsl:if test="matches(.,'^DESP[IL](\w+)$')">DÉP<xsl:value-of select="substring-after(.,'DESP')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^esp[ée]es?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
         <xsl:if test="matches(.,'^esp[ée]es?$')">ép<xsl:value-of select="substring-after(.,'esp')"/></xsl:if>
         <xsl:if test="matches(.,'^Esp[ée]es?$')">Ép<xsl:value-of select="substring-after(.,'Esp')"/></xsl:if>
         <xsl:if test="matches(.,'^ESP[ÉE]ES?$')">ÉP<xsl:value-of select="substring-after(.,'ESP')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^esv(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^esv(\w+)$')">év<xsl:value-of select="substring-after(.,'esv')"/></xsl:if>
       <xsl:if test="matches(.,'^Esv(\w+)$')">Év<xsl:value-of select="substring-after(.,'Esv')"/></xsl:if>
       <xsl:if test="matches(.,'^ESV(\w+)$')">ÉV<xsl:value-of select="substring-after(.,'ESV')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^desr(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(d|D)esr(\w+)$')"><xsl:value-of select="substring-before(.,'esr')"/>ér<xsl:value-of select="substring-after(.,'esr')"/></xsl:if>
       <xsl:if test="matches(.,'^DESR(\w+)$')">DÉR<xsl:value-of select="substring-after(.,'DESR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^souspeçon(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(s|S)ouspeçon(\w*)$')"><xsl:value-of select="substring-before(.,'ouspeçon')"/>oupçon<xsl:value-of select="substring-after(.,'ouspeçon')"/></xsl:if>
       <xsl:if test="matches(.,'^SOUSPEÇON(\w*)$')">SOUPÇON<xsl:value-of select="substring-after(.,'SOUSPEÇON')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^sousp(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(s|S)ousp(\w+)$')"><xsl:value-of select="substring-before(.,'ousp')"/>oup<xsl:value-of select="substring-after(.,'ousp')"/></xsl:if>
       <xsl:if test="matches(.,'^SOUSP(\w+)$')">SOUP<xsl:value-of select="substring-after(.,'SOUSP')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pluspart$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(p|P)luspart$')"><xsl:value-of select="substring-before(.,'luspart')"/>lupart<xsl:value-of select="substring-after(.,'luspart')"/></xsl:if>
       <xsl:if test="matches(.,'^PLUSPART(\w*)$')">PLUPART</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^d?esl(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(d|D)?esl(\w+)$')"><xsl:value-of select="substring-before(.,'esl')"/>él<xsl:value-of select="substring-after(.,'esl')"/></xsl:if>
       <xsl:if test="matches(.,'^Esl(\w+)$')">Él<xsl:value-of select="substring-after(.,'Esl')"/></xsl:if>
       <xsl:if test="matches(.,'^D?ESL(\w+)$')"><xsl:value-of select="substring-before(.,'ESL')"/>ÉL<xsl:value-of select="substring-after(.,'ESL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^freslon(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(f|F)reslon(\w+)$')"><xsl:value-of select="substring-before(.,'reslon')"/>relon<xsl:value-of select="substring-after(.,'reslon')"/></xsl:if>
       <xsl:if test="matches(.,'^FRESLON(\w+)$')">FRELON<xsl:value-of select="substring-after(.,'FRESLON')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(m|gr|p|po|fr)esl(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(m|gr|p|M|Gr|P|po|Po|fr|Fr)esl(\w+)$')"><xsl:value-of select="substring-before(.,'esl')"/>êl<xsl:value-of select="substring-after(.,'esl')"/></xsl:if>
       <xsl:if test="matches(.,'^(M|GR|P|PO|FR)ESL(\w+)$')"><xsl:value-of select="substring-before(.,'ESL')"/>ÊL<xsl:value-of select="substring-after(.,'ESL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(m|gr|p)esl(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(m|gr|p|M|Gr|P)esl(\w+)$')"><xsl:value-of select="substring-before(.,'esl')"/>êl<xsl:value-of select="substring-after(.,'esl')"/></xsl:if>
       <xsl:if test="matches(.,'^(M|GR|P)ESL(\w+)$')"><xsl:value-of select="substring-before(.,'ESL')"/>ÊL<xsl:value-of select="substring-after(.,'ESL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aesl(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)esl(\w+)$')"><xsl:value-of select="substring-before(.,'esl')"/>il<xsl:value-of select="substring-after(.,'esl')"/></xsl:if>
       <xsl:if test="matches(.,'^AESL(\w+)$')">AIL<xsl:value-of select="substring-after(.,'AESL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)bransl(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(b|B)ransl(\w+)$')"><xsl:value-of select="substring-before(.,'ransl')"/>ranl<xsl:value-of select="substring-after(.,'ransl')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)BRANSL(\w+)$')"><xsl:value-of select="substring-before(.,'BRANSL')"/>BRANL<xsl:value-of select="substring-after(.,'BRANSL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^h?arquebouze(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(h|H)?(a|A)rquebouze(\w*)$')"><xsl:value-of select="substring-before(.,'rquebouze')"/>rquebuse<xsl:value-of select="substring-after(.,'rquebouze')"/></xsl:if>
       <xsl:if test="matches(.,'^H?ARQUEBOUZE(\w*)$')"><xsl:value-of select="substring-before(.,'ARQUEBOUZE')"/>ARQUEBUSE<xsl:value-of select="substring-after(.,'ARQUEBOUZE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)oiay$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)oiay$')"><xsl:value-of select="substring-before(.,'oiay')"/>oyais<xsl:value-of select="substring-after(.,'oiay')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)OIAY$')"><xsl:value-of select="substring-before(.,'OIAY')"/>OYAIS<xsl:value-of select="substring-after(.,'OIAY')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)oia(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(o|O)ia(\w*)$')"><xsl:value-of select="substring-before(.,'ia')"/>ya<xsl:value-of select="substring-after(.,'ia')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OIA(\w*)$')"><xsl:value-of select="substring-before(.,'OIA')"/>OYA<xsl:value-of select="substring-after(.,'OIA')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^poisant(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(p|P)oisant(\w*)$')"><xsl:value-of select="substring-before(.,'oisant')"/>esant<xsl:value-of select="substring-after(.,'oisant')"/></xsl:if>
       <xsl:if test="matches(.,'^POISANT(\w*)$')">PESANT<xsl:value-of select="substring-after(.,'POISANT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^abhom(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)bhom(\w*)$')"><xsl:value-of select="substring-before(.,'bhom')"/>bom<xsl:value-of select="substring-after(.,'bhom')"/></xsl:if>
       <xsl:if test="matches(.,'^ABHOM(\w*)$')">ABOM<xsl:value-of select="substring-after(.,'ABHOM')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)abund(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(a|A)bund(\w*)$')"><xsl:value-of select="substring-before(.,'bund')"/>bond<xsl:value-of select="substring-after(.,'bund')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)ABUND(\w*)$')"><xsl:value-of select="substring-before(.,'ABUND')"/>ABOND<xsl:value-of select="substring-after(.,'ABUND')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^reigl(é|ee|ée|ez|er)(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Rr]eigl(ee|ée|ez|er)(\w*)$')"><xsl:value-of select="substring-before(.,'eigl')"/>régl<xsl:value-of select="substring-after(.,'eigl')"/></xsl:if>
                    <xsl:if test="matches(.,'^REIGL(EE|ÉE|EZ|ER)(\w*)$')">RÉGL<xsl:value-of select="substring-after(.,'REIGL')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^dereigl(é|ee|ée|ez|er)(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Dd]ereigl(ee|ée|ez|er)(\w*)$')"><xsl:value-of select="substring-before(.,'ereigl')"/>érégl<xsl:value-of select="substring-after(.,'ereigl')"/></xsl:if>
                    <xsl:if test="matches(.,'^DEREIGL(EE|ÉE|EZ|ER)(\w*)$')">DÉRÉGL<xsl:value-of select="substring-after(.,'DEREIGL')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^reigl(ement|e)(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(r|R)eigl(ement|e)(\w*)$')"><xsl:value-of select="substring-before(.,'eigl')"/>ègl<xsl:value-of select="substring-after(.,'eigl')"/></xsl:if>
                    <xsl:if test="matches(.,'^REIGL(EMENT|E)(\w*)$')">RÈGL<xsl:value-of select="substring-after(.,'REIGL')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^dereigl(ement|e)(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Dd]ereigl(ement|e)(\w*)$')"><xsl:value-of select="substring-before(.,'ereigl')"/>érègl<xsl:value-of select="substring-after(.,'ereigl')"/></xsl:if>
                    <xsl:if test="matches(.,'^DEREIGL(EMENT|E)(\w*)$')">DÉRÈGL<xsl:value-of select="substring-after(.,'DEREIGL')"/></xsl:if></reg></choice>
            </xsl:when>
            
            <!--Double consonne-->
            <xsl:when test="matches(.,'^deffunct(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Dd]effunct(\w*)$')"><xsl:value-of select="substring-before(.,'effunct')"/>éfunt<xsl:value-of select="substring-after(.,'effunct')"/></xsl:if>
                    <xsl:if test="matches(.,'^DEFFUNCT(\w*)$')"><xsl:value-of select="substring-before(.,'DEFFUNCT')"/>DÉFUNCT<xsl:value-of select="substring-after(.,'DEFFUNCT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(de|prou?|re|aultre)ff[aeiou](\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(de|prou?|re|aultre|De|Prou?|Re|Aultre)ff[aeiou](\w*)$')"><xsl:value-of select="substring-before(.,'ff')"/>f<xsl:value-of select="substring-after(.,'ff')"/></xsl:if>
       <xsl:if test="matches(.,'^(DE|PROU?|RE|AULTRE)FF[AEIOU](\w*)$')"><xsl:value-of select="substring-before(.,'FF')"/>F<xsl:value-of select="substring-after(.,'FF')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^affin$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)ffin$')"><xsl:value-of select="substring-before(.,'ffin')"/>fin<xsl:value-of select="substring-after(.,'ffin')"/></xsl:if>
       <xsl:if test="matches(.,'^AFFIN$')">AFIN<xsl:value-of select="substring-after(.,'AFFIN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^acou(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)cou(\w+)$')"><xsl:value-of select="substring-before(.,'cou')"/>ccou<xsl:value-of select="substring-after(.,'cou')"/></xsl:if>
       <xsl:if test="matches(.,'^ACOU(\w+)$')">ACCOU<xsl:value-of select="substring-after(.,'ACOU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^acul(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)cul(\w+)$')"><xsl:value-of select="substring-before(.,'cul')"/>ccul<xsl:value-of select="substring-after(.,'cul')"/></xsl:if>
       <xsl:if test="matches(.,'^ACUL(\w+)$')">ACCUL<xsl:value-of select="substring-after(.,'ACUL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^admonnest(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)dmonnest(\w+)$')"><xsl:value-of select="substring-before(.,'dmonnest')"/>dmonest<xsl:value-of select="substring-after(.,'dmonnest')"/></xsl:if>
       <xsl:if test="matches(.,'^ADMONNEST(\w+)$')">ADMONEST<xsl:value-of select="substring-after(.,'ADMONNEST')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)aneau(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(a|A)neau(\w*)$')"><xsl:value-of select="substring-before(.,'neau')"/>nneau<xsl:value-of select="substring-after(.,'neau')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)ANEAU(\w*)$')"><xsl:value-of select="substring-before(.,'ANEAU')"/>ANNEAU<xsl:value-of select="substring-after(.,'ANEAU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)anihil(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(a|A)nihil(\w*)$')"><xsl:value-of select="substring-before(.,'nihil')"/>nnihil<xsl:value-of select="substring-after(.,'nihil')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)ANIHIL(\w*)$')"><xsl:value-of select="substring-before(.,'ANIHIL')"/>ANNIHIL<xsl:value-of select="substring-after(.,'ANIHIL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^bani(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(b|B)ani(\w*)$')"><xsl:value-of select="substring-before(.,'ani')"/>anni<xsl:value-of select="substring-after(.,'ani')"/></xsl:if>
       <xsl:if test="matches(.,'^BANI(\w*)$')">BANNI<xsl:value-of select="substring-after(.,'BANI')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^alaict(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)laict(\w+)$')"><xsl:value-of select="substring-before(.,'laict')"/>llait<xsl:value-of select="substring-after(.,'laict')"/></xsl:if>
       <xsl:if test="matches(.,'^ALAICT(\w+)$')">ALLAIT<xsl:value-of select="substring-after(.,'ALAICT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^alaigr(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)laigr(\w+)$')"><xsl:value-of select="substring-before(.,'laigr')"/>llègr<xsl:value-of select="substring-after(.,'laigr')"/></xsl:if>
       <xsl:if test="matches(.,'^ALAIGR(\w+)$')">ALLÈGR<xsl:value-of select="substring-after(.,'ALAIGR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^allouette(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)llouette(\w*)$')"><xsl:value-of select="substring-before(.,'llouette')"/>louette<xsl:value-of select="substring-after(.,'llouette')"/></xsl:if>
       <xsl:if test="matches(.,'^ALLOUETTE(\w*)$')">ALOUETTE<xsl:value-of select="substring-after(.,'ALLOUETTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(en)?rolle(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(En|en)?(R|r)olle(\w*)$')"><xsl:value-of select="substring-before(.,'olle')"/>ôle<xsl:value-of select="substring-after(.,'olle')"/></xsl:if>
       <xsl:if test="matches(.,'^(EN)?ROLLE(\w*)$')"><xsl:value-of select="substring-before(.,'ROLLE')"/>RÔLE<xsl:value-of select="substring-after(.,'ROLLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)rolle(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)(R|r)olle(\w*)$')"><xsl:value-of select="substring-before(.,'olle')"/>ole<xsl:value-of select="substring-after(.,'olle')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ROLLE(\w*)$')"><xsl:value-of select="substring-before(.,'ROLLE')"/>ROLE<xsl:value-of select="substring-after(.,'ROLLE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^app(ai|erc|erç)(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)pp(ai|erc|erç)(\w+)$')"><xsl:value-of select="substring-before(.,'pp')"/>p<xsl:value-of select="substring-after(.,'pp')"/></xsl:if>
       <xsl:if test="matches(.,'^APP(AI|ERC|ERÇ)(\w+)$')">AP<xsl:value-of select="substring-after(.,'APP')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^trouppe(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(T|t)rouppe(\w*)$')"><xsl:value-of select="substring-before(.,'rouppe')"/>roupe<xsl:value-of select="substring-after(.,'rouppe')"/></xsl:if>
       <xsl:if test="matches(.,'^TROUPPE(\w*)$')">TROUPE<xsl:value-of select="substring-after(.,'TROUPPE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^apren(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)pren(\w+)$')"><xsl:value-of select="substring-before(.,'pren')"/>ppren<xsl:value-of select="substring-after(.,'pren')"/></xsl:if>
       <xsl:if test="matches(.,'^APREN(\w+)$')">APPREN<xsl:value-of select="substring-after(.,'APREN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aprins(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)prins(\w*)$')"><xsl:value-of select="substring-before(.,'prins')"/>ppris<xsl:value-of select="substring-after(.,'prins')"/></xsl:if>
       <xsl:if test="matches(.,'^APRINS(\w*)$')">APPRIS<xsl:value-of select="substring-after(.,'APRINS')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)suitte(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(S|s)uitte(\w*)$')"><xsl:value-of select="substring-before(.,'uitte')"/>uite<xsl:value-of select="substring-after(.,'uitte')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)SUITTE(\w*)$')"><xsl:value-of select="substring-before(.,'SUITTE')"/>SUITE<xsl:value-of select="substring-after(.,'SUITTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^battaill(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(B|b)attaill(\w+)$')"><xsl:value-of select="substring-before(.,'attaill')"/>ataill<xsl:value-of select="substring-after(.,'attaill')"/></xsl:if>
       <xsl:if test="matches(.,'^BATTAILL(\w+)$')">BATAILL<xsl:value-of select="substring-after(.,'BATTAILL')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^recepte(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(R|r)ecepte(\w*)$')"><xsl:value-of select="substring-before(.,'ecepte')"/>ecette<xsl:value-of select="substring-after(.,'ecepte')"/></xsl:if>
       <xsl:if test="matches(.,'^RECEPTE(\w*)$')">RECETTE<xsl:value-of select="substring-after(.,'RECEPTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)robb(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(R|r)obb(\w+)$')"><xsl:value-of select="substring-before(.,'obb')"/>ob<xsl:value-of select="substring-after(.,'obb')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)ROBB(\w+)$')"><xsl:value-of select="substring-before(.,'ROBB')"/>ROB<xsl:value-of select="substring-after(.,'ROBB')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^abbas?t(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)bbas?t(\w*)$')"><xsl:value-of select="substring-before(.,'bba')"/>ba<xsl:value-of select="substring-after(.,'bba')"/></xsl:if>
       <xsl:if test="matches(.,'^ABBAS?T(\w*)$')">ABA<xsl:value-of select="substring-after(.,'ABBA')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^as(s|ç)avoir$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^as(s|ç)avoir$')">à savoir</xsl:if>
       <xsl:if test="matches(.,'^As(s|ç)avoir$')">À savoir</xsl:if>
       <xsl:if test="matches(.,'^AS(S|Ç)AVOIR$')">À SAVOIR</xsl:if></reg></choice>
            </xsl:when>
            
            <!--PREFIXE-->
<xsl:when test="matches(.,'^(\w*)ad(jou|va|vent)(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)ad(jou|va|vent)(\w+)$')"><xsl:value-of select="substring-before(.,'ad')"/>a<xsl:value-of select="substring-after(.,'ad')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)Ad(jou|va|vent)(\w+)$')"><xsl:value-of select="substring-before(.,'Ad')"/>A<xsl:value-of select="substring-after(.,'Ad')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)AD(JOU|VA|VENT)(\w+)$')"><xsl:value-of select="substring-before(.,'AD')"/>A<xsl:value-of select="substring-after(.,'AD')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^alaine(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^alaine(\w*)$')"><xsl:value-of select="substring-before(.,'alaine')"/>haleine<xsl:value-of select="substring-after(.,'alaine')"/></xsl:if>
       <xsl:if test="matches(.,'^Alaine(\w*)$')"><xsl:value-of select="substring-before(.,'Alaine')"/>Haleine<xsl:value-of select="substring-after(.,'Alaine')"/></xsl:if>
       <xsl:if test="matches(.,'^ALAINE(\w*)$')">HALEINE<xsl:value-of select="substring-after(.,'ALAINE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^h?arnoys$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(H|h)?(a|A)rnoys$')"><xsl:value-of select="substring-before(.,'arnoys')"/>arnais<xsl:value-of select="substring-after(.,'arnoys')"/></xsl:if>
       <xsl:if test="matches(.,'^H?ARNOYS$')"><xsl:value-of select="substring-before(.,'ARNOYS')"/>ARNAIS<xsl:value-of select="substring-after(.,'ARNOYS')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^amez$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)mez$')"><xsl:value-of select="substring-before(.,'mez')"/>imés<xsl:value-of select="substring-after(.,'mez')"/></xsl:if>
       <xsl:if test="matches(.,'^AMEZ$')"><xsl:value-of select="substring-before(.,'AMEZ')"/>AIMÉS<xsl:value-of select="substring-after(.,'AMEZ')"/></xsl:if></reg></choice>
            </xsl:when>            
<xsl:when test="matches(.,'^avang(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^avang(\w+)$')">veng<xsl:value-of select="substring-after(.,'avang')"/></xsl:if>
       <xsl:if test="matches(.,'^Avang(\w+)$')">Veng<xsl:value-of select="substring-after(.,'Avang')"/></xsl:if>
       <xsl:if test="matches(.,'^AVANG(\w+)$')">VENG<xsl:value-of select="substring-after(.,'AVANG')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^biens[^aeiou](\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(B|b)iens[^aeiou](\w+)$')"><xsl:value-of select="substring-before(.,'iens')"/>ien<xsl:value-of select="substring-after(.,'iens')"/></xsl:if>
       <xsl:if test="matches(.,'^BIENS[^AEIOU](\w+)$')">BIEN<xsl:value-of select="substring-after(.,'BIENS')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)unz(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)unz(\w+)$')"><xsl:value-of select="substring-before(.,'unz')"/>onz<xsl:value-of select="substring-after(.,'unz')"/></xsl:if>
       <xsl:if test="matches(.,'^Unz(\w+)$')"><xsl:value-of select="substring-before(.,'Unz')"/>Onz<xsl:value-of select="substring-after(.,'Unz')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)UNZ(\w+)$')"><xsl:value-of select="substring-before(.,'UNZ')"/>ONZ<xsl:value-of select="substring-after(.,'UNZ')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aurei(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^aurei(\w+)$')">orei<xsl:value-of select="substring-after(.,'aurei')"/></xsl:if>
       <xsl:if test="matches(.,'^Aurei(\w+)$')">Orei<xsl:value-of select="substring-after(.,'Aurei')"/></xsl:if>
       <xsl:if test="matches(.,'^AUREI(\w+)$')">OREI<xsl:value-of select="substring-after(.,'AUREI')"/></xsl:if></reg></choice>
            </xsl:when>
            
                <!--conserver cet ordre pour les règles "^tres"-->
<xsl:when test="matches(.,'^tresors?$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]resors?$')"><xsl:value-of select="substring-before(.,'resor')"/>résor<xsl:value-of select="substring-after(.,'resor')"/></xsl:if>
       <xsl:if test="matches(.,'^TRESORS?$')">TRÉSOR<xsl:value-of select="substring-after(.,'TRESOR')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^tres(pa|mou|t|bu)(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]res(pa|mou|t|bu)(\w+)$')"><xsl:value-of select="substring-before(.,'res')"/>ré<xsl:value-of select="substring-after(.,'res')"/></xsl:if>
       <xsl:if test="matches(.,'^TRES(PA|MOU|T|BU)(\w+)$')">TRÉ<xsl:value-of select="substring-after(.,'TRES')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^tressail(\w*)$', 'i')">
                        <xsl:value-of select="."/>
</xsl:when>

<xsl:when test="matches(.,'^tres(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]res(\w+)$')"><xsl:value-of select="substring-before(.,'res')"/>rès <xsl:value-of select="substring-after(.,'res')"/></xsl:if>
       <xsl:if test="matches(.,'^TRES(\w+)$')">TRÈS <xsl:value-of select="substring-after(.,'TRES')"/></xsl:if></reg></choice>
</xsl:when>
            
            <!--SUFFIXE-->
<xsl:when test="matches(.,'^(\w*)croist$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(c|C)roist$')"><xsl:value-of select="substring-before(.,'roist')"/>roît</xsl:if>
       <xsl:if test="matches(.,'^(\w*)CROIST$')"><xsl:value-of select="substring-before(.,'UNZ')"/>CROÎT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^con?g?noist(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^con?g?noist(\w*)$')">connait<xsl:value-of select="substring-after(.,'noist')"/></xsl:if>
       <xsl:if test="matches(.,'^Con?g?noist(\w*)$')">Connait<xsl:value-of select="substring-after(.,'noist')"/></xsl:if>
       <xsl:if test="matches(.,'^CON?G?NOIST(\w*)$')">CONNAIT<xsl:value-of select="substring-after(.,'NOIST')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^recon?g?noist(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^recon?g?noist(\w*)$')">reconnait<xsl:value-of select="substring-after(.,'noist')"/></xsl:if>
       <xsl:if test="matches(.,'^Recon?g?noist(\w*)$')">Reconnait<xsl:value-of select="substring-after(.,'noist')"/></xsl:if>
       <xsl:if test="matches(.,'^RECON?G?NOIST(\w*)$')">RECONNAIT<xsl:value-of select="substring-after(.,'NOIST')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)[^(en)]oist$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^(en)]oist$')"><xsl:value-of select="substring-before(.,'oist')"/>ait</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^(EN)]OIST$')"><xsl:value-of select="substring-before(.,'OIST')"/>AIT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[lnctombaueiv][lbaiou]z$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[lnctombLNCTOMBaueivAUEIV][lbaiou]z$')"><xsl:value-of select="substring-before(.,'z')"/>s</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[LNCTOMBAUEIV][LBAIOU]Z$')"><xsl:value-of select="substring-before(.,'Z')"/>S</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[lnctmbaueivg]tz$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[lnctmbLNCTMBaueivAUEIVgG]tz$')"><xsl:value-of select="substring-before(.,'tz')"/>ts</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[LNCTMBAUEIVG]TZ$')"><xsl:value-of select="substring-before(.,'TZ')"/>TS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)otz$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)otz$')"><xsl:value-of select="substring-before(.,'otz')"/>ots</xsl:if>
       <xsl:if test="matches(.,'^(\w+)OTZ$')"><xsl:value-of select="substring-before(.,'OTZ')"/>OTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)aize(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Aa]ize(\w*)$')"><xsl:value-of select="substring-before(.,'ize')"/>ise<xsl:value-of select="substring-after(.,'ize')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)AIZE(\w*)$')"><xsl:value-of select="substring-before(.,'AIZE')"/>AISE<xsl:value-of select="substring-after(.,'AIZE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fauce(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]auce(\w*)$')"><xsl:value-of select="substring-before(.,'auce')"/>ausse<xsl:value-of select="substring-after(.,'auce')"/></xsl:if>
       <xsl:if test="matches(.,'^FAUCE(\w*)$')">FAUSSE<xsl:value-of select="substring-after(.,'FAUCE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)mens$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)mens$')"><xsl:value-of select="substring-before(.,'mens')"/>ments</xsl:if>
       <xsl:if test="matches(.,'^(\w+)MENS$')"><xsl:value-of select="substring-before(.,'MENS')"/>MENTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)ndens$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ndens$')"><xsl:value-of select="substring-before(.,'ndens')"/>ndent</xsl:if>
       <xsl:if test="matches(.,'^(\w+)NDENS$')"><xsl:value-of select="substring-before(.,'NDENS')"/>NDENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^dedens$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]edens$')"><xsl:value-of select="substring-before(.,'edens')"/>edans</xsl:if>
       <xsl:if test="matches(.,'^DEDENS$')">DEDANS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)dens$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Dd]ens$')"><xsl:value-of select="substring-before(.,'ens')"/>ents</xsl:if>
       <xsl:if test="matches(.,'^(\w*)DENS$')"><xsl:value-of select="substring-before(.,'DENS')"/>DENTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(ent|pr)ens$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(ent|pr|Pr|Ent)ens$')"><xsl:value-of select="substring-before(.,'ens')"/>ends</xsl:if>
       <xsl:if test="matches(.,'^(\w*)(ENT|PR)ENS$')"><xsl:value-of select="substring-before(.,'DENS')"/>ENDS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^cens$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[cC]ens$')"><xsl:value-of select="substring-before(.,'ens')"/>ent</xsl:if>
       <xsl:if test="matches(.,'^CENS$')">CENT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^blans$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[bB]lans$')"><xsl:value-of select="substring-before(.,'lans')"/>lancs</xsl:if>
       <xsl:if test="matches(.,'^BLANS$')">BLANCS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^avans$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]vans$')"><xsl:value-of select="substring-before(.,'vans')"/>vant</xsl:if>
       <xsl:if test="matches(.,'^AVANS$')">AVANT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^marchans$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[mM]archans$')"><xsl:value-of select="substring-before(.,'archans')"/>archands</xsl:if>
       <xsl:if test="matches(.,'^MARCHANS$')">MARCHANDS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^grans$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[gG]rans$')"><xsl:value-of select="substring-before(.,'rans')"/>rands</xsl:if>
       <xsl:if test="matches(.,'^GRANS$')">GRANDS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^gran$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[gG]ran$')"><xsl:value-of select="substring-before(.,'ran')"/>rand</xsl:if>
       <xsl:if test="matches(.,'^GRAN$')">GRAND</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(est|ast|gu|ou|rt|ot|nt|uss|ach|cqu|lt|mb|bl|oy|ç|fit|aut)ans$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(est|ast|gu|ou|rt|ot|nt|uss|ach|cqu|lt|mb|bl|oy|ç|fit|Est|aut|Aut)ans$')"><xsl:value-of select="substring-before(.,'ans')"/>ant</xsl:if>
       <xsl:if test="matches(.,'^(\w*)(EST|AST|GU|OU|RT|OT|NT|USS|ACH|CQU|LT|MB|BL|OY|Ç|FIT|AUT)ANS$')"><xsl:value-of select="substring-before(.,'ANS')"/>ANT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(enf|it|ist|bat|sav|am|ip|nqu)ans$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(enf|it|ist|bat|sav|am|ip|nqu|Enf|Sav|Am)ans$')"><xsl:value-of select="substring-before(.,'ans')"/>ants</xsl:if>
       <xsl:if test="matches(.,'^(\w*)(ENF|IT|IST|BAT|SAV|AM|IP|NQU)ANS$')"><xsl:value-of select="substring-before(.,'ANS')"/>ANTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(adhe|ffe)rens$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(adhe|ffe|Adhe)rens$')"><xsl:value-of select="substring-before(.,'rens')"/>rents</xsl:if>
       <xsl:if test="matches(.,'^(\w*)(ADHE|FFE)RENS$')"><xsl:value-of select="substring-before(.,'ANS')"/>RENTS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^gents$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[gG]ents$')"><xsl:value-of select="substring-before(.,'ents')"/>ens</xsl:if>
       <xsl:if test="matches(.,'^GENTS$')">GENS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)icque(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)icque(\w*)$')"><xsl:value-of select="substring-before(.,'icque')"/>ique<xsl:value-of select="substring-after(.,'icque')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ICQUE(\w*)$')"><xsl:value-of select="substring-before(.,'ICQUE')"/>IQUE<xsl:value-of select="substring-after(.,'ICQUE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)(ve|on)cques?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)(ve|on)cques?$')"><xsl:value-of select="substring-before(.,'cque')"/>c</xsl:if>
       <xsl:if test="matches(.,'^(\w+)(VE|ON)CQUES?$')"><xsl:value-of select="substring-before(.,'CQUE')"/>C</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)ancque(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ancque(\w*)$')"><xsl:value-of select="substring-before(.,'ancque')"/>anque<xsl:value-of select="substring-after(.,'ancque')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ANCQUE(\w*)$')"><xsl:value-of select="substring-before(.,'ANCQUE')"/>ANQUE<xsl:value-of select="substring-after(.,'ANCQUE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^a(ve|don)cq$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[A|a](ve|don)cq$')"><xsl:value-of select="substring-before(.,'cq')"/>c</xsl:if>
       <xsl:if test="matches(.,'^A(VE|DON)CQ$')"><xsl:value-of select="substring-before(.,'CQ')"/>C</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^dictant$', 'i')">
    <xsl:if test="matches(.,'^(d|D)ictant$')"><xsl:value-of select="substring-before(.,'ictant')"/>ictant</xsl:if>
    <xsl:if test="matches(.,'^DICTANT$')"><xsl:value-of select="substring-before(.,'DICTANT')"/>DICTANT</xsl:if>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)[^vft]in?ct(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^vft]in?ct(\w*)$')"><xsl:value-of select="substring-before(.,'ct')"/>t<xsl:value-of select="substring-after(.,'ct')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^VFT]IN?CT(\w*)$')"><xsl:value-of select="substring-before(.,'CT')"/>T<xsl:value-of select="substring-after(.,'CT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^dequoy$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(d|D)equoy$')"><xsl:value-of select="substring-before(.,'equoy')"/>e quoi</xsl:if>
       <xsl:if test="matches(.,'^DEQUOY$')"><xsl:value-of select="substring-before(.,'DEQUOY')"/>DE QUOI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)quoy$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(q|Q)uoy$')"><xsl:value-of select="substring-before(.,'uoy')"/>uoi</xsl:if>
       <xsl:if test="matches(.,'^(\w*)QUOY$')"><xsl:value-of select="substring-before(.,'QUOY')"/>QUOI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^agui(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]gui(\w*)$')"><xsl:value-of select="substring-before(.,'gui')"/>igui<xsl:value-of select="substring-after(.,'gui')"/></xsl:if>
       <xsl:if test="matches(.,'^AGUI(\w*)$')">AIGUI<xsl:value-of select="substring-after(.,'AGUI')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aguy(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]guy(\w*)$')"><xsl:value-of select="substring-before(.,'guy')"/>igui<xsl:value-of select="substring-after(.,'guy')"/></xsl:if>
       <xsl:if test="matches(.,'^AGUY(\w*)$')">AIGUI<xsl:value-of select="substring-after(.,'AGUY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ague?s?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]gue?s?$')"><xsl:value-of select="substring-before(.,'gu')"/>igu<xsl:value-of select="substring-after(.,'gu')"/></xsl:if>
       <xsl:if test="matches(.,'^AGUE?S?$')">AIGU<xsl:value-of select="substring-after(.,'AGU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[^p]oing$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^p]oing$')"><xsl:value-of select="substring-before(.,'oing')"/>oin</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^P]OING$')"><xsl:value-of select="substring-before(.,'OING')"/>OIN</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)ulx$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ulx$')"><xsl:value-of select="substring-before(.,'ulx')"/>ux</xsl:if>
       <xsl:if test="matches(.,'^(\w+)ULX$')"><xsl:value-of select="substring-before(.,'ULX')"/>UX</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^loix$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]oix$')"><xsl:value-of select="substring-before(.,'oix')"/>ois</xsl:if>
       <xsl:if test="matches(.,'^LOIX$')">LOIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)aulme(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)aulme(\w*)$')"><xsl:value-of select="substring-before(.,'aulme')"/>aume<xsl:value-of select="substring-after(.,'aulme')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)AULME(\w*)$')"><xsl:value-of select="substring-before(.,'AULME')"/>AUME<xsl:value-of select="substring-after(.,'AULME')"/></xsl:if></reg></choice>
            </xsl:when>
            <!--Mots fréquents-->
<xsl:when test="matches(.,'^(\w*)oynes?(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Oo]ynes?(\w*)$')"><xsl:value-of select="substring-before(.,'yne')"/>ine<xsl:value-of select="substring-after(.,'yne')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OYNES?(\w*)$')"><xsl:value-of select="substring-before(.,'OYNE')"/>OINE<xsl:value-of select="substring-after(.,'OYNE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)oyres?(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Oo]yres?(\w*)$')"><xsl:value-of select="substring-before(.,'yre')"/>ire<xsl:value-of select="substring-after(.,'yre')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OYRES?(\w*)$')"><xsl:value-of select="substring-before(.,'OYRE')"/>OIRE<xsl:value-of select="substring-after(.,'OYRE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)oyzes?(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Oo]yzes?(\w*)$')"><xsl:value-of select="substring-before(.,'yze')"/>ise<xsl:value-of select="substring-after(.,'yze')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OYZES?(\w*)$')"><xsl:value-of select="substring-before(.,'OYZE')"/>OISE<xsl:value-of select="substring-after(.,'OYZE')"/></xsl:if></reg></choice>
            </xsl:when>
            <!--y => i-->
<xsl:when test="matches(.,'^i?(ce)?luy$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[iI]?(ce|Ce)?[lL]uy$')"><xsl:value-of select="substring-before(.,'uy')"/>ui</xsl:if>
       <xsl:if test="matches(.,'^I?(CE)?LUY$')"><xsl:value-of select="substring-before(.,'LUY')"/>UI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^i?celluy$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[iI]?(c|C)elluy$')"><xsl:value-of select="substring-before(.,'elluy')"/>elui</xsl:if>
       <xsl:if test="matches(.,'^I?CELLUY$')"><xsl:value-of select="substring-before(.,'CELLUY')"/>CELUI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ayt?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]yt?$')"><xsl:value-of select="substring-before(.,'y')"/>i<xsl:value-of select="substring-after(.,'y')"/></xsl:if>
       <xsl:if test="matches(.,'^AYT?$')"><xsl:value-of select="substring-before(.,'AY')"/>AI<xsl:value-of select="substring-after(.,'Y')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ny$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^ny$')">ni</xsl:if>
       <xsl:if test="matches(.,'^Ny$')">Ni</xsl:if>
       <xsl:if test="matches(.,'^NY$')">NI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(ain|aus)?sy$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(Ain|Aus|ain|aus)?[sS]y$')"><xsl:value-of select="substring-before(.,'y')"/>i</xsl:if>
       <xsl:if test="matches(.,'^(AIN|AUS)?SY$')"><xsl:value-of select="substring-before(.,'SY')"/>SI</xsl:if></reg></choice>
            </xsl:when>      
<xsl:when test="matches(.,'^i?cy$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[iI]?(c|C)y$')"><xsl:value-of select="substring-before(.,'y')"/>i</xsl:if>
       <xsl:if test="matches(.,'^I?CY$')"><xsl:value-of select="substring-before(.,'CY')"/>CI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^huy$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]uy$')"><xsl:value-of select="substring-before(.,'uy')"/>ui</xsl:if>
       <xsl:if test="matches(.,'^HUY$')">HUI</xsl:if></reg></choice>
            </xsl:when>     
<xsl:when test="matches(.,'^(\w*)[^m][aeiouy]rty(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^m][aeiouy]rty(\w*)$')"><xsl:value-of select="substring-before(.,'rty')"/>rti<xsl:value-of select="substring-after(.,'rty')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^M][AEIOUY]RTY(\w*)$')"><xsl:value-of select="substring-before(.,'RTY')"/>RTI<xsl:value-of select="substring-after(.,'RTY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)chym(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Cc]hym(\w*)$')"><xsl:value-of select="substring-before(.,'hym')"/>him<xsl:value-of select="substring-after(.,'hym')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)CHYM(\w*)$')"><xsl:value-of select="substring-before(.,'CHYM')"/>CHIM<xsl:value-of select="substring-after(.,'CHYM')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^amy(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]my(\w*)$')"><xsl:value-of select="substring-before(.,'my')"/>mi<xsl:value-of select="substring-after(.,'my')"/></xsl:if>
       <xsl:if test="matches(.,'^AMY(\w*)$')">AMI<xsl:value-of select="substring-after(.,'AMY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^h?aza(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]?[Aa]za(\w*)$')"><xsl:value-of select="substring-before(.,'za')"/>sa<xsl:value-of select="substring-after(.,'za')"/></xsl:if>
       <xsl:if test="matches(.,'^H?AZA(\w*)$')"><xsl:value-of select="substring-before(.,'AZA')"/>ASA<xsl:value-of select="substring-after(.,'AZA')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)eryes?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)eryes?$')"><xsl:value-of select="substring-before(.,'erye')"/>erie<xsl:value-of select="substring-after(.,'erie')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ERYES?$')"><xsl:value-of select="substring-before(.,'ERYE')"/>ERIE<xsl:value-of select="substring-after(.,'ERYE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^huyt(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]uyt(\w*)$')"><xsl:value-of select="substring-before(.,'uyt')"/>uit<xsl:value-of select="substring-after(.,'uyt')"/></xsl:if>
       <xsl:if test="matches(.,'^HUYT(\w*)$')">HUIT<xsl:value-of select="substring-after(.,'HUYT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^parmy$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[pP]army$')"><xsl:value-of select="substring-before(.,'army')"/>armi</xsl:if>
       <xsl:if test="matches(.,'^PARMY$')">PARMI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^vray(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]ray(\w*)$')"><xsl:value-of select="substring-before(.,'ray')"/>rai<xsl:value-of select="substring-after(.,'ray')"/></xsl:if>
       <xsl:if test="matches(.,'^VRAY(\w*)$')">VRAI<xsl:value-of select="substring-after(.,'VRAY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^voyla$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]oyla$')"><xsl:value-of select="substring-before(.,'oyla')"/>oilà</xsl:if>
       <xsl:if test="matches(.,'^VOYLA$')">VOILÀ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)mercy(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Mm]ercy(\w*)$')"><xsl:value-of select="substring-before(.,'ercy')"/>erci<xsl:value-of select="substring-after(.,'ercy')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)MERCY(\w*)$')"><xsl:value-of select="substring-before(.,'MERCY')"/>MERCI<xsl:value-of select="substring-after(.,'MERCY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^dy$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]y$')"><xsl:value-of select="substring-before(.,'y')"/>is</xsl:if>
       <xsl:if test="matches(.,'^DY$')">DIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)ouyss(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)ouyss(\w+)$')"><xsl:value-of select="substring-before(.,'ouyss')"/>ouiss<xsl:value-of select="substring-after(.,'ouyss')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OUYSS(\w+)$')"><xsl:value-of select="substring-before(.,'OUYSS')"/>OUISS<xsl:value-of select="substring-after(.,'OUYSS')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^demy$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]emy$')"><xsl:value-of select="substring-before(.,'emy')"/>emi</xsl:if>
       <xsl:if test="matches(.,'^DEMY$')">DEMI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^failly$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[fF]ailly$')"><xsl:value-of select="substring-before(.,'ailly')"/>ailli</xsl:if>
       <xsl:if test="matches(.,'^FAILLY$')">FAILLI</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^essays?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]ssays?$')"><xsl:value-of select="substring-before(.,'ssay')"/>ssai<xsl:value-of select="substring-after(.,'ssay')"/></xsl:if>
       <xsl:if test="matches(.,'^ESSAYS?$')">ESSAI<xsl:value-of select="substring-after(.,'ESSAY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^hyver(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]yver(\w*)$')"><xsl:value-of select="substring-before(.,'yver')"/>iver<xsl:value-of select="substring-after(.,'yver')"/></xsl:if>
       <xsl:if test="matches(.,'^HYVER(\w*)$')">HIVER<xsl:value-of select="substring-after(.,'HYVER')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estably(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^estably(\w*)$')"><xsl:value-of select="substring-before(.,'estably')"/>établi<xsl:value-of select="substring-after(.,'estably')"/></xsl:if>
    <xsl:if test="matches(.,'^Estably(\w*)$')"><xsl:value-of select="substring-before(.,'Estably')"/>Établi<xsl:value-of select="substring-after(.,'Estably')"/></xsl:if>
    <xsl:if test="matches(.,'^ESTABLY(\w*)$')">ÉTABLI<xsl:value-of select="substring-after(.,'ESTABLY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)fuyr(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Ff]uyr(\w*)$')"><xsl:value-of select="substring-before(.,'uyr')"/>uir<xsl:value-of select="substring-after(.,'uyr')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)FUYR(\w*)$')"><xsl:value-of select="substring-before(.,'FUYR')"/>FUIR<xsl:value-of select="substring-after(.,'FUYR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)finy(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Ff]iny(\w*)$')"><xsl:value-of select="substring-before(.,'iny')"/>ini<xsl:value-of select="substring-after(.,'iny')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)FINY(\w*)$')"><xsl:value-of select="substring-before(.,'FINY')"/>FINI<xsl:value-of select="substring-after(.,'FINY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ouy$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]uy$')"><xsl:value-of select="substring-before(.,'uy')"/>ui</xsl:if>
       <xsl:if test="matches(.,'^OUY$')">OUI</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^boy$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]oy$')"><xsl:value-of select="substring-before(.,'oy')"/>ois</xsl:if>
                    <xsl:if test="matches(.,'^BOY$')">BOIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)oy[es]?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)oy[es]?$')"><xsl:value-of select="substring-before(.,'oy')"/>oi<xsl:value-of select="substring-after(.,'oy')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)Oy[es]?$')"><xsl:value-of select="substring-before(.,'Oy')"/>Oi<xsl:value-of select="substring-after(.,'Oy')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OY[ES]?$')"><xsl:value-of select="substring-before(.,'OY')"/>OI<xsl:value-of select="substring-after(.,'OY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)suyv(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Ss]uyv(\w*)$')"><xsl:value-of select="substring-before(.,'uyv')"/>uiv<xsl:value-of select="substring-after(.,'uyv')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)SUYV(\w*)$')"><xsl:value-of select="substring-before(.,'SUYV')"/>SUIV<xsl:value-of select="substring-after(.,'SUYV')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ay[md](\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]y[md](\w+)$')"><xsl:value-of select="substring-before(.,'y')"/>i<xsl:value-of select="substring-after(.,'y')"/></xsl:if>
       <xsl:if test="matches(.,'^AY[MD](\w+)$')">AI<xsl:value-of select="substring-after(.,'AY')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)[hu]th[oe](\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)[hu]th[oe](\w*)$')"><xsl:value-of select="substring-before(.,'th')"/>t<xsl:value-of select="substring-after(.,'th')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)[HU]TH[OE](\w*)$')"><xsl:value-of select="substring-before(.,'TH')"/>TSUIV<xsl:value-of select="substring-after(.,'TH')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^sceu(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[sS]ceu(\w*)$')"><xsl:value-of select="substring-before(.,'ceu')"/>u<xsl:value-of select="substring-after(.,'ceu')"/></xsl:if>
       <xsl:if test="matches(.,'^SCEU(\w*)$')">SU<xsl:value-of select="substring-after(.,'SCEU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^asseu(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]sseu(\w+)$')"><xsl:value-of select="substring-before(.,'sseu')"/>ssu<xsl:value-of select="substring-after(.,'sseu')"/></xsl:if>
       <xsl:if test="matches(.,'^ASSEU(\w+)$')">ASSU<xsl:value-of select="substring-after(.,'ASSEU')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)cheute(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Cc]heute(\w*)$')"><xsl:value-of select="substring-before(.,'heute')"/>hute<xsl:value-of select="substring-after(.,'heute')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)CHEUTE(\w*)$')"><xsl:value-of select="substring-before(.,'CHEUTE')"/>CHUTE<xsl:value-of select="substring-after(.,'CHEUTE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)oub[dts](\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)oub[dts](\w*)$')"><xsl:value-of select="substring-before(.,'oub')"/>ou<xsl:value-of select="substring-after(.,'oub')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)OUB[DTS](\w*)$')"><xsl:value-of select="substring-before(.,'OUB')"/>OU<xsl:value-of select="substring-after(.,'OUB')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(^dem)on?str(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(^[Dd]em)on?str(\w+)$')"><xsl:value-of select="substring-before(.,'str')"/>tr<xsl:value-of select="substring-after(.,'str')"/></xsl:if>
       <xsl:if test="matches(.,'^(^DEM)ON?STR(\w+)$')"><xsl:value-of select="substring-before(.,'STR')"/>TR<xsl:value-of select="substring-after(.,'STR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)eust$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)eust$')"><xsl:value-of select="substring-before(.,'eust')"/>eut<xsl:value-of select="substring-after(.,'eust')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)EUST$')"><xsl:value-of select="substring-before(.,'EUST')"/>EUT<xsl:value-of select="substring-after(.,'EUST')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)[ao]istr(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)[ao]istr(\w*)$')"><xsl:value-of select="substring-before(.,'istr')"/>îtr<xsl:value-of select="substring-after(.,'istr')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)[AO]ISTR(\w*)$')"><xsl:value-of select="substring-before(.,'ISTR')"/>ÎTR<xsl:value-of select="substring-after(.,'ISTR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ancestre(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ncestre(\w*)$')"><xsl:value-of select="substring-before(.,'ncestre')"/>ncêtre<xsl:value-of select="substring-after(.,'ncestre')"/></xsl:if>
       <xsl:if test="matches(.,'^ANCESTRE(\w*)$')">ANCÊTRE<xsl:value-of select="substring-after(.,'ANCESTRE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^estez$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^estez$')">êtes</xsl:if>
                    <xsl:if test="matches(.,'^Estez$')">Êtes</xsl:if>
                    <xsl:if test="matches(.,'^ESTEZ(\w*)$')">ÊTES</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^est[raueo](\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
        <xsl:if test="matches(.,'^est[raueo](\w*)$')">ét<xsl:value-of select="substring-after(.,'est')"/></xsl:if>
        <xsl:if test="matches(.,'^Est[raueo](\w*)$')">Ét<xsl:value-of select="substring-after(.,'Est')"/></xsl:if>
        <xsl:if test="matches(.,'^EST[RAUEO](\w*)$')">ÉT<xsl:value-of select="substring-after(.,'EST')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^mest(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]est(\w*)$')"><xsl:value-of select="substring-before(.,'est')"/>ét<xsl:value-of select="substring-after(.,'est')"/></xsl:if>
       <xsl:if test="matches(.,'^MEST(\w*)$')">MÉT<xsl:value-of select="substring-after(.,'MEST')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^arbalest(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]rbalest(\w*)$')"><xsl:value-of select="substring-before(.,'rbalest')"/>rbalèt<xsl:value-of select="substring-after(.,'rbalest')"/></xsl:if>
       <xsl:if test="matches(.,'^ARBALEST(\w*)$')">ARBALÈT<xsl:value-of select="substring-after(.,'ARBALEST')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^assubjectir$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ssubjectir$')"><xsl:value-of select="substring-before(.,'ssubjectir')"/>ssujettir</xsl:if>
       <xsl:if test="matches(.,'^ASSUBJECTIR$')">ASSUJETTIR</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)ergier$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ergier$')"><xsl:value-of select="substring-before(.,'ergier')"/>erger<xsl:value-of select="substring-after(.,'ergier')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ERGIER$')"><xsl:value-of select="substring-before(.,'ERGIER')"/>ERGER<xsl:value-of select="substring-after(.,'ERGIER')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^tousjours$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[tT]ousjours$')"><xsl:value-of select="substring-before(.,'ousjours')"/>oujours</xsl:if>
       <xsl:if test="matches(.,'^TOUSJOURS$')">TOUJOURS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^desja$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esja$')"><xsl:value-of select="substring-before(.,'esja')"/>éjà</xsl:if>
       <xsl:if test="matches(.,'^DESJA$')">DÉJÀ</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^su[zs]$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]u[zs]$')"><xsl:value-of select="substring-before(.,'u')"/>ur</xsl:if>
       <xsl:if test="matches(.,'^SU[ZS]$')">SUR</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^chascun(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]hascun(\w*)$')"><xsl:value-of select="substring-before(.,'hascun')"/>hacun<xsl:value-of select="substring-after(.,'hascun')"/></xsl:if>
       <xsl:if test="matches(.,'^CHASCUN(\w*)$')">CHACUN<xsl:value-of select="substring-after(.,'CHASCUN')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^chasque(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]hasque(\w*)$')"><xsl:value-of select="substring-before(.,'hasque')"/>haque<xsl:value-of select="substring-after(.,'hascun')"/></xsl:if>
       <xsl:if test="matches(.,'^CHASQUE(\w*)$')">CHAQUE<xsl:value-of select="substring-after(.,'CHASQUE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pendent$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]endent$')"><xsl:value-of select="substring-before(.,'endent')"/>endant</xsl:if>
       <xsl:if test="matches(.,'^PENDENT$')">PENDANT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^scavoir$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]cavoir$')"><xsl:value-of select="substring-before(.,'cavoir')"/>avoir</xsl:if>
       <xsl:if test="matches(.,'^SCAVOIR$')">SAVOIR</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^sçav(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]çav(\w*)$')"><xsl:value-of select="substring-before(.,'çav')"/>av<xsl:value-of select="substring-after(.,'çav')"/></xsl:if>
       <xsl:if test="matches(.,'^SÇAV(\w*)$')">SAV<xsl:value-of select="substring-after(.,'SÇAV')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^sçait$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]çait$')"><xsl:value-of select="substring-before(.,'çait')"/>ait</xsl:if>
       <xsl:if test="matches(.,'^SÇAIT$')">SAIT</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^encores$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]ncores$')"><xsl:value-of select="substring-before(.,'ncores')"/>ncore</xsl:if>
       <xsl:if test="matches(.,'^ENCORES$')">ENCORE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^prins$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]rins$')"><xsl:value-of select="substring-before(.,'rins')"/>ris</xsl:if>
       <xsl:if test="matches(.,'^PRINS$')">PRIS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^quel(cun|qun)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Qq]uel(cun|qun)$')"><xsl:value-of select="substring-before(.,'uel')"/>uelqu'un</xsl:if>
       <xsl:if test="matches(.,'^QUEL(CUN|QUN)$')">QUELQU'UN</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^(age|eage|aage)(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(age|eage|aage)(\w*)$')">âge</xsl:if>
       <xsl:if test="matches(.,'^(Age|Eage|Aage)(\w*)$')">Âge</xsl:if>
       <xsl:if test="matches(.,'^(AGE|EAGE|AAGE)(\w*)$')">ÂGE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^sepmaine(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]epmaine(\w*)$')"><xsl:value-of select="substring-before(.,'epmaine')"/>emaine<xsl:value-of select="substring-after(.,'epmaine')"/></xsl:if>
       <xsl:if test="matches(.,'^SEPMAINE(\w*)$')">SEMAINE<xsl:value-of select="substring-after(.,'SEPMAINE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^cognoi(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ognoi(\w*)$')"><xsl:value-of select="substring-before(.,'ognoi')"/>onnai<xsl:value-of select="substring-after(.,'ognoi')"/></xsl:if>
       <xsl:if test="matches(.,'^COGNOI(\w*)$')">CONNAI<xsl:value-of select="substring-after(.,'COGNOI')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^foiblesse(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]oiblesse(\w*)$')"><xsl:value-of select="substring-before(.,'oiblesse')"/>aiblesse<xsl:value-of select="substring-after(.,'oiblesse')"/></xsl:if>
       <xsl:if test="matches(.,'^FOIBLESSE(\w*)$')">FAIBLESSE<xsl:value-of select="substring-after(.,'FOIBLESSE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^cueur$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ueur$')"><xsl:value-of select="substring-before(.,'ueur')"/>oeur<xsl:value-of select="substring-after(.,'ueur')"/></xsl:if>
       <xsl:if test="matches(.,'^CUEUR$')">COEUR<xsl:value-of select="substring-after(.,'CUEUR')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^beuf(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]euf(\w*)$')"><xsl:value-of select="substring-before(.,'euf')"/>oeuf<xsl:value-of select="substring-after(.,'euf')"/></xsl:if>
       <xsl:if test="matches(.,'^BEUF(\w*)$')">BOEUF<xsl:value-of select="substring-after(.,'BEUF')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^bezace(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]ezace(\w*)$')"><xsl:value-of select="substring-before(.,'bezace')"/>besace<xsl:value-of select="substring-after(.,'ezace')"/></xsl:if>
       <xsl:if test="matches(.,'^BEZACE(\w*)$')">BESACE<xsl:value-of select="substring-after(.,'BEZACE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^repous$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]epous$')"><xsl:value-of select="substring-before(.,'epous')"/>epos</xsl:if>
       <xsl:if test="matches(.,'^REPOUS$')">REPOS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^tyrant(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[tT]yrant(\w*)$')"><xsl:value-of select="substring-before(.,'yrant')"/>yran<xsl:value-of select="substring-after(.,'yrant')"/></xsl:if>
       <xsl:if test="matches(.,'^TYRANT(\w*)$')">TYRAN<xsl:value-of select="substring-after(.,'TYRANT')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ungs?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Uu]ngs?$')"><xsl:value-of select="substring-before(.,'ng')"/>n<xsl:value-of select="substring-after(.,'ng')"/></xsl:if>
       <xsl:if test="matches(.,'^UNGS?$')">UN<xsl:value-of select="substring-after(.,'UNG')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^fantasie(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]antasie(\w*)$')"><xsl:value-of select="substring-before(.,'antasie')"/>antaisie<xsl:value-of select="substring-after(.,'antasie')"/></xsl:if>
       <xsl:if test="matches(.,'^FANTASIE(\w*)$')">FANTAISIE<xsl:value-of select="substring-after(.,'FANTASIE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^cholere(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]holere(\w*)$')"><xsl:value-of select="substring-before(.,'holere')"/>olère<xsl:value-of select="substring-after(.,'holere')"/></xsl:if>
       <xsl:if test="matches(.,'^CHOLERE(\w*)$')">COLÈRE<xsl:value-of select="substring-after(.,'CHOLERE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^aumoins$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]umoins$')"><xsl:value-of select="substring-before(.,'umoins')"/>u moins</xsl:if>
       <xsl:if test="matches(.,'^AUMOINS$')">AU MOINS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^estomach(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]stomach(\w*)$')"><xsl:value-of select="substring-before(.,'stomach')"/>stomac<xsl:value-of select="substring-after(.,'stomach')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTOMACH(\w*)$')">ESTOMAC<xsl:value-of select="substring-after(.,'ESTOMACH')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^pis$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]is$')"><xsl:value-of select="substring-before(.,'is')"/>ire</xsl:if>
       <xsl:if test="matches(.,'^PIS$')">PIRE</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^lon$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]on$')"><xsl:value-of select="substring-before(.,'on')"/>'on</xsl:if>
       <xsl:if test="matches(.,'^LON$')">L'ON</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^ausquels$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]usquels$')"><xsl:value-of select="substring-before(.,'usquels')"/>uxquels</xsl:if>
       <xsl:if test="matches(.,'^AUSQUELS$')">AUXQUELS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^avanture(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]vanture(\w*)$')"><xsl:value-of select="substring-before(.,'vanture')"/>venture</xsl:if>
       <xsl:if test="matches(.,'^AVANTURE(\w*)$')">AVENTURE<xsl:value-of select="substring-after(.,'AVANTURE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^touts$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]outs$')"><xsl:value-of select="substring-before(.,'outs')"/>ous</xsl:if>
       <xsl:if test="matches(.,'^TOUTS$')">TOUS</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^oncques$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^oncques$')">onques</xsl:if>
       <xsl:if test="matches(.,'^Oncques$')">Onques</xsl:if>
       <xsl:if test="matches(.,'^ONCQUES$')">ONQUES</xsl:if></reg></choice>
            </xsl:when>
                
                <!--ACCENT-->

<xsl:when test="matches(.,'^(\w+)ees?$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ees?$')"><xsl:value-of select="substring-before(.,'ee')"/>ée<xsl:value-of select="substring-after(.,'ee')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)EES?$')"><xsl:value-of select="substring-before(.,'EE')"/>ÉE<xsl:value-of select="substring-after(.,'EE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^abbe[sz]$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]bbe[sz]$')"><xsl:value-of select="substring-before(.,'bbe')"/>bbés</xsl:if>
       <xsl:if test="matches(.,'^ABBE[ZS]$')">ABBÉS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^abbe$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]bbe$')"><xsl:value-of select="substring-before(.,'bbe')"/>bbé</xsl:if>
       <xsl:if test="matches(.,'^ABBE$')">ABBÉ</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^abreger$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]breger$')"><xsl:value-of select="substring-before(.,'breger')"/>bréger</xsl:if>
       <xsl:if test="matches(.,'^ABREGER$')">ABRÉGER</xsl:if></reg></choice>
</xsl:when> 
<xsl:when test="matches(.,'^agreable(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]greable(\w*)$')"><xsl:value-of select="substring-before(.,'greable')"/>gréable<xsl:value-of select="substring-after(.,'greable')"/></xsl:if>
       <xsl:if test="matches(.,'^AGREABLE(\w*)$')">AGRÉABLE<xsl:value-of select="substring-after(.,'AGREABLE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^allego(\w*)$', 'i')">
                    <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]llego(\w*)$')"><xsl:value-of select="substring-before(.,'llego')"/>llégo<xsl:value-of select="substring-after(.,'llego')"/></xsl:if>
       <xsl:if test="matches(.,'^ALLEGO(\w*)$')">ALLÉGO<xsl:value-of select="substring-after(.,'ALLEGO')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^altera(\w*)$', 'i')">
                    <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ltera(\w*)$')"><xsl:value-of select="substring-before(.,'ltera')"/>ltéra<xsl:value-of select="substring-after(.,'ltera')"/></xsl:if>
       <xsl:if test="matches(.,'^ALTERA(\w*)$')">ALTÉRA<xsl:value-of select="substring-after(.,'ALTERA')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^bene[vfd](\w+)$', 'i')">
                    <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]ene[vfd](\w+)$')"><xsl:value-of select="substring-before(.,'ene')"/>éné<xsl:value-of select="substring-after(.,'ene')"/></xsl:if>
       <xsl:if test="matches(.,'^BENE[VFD](\w+)$')">BÉNÉ<xsl:value-of select="substring-after(.,'BENE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^regl(\w+)$', 'i')">
                    <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]egl(\w+)$')"><xsl:value-of select="substring-before(.,'egl')"/>ègl<xsl:value-of select="substring-after(.,'egl')"/></xsl:if>
       <xsl:if test="matches(.,'^REGL(\w+)$')">RÈGL<xsl:value-of select="substring-after(.,'REGL')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^devot(\w*)$', 'i')">
                    <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]evot(\w*)$')"><xsl:value-of select="substring-before(.,'evot')"/>évot<xsl:value-of select="substring-after(.,'evot')"/></xsl:if>
       <xsl:if test="matches(.,'^DEVOT(\w*)$')">DÉVOT<xsl:value-of select="substring-after(.,'DEVOT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^conseq(\w+)$', 'i')">
                    <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]onseq(\w+)$')"><xsl:value-of select="substring-before(.,'onseq')"/>onséq<xsl:value-of select="substring-after(.,'onseq')"/></xsl:if>
       <xsl:if test="matches(.,'^CONSEQ(\w+)$')">CONSÉQ<xsl:value-of select="substring-after(.,'CONSEQ')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^tres$', 'i')">
                    <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]res$')"><xsl:value-of select="substring-before(.,'res')"/>rès</xsl:if>
       <xsl:if test="matches(.,'^TRES$')">TRÈS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^beat(\w*)$', 'i')">
                    <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]eat(\w*)$')"><xsl:value-of select="substring-before(.,'eat')"/>éat<xsl:value-of select="substring-after(.,'eat')"/></xsl:if>
       <xsl:if test="matches(.,'^BEAT(\w*)$')">BÉAT<xsl:value-of select="substring-after(.,'BEAT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(ais|malais|asse?ur|separ|desesper|moder|inconsider|figur|proportionn|importun|inopin|impun|passionn|opportun|(in)?commod|profond|express|confus|pos|nomm|conform|priv|reciproc)ement$', 'i')">
                    <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
        <xsl:if test="matches(.,'^(ais|malais|asse?ur|separ|desesper|moder|inconsider|figur|proportionn|importun|inopin|impun|passionn|opportun|(in)?commod|profond|express|confus|pos|nomm|conformt|priv|reciproc)ement(\w*)$')"><xsl:value-of select="substring-before(.,'ement')"/>ément</xsl:if>
        <xsl:if test="matches(.,'^(Ais|Malais|Asse?ur|Separ|Desesper|Moder|Inconsider|Figur|Proportionn|Importun|Inopin|Impun|Passionn|Opportun|Incommod|Commod|Profond|Express|Confus|Pos|Nomm|Conform|Priv|Reciproc)ement(\w*)$')"><xsl:value-of select="substring-before(.,'ement')"/>ément</xsl:if>
        <xsl:if test="matches(.,'^(AIS|MALAIS|ASSE?UR|SEPAR|DESESPER|MODER|INCONSIDER|FIGUR|PROPORTIONN|IMPORTUN|INOPIN|IMPUN|PASSIONN|OPPORTUN|INCOMMOD|COMMOD|PROFOND|EXPRESS|CONFUS|POS|NOMM|CONFORM|PRIV|RECIPROC)EMENT(\w*)$')"><xsl:value-of select="substring-before(.,'EMENT')"/>ÉMENT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^aysement$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ysement$')"><xsl:value-of select="substring-before(.,'ysement')"/>isément</xsl:if>
       <xsl:if test="matches(.,'^AYSEMENT$')"><xsl:value-of select="substring-before(.,'AYSEMENT')"/>AISÉMENT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^malaysement$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]alaysement$')"><xsl:value-of select="substring-before(.,'alaysement')"/>alaisément</xsl:if>
       <xsl:if test="matches(.,'^MALAYSEMENT$')"><xsl:value-of select="substring-before(.,'MALAYSEMENT')"/>MALAISÉMENT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^courtoysement$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ourtoysement$')"><xsl:value-of select="substring-before(.,'ourtoysement')"/>ourtoisement</xsl:if>
       <xsl:if test="matches(.,'^COURTOYSEMENT$')"><xsl:value-of select="substring-before(.,'COURTOYSEMENT')"/>COURTOISEMENT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^eshontement$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^eshontement$')">éhontément</xsl:if>
       <xsl:if test="matches(.,'^Eshontement$')">Éhontément</xsl:if>
       <xsl:if test="matches(.,'^ESHONTEMENT$')">ÉHONTÉMENT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^desesperément$', 'i')">
                    <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esesperément$')"><xsl:value-of select="substring-before(.,'esesperément')"/>esespérément</xsl:if>
       <xsl:if test="matches(.,'^DESESPERÉMENT$')">DESESPÉRÉMENT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^element(\w*)$', 'i')">
                    <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^element(\w*)$')">élément<xsl:value-of select="substring-after(.,'element')"/></xsl:if>
       <xsl:if test="matches(.,'^Element(\w*)$')">Élément<xsl:value-of select="substring-after(.,'Element')"/></xsl:if>
       <xsl:if test="matches(.,'^ELEMENT(\w*)$')">ÉLÉMENT<xsl:value-of select="substring-after(.,'ELEMENT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^evenement(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^evenement(\w*)$')">évènement<xsl:value-of select="substring-after(.,'evenement')"/></xsl:if>
    <xsl:if test="matches(.,'^Evenement(\w*)$')">Évènement<xsl:value-of select="substring-after(.,'Evenement')"/></xsl:if>
    <xsl:if test="matches(.,'^EVENEMENT(\w*)$')">ÉVÈNEMENT<xsl:value-of select="substring-after(.,'EVENEMENT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^advenement(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^[Aa]dvenement(\w*)$')">advènement<xsl:value-of select="substring-after(.,'dvenement')"/></xsl:if>
    <xsl:if test="matches(.,'^ADVENEMENT(\w*)$')">ADVÈNEMENT<xsl:value-of select="substring-after(.,'ADVENEMENT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)(il|qu)ites?$', 'i')">
                    <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)(il|qu)ites?$')"><xsl:value-of select="substring-before(.,'ite')"/>ité<xsl:value-of select="substring-after(.,'ite')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)(IL|QU)ITES?$')"><xsl:value-of select="substring-before(.,'ITE')"/>ITÉ<xsl:value-of select="substring-after(.,'ITE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)mities?$', 'i')">
                    <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)mities?$')"><xsl:value-of select="substring-before(.,'mitie')"/>mitié<xsl:value-of select="substring-after(.,'mitie')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)MITIES?$')"><xsl:value-of select="substring-before(.,'MITIE')"/>MITIÉ<xsl:value-of select="substring-after(.,'MITIE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)etiq(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)etiq(\w+)$')"><xsl:value-of select="substring-before(.,'etiq')"/>étiq<xsl:value-of select="substring-after(.,'etiq')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ETIQ(\w+)$')"><xsl:value-of select="substring-before(.,'ETIQ')"/>ÉTIQ<xsl:value-of select="substring-after(.,'ETIQ')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^pres$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]res$')"><xsl:value-of select="substring-before(.,'res')"/>rès</xsl:if>
       <xsl:if test="matches(.,'^PRES$')">PRÈS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^au?pres$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]u?pres$')"><xsl:value-of select="substring-before(.,'pres')"/>près</xsl:if>
       <xsl:if test="matches(.,'^AU?PRES$')"><xsl:value-of select="substring-before(.,'pres')"/>PRÈS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)elis[tm]es?$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)elis[tm]es?$')"><xsl:value-of select="substring-before(.,'elis')"/>élis<xsl:value-of select="substring-after(.,'elis')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ELIS[TM]ES?$')"><xsl:value-of select="substring-before(.,'ELIS')"/>ÉLIS<xsl:value-of select="substring-after(.,'ELIS')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^francois$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]rancois$')"><xsl:value-of select="substring-before(.,'rancois')"/>rançais</xsl:if>
       <xsl:if test="matches(.,'^FRANCOIS$')">FRANÇAIS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^elire$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^elire$')">élire</xsl:if>
       <xsl:if test="matches(.,'^Elire$')">Élire</xsl:if>                                
       <xsl:if test="matches(.,'^ELIRE$')">ÉLIRE</xsl:if></reg></choice>
</xsl:when>
                
                <!--AUTRE-->
<xsl:when test="matches(.,'^(\w+)ostre$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ostre$')"><xsl:value-of select="substring-before(.,'ostre')"/>otre</xsl:if>
       <xsl:if test="matches(.,'^(\w+)OSTRE$')"><xsl:value-of select="substring-before(.,'OSTRE')"/>OTRE</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^dueil(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ueil(\w*)$')"><xsl:value-of select="substring-before(.,'ueil')"/>euil<xsl:value-of select="substring-after(.,'ueil')"/></xsl:if>
       <xsl:if test="matches(.,'^DUEIL(\w*)$')">DEUIL<xsl:value-of select="substring-after(.,'DUEIL')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)ologe(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ologe(\w*)$')"><xsl:value-of select="substring-before(.,'ologe')"/>ologue<xsl:value-of select="substring-after(.,'ologe')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)OLOGE(\w*)$')">OLOGUE<xsl:value-of select="substring-after(.,'OLOGE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^verolez$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]erolez$')"><xsl:value-of select="substring-before(.,'erolez')"/>erolés</xsl:if>
       <xsl:if test="matches(.,'^VEROLEZ$')">VEROLÉS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^precept(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]recept(\w*)$')"><xsl:value-of select="substring-before(.,'recept')"/>récept<xsl:value-of select="substring-after(.,'recept')"/></xsl:if>
       <xsl:if test="matches(.,'^PRECEPT(\w*)$')">PRÉCEPT<xsl:value-of select="substring-after(.,'PRECEPT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^silenes?$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]ilenes?$')"><xsl:value-of select="substring-before(.,'ilene')"/>ilène<xsl:value-of select="substring-after(.,'ilene')"/></xsl:if>
       <xsl:if test="matches(.,'^SILENES?$')">SILÈNE<xsl:value-of select="substring-after(.,'SILENE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^oys(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]ys(\w*)$')"><xsl:value-of select="substring-before(.,'ys')"/>is<xsl:value-of select="substring-after(.,'ys')"/></xsl:if>
       <xsl:if test="matches(.,'^OYS(\w*)$')">OIS<xsl:value-of select="substring-after(.,'OYS')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^lievres?$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[ll]ievres?$')"><xsl:value-of select="substring-before(.,'ievre')"/>ièvre<xsl:value-of select="substring-after(.,'ievre')"/></xsl:if>
       <xsl:if test="matches(.,'^LIEVRES?$')">LIÈVRE<xsl:value-of select="substring-after(.,'LIEVRE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)fz$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)fz$')"><xsl:value-of select="substring-before(.,'fz')"/>fs</xsl:if>
       <xsl:if test="matches(.,'^(\w+)FZ$')"><xsl:value-of select="substring-before(.,'FZ')"/>FS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)servoit$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)servoit$')"><xsl:value-of select="substring-before(.,'servoit')"/>servait</xsl:if>
       <xsl:if test="matches(.,'^(\w+)SERVOIT$')"><xsl:value-of select="substring-before(.,'SERVOIT')"/>SERVAIT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)teriore(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)teriore(\w*)$')"><xsl:value-of select="substring-before(.,'teriore')"/>térieure<xsl:value-of select="substring-after(.,'teriore')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)TERIORE(\w*)$')"><xsl:value-of select="substring-before(.,'TERIORE')"/>TÉRIEURE<xsl:value-of select="substring-after(.,'TERIORE')"/></xsl:if></reg></choice>
</xsl:when>
            <xsl:when test="matches(.,'^guardian(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Gg]uardian(\w*)$')"><xsl:value-of select="substring-before(.,'uardian')"/>ardien<xsl:value-of select="substring-after(.,'uardian')"/></xsl:if>
                    <xsl:if test="matches(.,'^GUARDIAN(\w*)$')">GARDIEN<xsl:value-of select="substring-after(.,'GUARDIAN')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)guard(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)guard(\w*)$')"><xsl:value-of select="substring-before(.,'guard')"/>gard<xsl:value-of select="substring-after(.,'guard')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)GUARD(\w*)$')"><xsl:value-of select="substring-before(.,'GUARD')"/>GARD<xsl:value-of select="substring-after(.,'GUARD')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^guabelant$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]uabelant$')"><xsl:value-of select="substring-before(.,'uabelant')"/>abelant<xsl:value-of select="substring-after(.,'uabelant')"/></xsl:if>
       <xsl:if test="matches(.,'^GUABELANT$')">GABELANT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^republique(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]epublique(\w*)$')"><xsl:value-of select="substring-before(.,'epublique')"/>épublique<xsl:value-of select="substring-after(.,'epublique')"/></xsl:if>
       <xsl:if test="matches(.,'^REPUBLIQUE(\w*)$')">RÉPUBLIQUE<xsl:value-of select="substring-after(.,'REPUBLIQUE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^ouvrans$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]uvrans$')"><xsl:value-of select="substring-before(.,'uvrans')"/>uvrant</xsl:if>
       <xsl:if test="matches(.,'^OUVRANS$')">OUVRANT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^lisans$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]isans$')"><xsl:value-of select="substring-before(.,'isans')"/>isant</xsl:if>
       <xsl:if test="matches(.,'^LISANS$')">LISANT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^deprisement(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]eprisement(\w*)$')"><xsl:value-of select="substring-before(.,'eprisement')"/>éprisement<xsl:value-of select="substring-after(.,'eprisement')"/></xsl:if>
       <xsl:if test="matches(.,'^DEPRISEMENT(\w*)$')">DÉPRISEMENT<xsl:value-of select="substring-after(.,'DEPRISEMENT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^veiglent$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eiglent$')"><xsl:value-of select="substring-before(.,'eiglent')"/>euillent</xsl:if>
       <xsl:if test="matches(.,'^VEIGLENT$')">VEUILLENT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^prelude(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]relude(\w*)$')"><xsl:value-of select="substring-before(.,'relude')"/>rélude<xsl:value-of select="substring-after(.,'relude')"/></xsl:if>
       <xsl:if test="matches(.,'^PRELUDE(\w*)$')">PRÉLUDE<xsl:value-of select="substring-after(.,'PRELUDE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^dignite(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ignite(\w*)$')"><xsl:value-of select="substring-before(.,'ignite')"/>ignité<xsl:value-of select="substring-after(.,'ignite')"/></xsl:if>
       <xsl:if test="matches(.,'^DIGNITE(\w*)$')">DIGNITÉ<xsl:value-of select="substring-after(.,'DIGNITE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^folaterie(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]olaterie(\w*)$')"><xsl:value-of select="substring-before(.,'olaterie')"/>olâtrerie<xsl:value-of select="substring-after(.,'olaterie')"/></xsl:if>
       <xsl:if test="matches(.,'^FOLATERIE(\w*)$')">FOLÂTRERIE<xsl:value-of select="substring-after(.,'FOLATERIE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^folastre(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]olastre(\w*)$')"><xsl:value-of select="substring-before(.,'olastre')"/>olâtre<xsl:value-of select="substring-after(.,'olastre')"/></xsl:if>
       <xsl:if test="matches(.,'^FOLASTRE(\w*)$')">FOLÂTRE<xsl:value-of select="substring-after(.,'FOLASTRE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)querir$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Qq]uerir$')"><xsl:value-of select="substring-before(.,'uerir')"/>uérir</xsl:if>
       <xsl:if test="matches(.,'^(\w*)QUERIR$')"><xsl:value-of select="substring-before(.,'QUERIR')"/>QUÉRIR</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^deri(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]eri(\w*)$')"><xsl:value-of select="substring-before(.,'eri')"/>éri<xsl:value-of select="substring-after(.,'eri')"/></xsl:if>
       <xsl:if test="matches(.,'^DERI(\w*)$')">DÉRI<xsl:value-of select="substring-after(.,'DERI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^[rd]edu(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[DdRr]edu(\w*)$')"><xsl:value-of select="substring-before(.,'edu')"/>édu<xsl:value-of select="substring-after(.,'edu')"/></xsl:if>
       <xsl:if test="matches(.,'^[RD]EDU(\w*)$')"><xsl:value-of select="substring-before(.,'EDU')"/>ÉDU<xsl:value-of select="substring-after(.,'EDU')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^legierete(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]egierete(\w*)$')"><xsl:value-of select="substring-before(.,'egierete')"/>égèreté<xsl:value-of select="substring-after(.,'egierete')"/></xsl:if>
       <xsl:if test="matches(.,'^LEGIERETE(\w*)$')">ÉGÈRETÉ<xsl:value-of select="substring-after(.,'LEGIERETE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^legiere(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]egiere(\w*)$')"><xsl:value-of select="substring-before(.,'egiere')"/>égère<xsl:value-of select="substring-after(.,'egiere')"/></xsl:if>
       <xsl:if test="matches(.,'^LEGIERE(\w*)$')">ÉGÈRE<xsl:value-of select="substring-after(.,'LEGIERE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^vestu(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]estu(\w*)$')"><xsl:value-of select="substring-before(.,'estu')"/>êtu<xsl:value-of select="substring-after(.,'estu')"/></xsl:if>
       <xsl:if test="matches(.,'^VESTU(\w*)$')">VÊTU<xsl:value-of select="substring-after(.,'VESTU')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^hespanol(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^hespanol(\w*)$')"><xsl:value-of select="substring-before(.,'hespanol')"/>espagnol<xsl:value-of select="substring-after(.,'hespanol')"/></xsl:if>
       <xsl:if test="matches(.,'^Hespanol(\w*)$')"><xsl:value-of select="substring-before(.,'Hespanol')"/>Espagnol<xsl:value-of select="substring-after(.,'Hespanol')"/></xsl:if>
       <xsl:if test="matches(.,'^HESPANOL(\w*)$')">ESPAGNOL<xsl:value-of select="substring-after(.,'HESPANOL')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)romettoi(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)romettoi(\w*)$')"><xsl:value-of select="substring-before(.,'romettoi')"/>romettai<xsl:value-of select="substring-after(.,'romettoi')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ROMETTOI(\w*)$')"><xsl:value-of select="substring-before(.,'ROMETTOI')"/>ROMETTAI<xsl:value-of select="substring-after(.,'ROMETTOI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^pretendoi(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]retendoi(\w*)$')"><xsl:value-of select="substring-before(.,'retendoi')"/>rétendai<xsl:value-of select="substring-after(.,'retendoi')"/></xsl:if>
       <xsl:if test="matches(.,'^PRETENDOI(\w*)$')">PRÉTENDAI<xsl:value-of select="substring-after(.,'PRETENDOI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^literal(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]iteral(\w*)$')"><xsl:value-of select="substring-before(.,'iteral')"/>ittéral<xsl:value-of select="substring-after(.,'iteral')"/></xsl:if>
       <xsl:if test="matches(.,'^LITERAL(\w*)$')">LITTÉRAL<xsl:value-of select="substring-after(.,'LITERAL')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^demour(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]emour(\w*)$')"><xsl:value-of select="substring-before(.,'emour')"/>emeur<xsl:value-of select="substring-after(.,'emour')"/></xsl:if>
       <xsl:if test="matches(.,'^DEMOUR(\w*)$')">DEMEUR<xsl:value-of select="substring-after(.,'DEMOUR')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^sirene(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]irene(\w*)$')"><xsl:value-of select="substring-before(.,'irene')"/>irène<xsl:value-of select="substring-after(.,'irene')"/></xsl:if>
       <xsl:if test="matches(.,'^SIRENE(\w*)$')">SIRÈNE<xsl:value-of select="substring-after(.,'SIRENE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^gaiete(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]aiete(\w*)$')"><xsl:value-of select="substring-before(.,'aiete')"/>aieté<xsl:value-of select="substring-after(.,'aiete')"/></xsl:if>
       <xsl:if test="matches(.,'^GAIETE(\w*)$')">GAIETÉ<xsl:value-of select="substring-after(.,'GAIETE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^crochetastes$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]rochetastes$')"><xsl:value-of select="substring-before(.,'rochetastes')"/>rochetâtes</xsl:if>
       <xsl:if test="matches(.,'^CROCHETASTES$')">CROCHETÂTES</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^veist$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eist$')"><xsl:value-of select="substring-before(.,'eist')"/>it</xsl:if>
       <xsl:if test="matches(.,'^VEIST$')">VIT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^veistes$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eistes$')"><xsl:value-of select="substring-before(.,'eistes')"/>îtes</xsl:if>
       <xsl:if test="matches(.,'^VEISTES$')">VÎTES</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^contenen(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ontenen(\w*)$')"><xsl:value-of select="substring-before(.,'ontenen')"/>ontenan<xsl:value-of select="substring-after(.,'ontenen')"/></xsl:if>
       <xsl:if test="matches(.,'^CONTENEN(\w*)$')">CONTENAN<xsl:value-of select="substring-after(.,'CONTENEN')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^medulare(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]edulare(\w*)$')"><xsl:value-of select="substring-before(.,'edulare')"/>édullaire<xsl:value-of select="substring-after(.,'edulare')"/></xsl:if>
       <xsl:if test="matches(.,'^MEDULARE(\w*)$')">MÉDULLAIRE<xsl:value-of select="substring-after(.,'MEDULARE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^beste(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]este(\w*)$')"><xsl:value-of select="substring-before(.,'este')"/>ête<xsl:value-of select="substring-after(.,'este')"/></xsl:if>
       <xsl:if test="matches(.,'^BESTE(\w*)$')">BÊTE<xsl:value-of select="substring-after(.,'BESTE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^pretend(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]retend(\w*)$')"><xsl:value-of select="substring-before(.,'retend')"/>rétend<xsl:value-of select="substring-after(.,'retend')"/></xsl:if>
       <xsl:if test="matches(.,'^PRETEND(\w*)$')">PRÉTEND<xsl:value-of select="substring-after(.,'PRETEND')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^deli(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]eli(\w+)$')"><xsl:value-of select="substring-before(.,'eli')"/>éli<xsl:value-of select="substring-after(.,'eli')"/></xsl:if>
       <xsl:if test="matches(.,'^DELI(\w+)$')">DÉLI<xsl:value-of select="substring-after(.,'DELI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^mouelle(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ouelle(\w*)$')"><xsl:value-of select="substring-before(.,'ouelle')"/>oelle<xsl:value-of select="substring-after(.,'ouelle')"/></xsl:if>
       <xsl:if test="matches(.,'^MOUELLE(\w*)$')">MOELLE<xsl:value-of select="substring-after(.,'MOUELLE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^gresse(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]resse(\w*)$')"><xsl:value-of select="substring-before(.,'resse')"/>raisse<xsl:value-of select="substring-after(.,'resse')"/></xsl:if>
       <xsl:if test="matches(.,'^GRESSE(\w*)$')">GRAISSE<xsl:value-of select="substring-after(.,'GRESSE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^legiers?$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]egiers?$')"><xsl:value-of select="substring-before(.,'legier')"/>léger<xsl:value-of select="substring-after(.,'legier')"/></xsl:if>
       <xsl:if test="matches(.,'^LEGIERS?$')">LÉGER<xsl:value-of select="substring-after(.,'LEGIER')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^hardiz$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]ardiz$')"><xsl:value-of select="substring-before(.,'ardiz')"/>ardis</xsl:if>
       <xsl:if test="matches(.,'^HARDIZ$')">HARDIS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^medit(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]edit(\w+)$')"><xsl:value-of select="substring-before(.,'edit')"/>édit<xsl:value-of select="substring-after(.,'edit')"/></xsl:if>
       <xsl:if test="matches(.,'^MEDIT(\w+)$')">MÉDIT<xsl:value-of select="substring-after(.,'MEDIT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^reveler(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]eveler(\w+)$')"><xsl:value-of select="substring-before(.,'eveler')"/>évèler<xsl:value-of select="substring-after(.,'eveler')"/></xsl:if>
       <xsl:if test="matches(.,'^REVELER(\w+)$')">RÉVÈLER<xsl:value-of select="substring-after(.,'REVELER')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^oeconomique(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^oeconomi(\w*)$')">économi<xsl:value-of select="substring-after(.,'oeconomi')"/></xsl:if>
       <xsl:if test="matches(.,'^Oeconomi(\w*)$')">économi<xsl:value-of select="substring-after(.,'oeconomi')"/></xsl:if>
       <xsl:if test="matches(.,'^OECONOMI(\w*)$')">ÉCONOMI<xsl:value-of select="substring-after(.,'OECONOMI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^croiez$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]roiez$')"><xsl:value-of select="substring-before(.,'roiez')"/>royez</xsl:if>
       <xsl:if test="matches(.,'^CROIEZ$')">CROYEZ</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^pensast$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ensast$')"><xsl:value-of select="substring-before(.,'ensast')"/>ensât</xsl:if>
       <xsl:if test="matches(.,'^PENSAST$')">PENSÂT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^meta(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]eta(\w*)$')"><xsl:value-of select="substring-before(.,'eta')"/>éta<xsl:value-of select="substring-after(.,'eta')"/></xsl:if>
       <xsl:if test="matches(.,'^META(\w*)$')">MÉTA<xsl:value-of select="substring-after(.,'META')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^demo(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]emo(\w+)$')"><xsl:value-of select="substring-before(.,'emo')"/>émo<xsl:value-of select="substring-after(.,'emo')"/></xsl:if>
       <xsl:if test="matches(.,'^DEMO(\w+)$')">DÉMO<xsl:value-of select="substring-after(.,'DEMO')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^fols$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ols$')"><xsl:value-of select="substring-before(.,'ols')"/>ous</xsl:if>
       <xsl:if test="matches(.,'^FOLS$')">FOUS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^beviez$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]eviez$')"><xsl:value-of select="substring-before(.,'eviez')"/>uviez</xsl:if>
       <xsl:if test="matches(.,'^BEVIEZ$')">BUVIEZ</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^perdiz$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]erdiz$')"><xsl:value-of select="substring-before(.,'erdiz')"/>erdis</xsl:if>
       <xsl:if test="matches(.,'^PERDIZ$')">PERDIS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^profund(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]rofund(\w*)$')"><xsl:value-of select="substring-before(.,'rofund')"/>rofond<xsl:value-of select="substring-after(.,'rofund')"/></xsl:if>
       <xsl:if test="matches(.,'^PROFUND(\w*)$')">PROFOND<xsl:value-of select="substring-after(.,'PROFUND')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^tesmo(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]esmo(\w+)$')"><xsl:value-of select="substring-before(.,'esmo')"/>émo<xsl:value-of select="substring-after(.,'esmo')"/></xsl:if>
       <xsl:if test="matches(.,'^TESMO(\w+)$')">TÉMO<xsl:value-of select="substring-after(.,'TESMO')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^malautru(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]alautru(\w*)$')"><xsl:value-of select="substring-before(.,'alautru')"/>alotru<xsl:value-of select="substring-after(.,'alautru')"/></xsl:if>
       <xsl:if test="matches(.,'^MALAUTRU(\w*)$')">MALOTRU<xsl:value-of select="substring-after(.,'MALAUTRU')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^sentoy(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]entoy(\w+)$')"><xsl:value-of select="substring-before(.,'entoy')"/>entai<xsl:value-of select="substring-after(.,'entoy')"/></xsl:if>
       <xsl:if test="matches(.,'^SENTOY(\w+)$')">SENTAI<xsl:value-of select="substring-after(.,'SENTOY')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^friant(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]riant(\w*)$')"><xsl:value-of select="substring-before(.,'riant')"/>riand<xsl:value-of select="substring-after(.,'riant')"/></xsl:if>
       <xsl:if test="matches(.,'^FRIANT(\w*)$')">FRIAND<xsl:value-of select="substring-after(.,'FRIANT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^huill(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]uill(\w*)$')"><xsl:value-of select="substring-before(.,'uill')"/>uil<xsl:value-of select="substring-after(.,'uill')"/></xsl:if>
       <xsl:if test="matches(.,'^HUILL(\w*)$')">HUIL<xsl:value-of select="substring-after(.,'HUILL')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^huyle(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]uyle(\w*)$')"><xsl:value-of select="substring-before(.,'uyle')"/>uile<xsl:value-of select="substring-after(.,'uyle')"/></xsl:if>
       <xsl:if test="matches(.,'^HUYLE(\w*)$')">HUILE<xsl:value-of select="substring-after(.,'HUYLE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)rendray(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Rr]endray(\w*)$')"><xsl:value-of select="substring-before(.,'endray')"/>endrai<xsl:value-of select="substring-after(.,'endray')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)RENDRAY(\w*)$')"><xsl:value-of select="substring-before(.,'RENDRAY')"/>RENDRAI<xsl:value-of select="substring-after(.,'RENDRAY')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^die$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ie$')"><xsl:value-of select="substring-before(.,'ie')"/>it</xsl:if>
       <xsl:if test="matches(.,'^DIE$')">DIT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^fist$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ist$')"><xsl:value-of select="substring-before(.,'ist')"/>it</xsl:if>
       <xsl:if test="matches(.,'^FIST$')">FIT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^disoi(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]isoi(\w*)$')"><xsl:value-of select="substring-before(.,'isoi')"/>isai<xsl:value-of select="substring-after(.,'isoi')"/></xsl:if>
       <xsl:if test="matches(.,'^DISOI(\w*)$')">DISAI<xsl:value-of select="substring-after(.,'DISOI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^dépendoi(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]épendoi(\w*)$')"><xsl:value-of select="substring-before(.,'épendoi')"/>épendai<xsl:value-of select="substring-after(.,'épendoi')"/></xsl:if>
       <xsl:if test="matches(.,'^DÉPENDOI(\w*)$')">DÉPENDAI<xsl:value-of select="substring-after(.,'DÉPENDOI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)sentoi(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Ss]entoi(\w*)$')"><xsl:value-of select="substring-before(.,'entoi')"/>entai<xsl:value-of select="substring-after(.,'entoi')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)SENTOI(\w*)$')"><xsl:value-of select="substring-before(.,'SENTOI')"/>SENTAI<xsl:value-of select="substring-after(.,'SENTOI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^serpilliere(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]erpilliere(\w*)$')"><xsl:value-of select="substring-before(.,'erpilliere')"/>erpillère<xsl:value-of select="substring-after(.,'erpilliere')"/></xsl:if>
       <xsl:if test="matches(.,'^SERPILLIERE(\w*)$')">SERPILLÈRE<xsl:value-of select="substring-after(.,'SERPILLIERE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^interpretez$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ii]nterpretez$')"><xsl:value-of select="substring-before(.,'nterpretez')"/>nterprétez</xsl:if>
       <xsl:if test="matches(.,'^INTERPRETEZ$')">INTERPRÉTEZ</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^paist$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]aist$')"><xsl:value-of select="substring-before(.,'aist')"/>aît</xsl:if>
       <xsl:if test="matches(.,'^PAIST$')">PAÎT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^povoir$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ovoir$')"><xsl:value-of select="substring-before(.,'ovoir')"/>ouvoir</xsl:if>
       <xsl:if test="matches(.,'^POVOIR$')">POUVOIR</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^esba(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^esba(\w*)$')">éba<xsl:value-of select="substring-after(.,'esba')"/></xsl:if>
       <xsl:if test="matches(.,'^Esba(\w*)$')">Éba<xsl:value-of select="substring-after(.,'Esba')"/></xsl:if>
       <xsl:if test="matches(.,'^ESBA(\w*)$')">ÉBA<xsl:value-of select="substring-after(.,'ESBA')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^guayement$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]uayement$')"><xsl:value-of select="substring-before(.,'uayement')"/>aiement</xsl:if>
       <xsl:if test="matches(.,'^GUAYEMENT$')">GAIEMENT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^viets$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]iets$')"><xsl:value-of select="substring-before(.,'iets')"/>its</xsl:if>
       <xsl:if test="matches(.,'^VIETS$')">VITS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^soubvienne(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]oubvienne(\w*)$')"><xsl:value-of select="substring-before(.,'oubvienne')"/>ouvienne<xsl:value-of select="substring-after(.,'oubvienne')"/></xsl:if>
       <xsl:if test="matches(.,'^SOUBVIENNE(\w*)$')">SOUVIENNE<xsl:value-of select="substring-after(.,'SOUBVIENNE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^my$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]y$')"><xsl:value-of select="substring-before(.,'y')"/>i</xsl:if>
       <xsl:if test="matches(.,'^MY$')">MI</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^metys$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]etys$')"><xsl:value-of select="substring-before(.,'etys')"/>etis</xsl:if>
       <xsl:if test="matches(.,'^METYS$')">METIS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^genealogie(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]enealogie(\w*)$')"><xsl:value-of select="substring-before(.,'enealogie')"/>énéalogie<xsl:value-of select="substring-after(.,'enealogie')"/></xsl:if>
       <xsl:if test="matches(.,'^GENEALOGIE(\w*)$')">GÉNÉALOGIE<xsl:value-of select="substring-after(.,'GENEALOGIE')"/></xsl:if></reg></choice>
</xsl:when>        
<xsl:when test="matches(.,'^remects$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^[Rr]emects$')"><xsl:value-of select="substring-before(.,'emects')"/>emets</xsl:if>
    <xsl:if test="matches(.,'^REMECTS$')">REMETS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^geands?$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^[Gg]eands?$')"><xsl:value-of select="substring-before(.,'eand')"/>éant<xsl:value-of select="substring-after(.,'eand')"/></xsl:if>
    <xsl:if test="matches(.,'^GEANDS?(\w*)$')">GÉANT<xsl:value-of select="substring-after(.,'GEAND')"/></xsl:if></reg></choice>
</xsl:when> 
<xsl:when test="matches(.,'^nasqui(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^[Nn]asqui(\w+)$')"><xsl:value-of select="substring-before(.,'asqui')"/>aqui<xsl:value-of select="substring-after(.,'asqui')"/></xsl:if>
    <xsl:if test="matches(.,'^NASQUI(\w+)$')">NAQUI<xsl:value-of select="substring-after(.,'NASQUI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^remects$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^[Rr]emects$')"><xsl:value-of select="substring-before(.,'emects')"/>emets</xsl:if>
    <xsl:if test="matches(.,'^REMECTS$')">REMETS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^yssit$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^yssit$')"><xsl:value-of select="substring-before(.,'yssit')"/>issit</xsl:if>
    <xsl:if test="matches(.,'^Yssit$')"><xsl:value-of select="substring-before(.,'Yssit')"/>Issit</xsl:if>
    <xsl:if test="matches(.,'^YSSIT$')">ISSIT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^fascher(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^[Ff]ascher(\w+)$')"><xsl:value-of select="substring-before(.,'ascher')"/>âcher<xsl:value-of select="substring-after(.,'ascher')"/></xsl:if>
    <xsl:if test="matches(.,'^FASCHER(\w+)$')">FÂCHER<xsl:value-of select="substring-after(.,'FASCHER')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^plairoi(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^[Pp]lairoi(\w*)$')"><xsl:value-of select="substring-before(.,'lairoi')"/>lairai<xsl:value-of select="substring-after(.,'lairoi')"/></xsl:if>
    <xsl:if test="matches(.,'^PLAIROI(\w*)$')">PLAIRAI<xsl:value-of select="substring-after(.,'PLAIROI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^sust$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^[Ss]ust$')"><xsl:value-of select="substring-before(.,'ust')"/>ût</xsl:if>
    <xsl:if test="matches(.,'^SUST$')">SÛT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^jusques$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
    <xsl:if test="matches(.,'^[Jj]usques$')"><xsl:value-of select="substring-before(.,'usques')"/>usque</xsl:if>
    <xsl:if test="matches(.,'^JUSQUES$')">JUSQUE</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^aujourdhuy$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ujourdhuy$')"><xsl:value-of select="substring-before(.,'ujourdhuy')"/>ujourd'hui</xsl:if>
       <xsl:if test="matches(.,'^AUJOURDHUY$')">AUJOURD'HUI</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^ducz$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ucz$')"><xsl:value-of select="substring-before(.,'ucz')"/>ucs</xsl:if>
       <xsl:if test="matches(.,'^DUCZ$')">DUCS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^descenduz$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]escenduz$')"><xsl:value-of select="substring-before(.,'escenduz')"/>escendus</xsl:if>
       <xsl:if test="matches(.,'^DESCENDUZ$')">DESCENDUS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^coustrets$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]oustrets$')"><xsl:value-of select="substring-before(.,'oustrets')"/>outrets</xsl:if>
       <xsl:if test="matches(.,'^COUSTRETS$')">COUTRETS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^hostiaire(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^hostiaire(\w*)$')">ostiaire<xsl:value-of select="substring-after(.,'hostiaire')"/></xsl:if>
       <xsl:if test="matches(.,'^Hostiaire(\w*)$')">Ostiaire<xsl:value-of select="substring-after(.,'Hostiaire')"/></xsl:if>
       <xsl:if test="matches(.,'^HOSTIAIRE(\w*)$')">OSTIAIRE<xsl:value-of select="substring-after(.,'HOSTIAIRE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^grandz$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]randz$')"><xsl:value-of select="substring-before(.,'randz')"/>rands</xsl:if>
       <xsl:if test="matches(.,'^GRANDZ$')">GRANDS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^es$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^es$')">ès</xsl:if>
       <xsl:if test="matches(.,'^Es$')">Ès</xsl:if>
       <xsl:if test="matches(.,'^ES$')">ÈS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^auseroie$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^auseroie$')">oserais</xsl:if>
       <xsl:if test="matches(.,'^Auseroie$')">Oserais</xsl:if>
       <xsl:if test="matches(.,'^AUSEROIE$')">OSERAIS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^soubhaitt(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]oubhaitt(\w+)$')"><xsl:value-of select="substring-before(.,'oubhaitt')"/>ouhait<xsl:value-of select="substring-after(.,'oubhaitt')"/></xsl:if>
       <xsl:if test="matches(.,'^SOUBHAITT(\w+)$')">SOUHAIT<xsl:value-of select="substring-after(.,'SOUBHAITT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^beuvans$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]euvans$')"><xsl:value-of select="substring-before(.,'euvans')"/>uvant<xsl:value-of select="substring-after(.,'euvans')"/></xsl:if>
       <xsl:if test="matches(.,'^BEUVANS(\w+)$')">BUVANT<xsl:value-of select="substring-after(.,'BEUVANS')"/></xsl:if></reg></choice>
</xsl:when>
            <xsl:when test="matches(.,'^beuveries?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]euveries?$')"><xsl:value-of select="substring-before(.,'euverie')"/>euverie<xsl:value-of select="substring-after(.,'euverie')"/></xsl:if>
                    <xsl:if test="matches(.,'^BEUVERIES?$')">BEUVERIE<xsl:value-of select="substring-after(.,'BEUVERIE')"/></xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^beuv(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]euv(\w+)$')"><xsl:value-of select="substring-before(.,'euv')"/>uv<xsl:value-of select="substring-after(.,'euv')"/></xsl:if>
       <xsl:if test="matches(.,'^BEUV(\w+)$')">BUV<xsl:value-of select="substring-after(.,'BEUV')"/></xsl:if></reg></choice>
</xsl:when>
            <xsl:when test="matches(.,'^beu$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]eu$')"><xsl:value-of select="substring-before(.,'eu')"/>u</xsl:if>
                    <xsl:if test="matches(.,'^BEU$')">BU</xsl:if></reg></choice>
            </xsl:when>
<xsl:when test="matches(.,'^calumni(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]alumni(\w+)$')"><xsl:value-of select="substring-before(.,'alumni')"/>alomni<xsl:value-of select="substring-after(.,'alumni')"/></xsl:if>
       <xsl:if test="matches(.,'^CALUMNI(\w+)$')">CALOMNI<xsl:value-of select="substring-after(.,'CALUMNI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^caffars$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]affars$')"><xsl:value-of select="substring-before(.,'affars')"/>afards</xsl:if>
       <xsl:if test="matches(.,'^CAFFARS$')">CAFFARDS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^excluse(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^excluse(\w*)$')">écluse<xsl:value-of select="substring-after(.,'excluse')"/></xsl:if>
       <xsl:if test="matches(.,'^Excluse(\w*)$')">Écluse<xsl:value-of select="substring-after(.,'Excluse')"/></xsl:if>
       <xsl:if test="matches(.,'^EXCLUSE(\w*)$')">ÉCLUSE<xsl:value-of select="substring-after(.,'EXCLUSE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^goubel(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]oubel(\w+)$')"><xsl:value-of select="substring-before(.,'oubel')"/>obel<xsl:value-of select="substring-after(.,'oubel')"/></xsl:if>
       <xsl:if test="matches(.,'^GOUBEL(\w+)$')">GOBEL<xsl:value-of select="substring-after(.,'GOUBEL')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^assiet$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ssiet$')"><xsl:value-of select="substring-before(.,'ssiet')"/>ssied</xsl:if>
       <xsl:if test="matches(.,'^ASSIET$')">ASSIED</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^mylieu$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ylieu$')"><xsl:value-of select="substring-before(.,'ylieu')"/>ilieu</xsl:if>
       <xsl:if test="matches(.,'^MYLIEU$')">MILIEU</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^joly(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Jj]oly(\w*)$')"><xsl:value-of select="substring-before(.,'oly')"/>oli<xsl:value-of select="substring-after(.,'oly')"/></xsl:if>
       <xsl:if test="matches(.,'^JOLY(\w*)$')">JOLI<xsl:value-of select="substring-after(.,'JOLY')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^moisy(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]oisy(\w*)$')"><xsl:value-of select="substring-before(.,'oisy')"/>oisi<xsl:value-of select="substring-after(.,'oisy')"/></xsl:if>
       <xsl:if test="matches(.,'^MOISY(\w*)$')">MOISI<xsl:value-of select="substring-after(.,'MOISY')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^cere(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ere(\w*)$')"><xsl:value-of select="substring-before(.,'ere')"/>ire<xsl:value-of select="substring-after(.,'ere')"/></xsl:if>
       <xsl:if test="matches(.,'^CERE(\w*)$')">CIRE<xsl:value-of select="substring-after(.,'CERE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^poine(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]oine(\w*)$')"><xsl:value-of select="substring-before(.,'oine')"/>eine<xsl:value-of select="substring-after(.,'oine')"/></xsl:if>
       <xsl:if test="matches(.,'^POINE(\w*)$')">PEINE<xsl:value-of select="substring-after(.,'POINE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^povoi(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ovoi(\w*)$')"><xsl:value-of select="substring-before(.,'ovoi')"/>ouvai<xsl:value-of select="substring-after(.,'ovoi')"/></xsl:if>
       <xsl:if test="matches(.,'^POVOI(\w*)$')">POUVAI<xsl:value-of select="substring-after(.,'POVOI')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^reconoître$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]econoître$')"><xsl:value-of select="substring-before(.,'econoître')"/>econnaître</xsl:if>
       <xsl:if test="matches(.,'^RECONOÎTRE$')">RECONNAÎTRE</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^ranc$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]anc$')"><xsl:value-of select="substring-before(.,'anc')"/>ang</xsl:if>
       <xsl:if test="matches(.,'^RANC$')">RANG</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^fuz$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]uz$')"><xsl:value-of select="substring-before(.,'uz')"/>us</xsl:if>
       <xsl:if test="matches(.,'^FUZ$')">FUS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^practiquant(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ractiquant(\w*)$')"><xsl:value-of select="substring-before(.,'ractiquant')"/>ratiquant<xsl:value-of select="substring-after(.,'ractiquant')"/></xsl:if>
       <xsl:if test="matches(.,'^PRACTIQUANT(\w*)$')">PRATIQUANT<xsl:value-of select="substring-after(.,'PRACTIQUANT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^practicant(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Pp]racticant(\w*)$')"><xsl:value-of select="substring-before(.,'racticant')"/>ratiquant<xsl:value-of select="substring-after(.,'racticant')"/></xsl:if>
                                <xsl:if test="matches(.,'^PRACTICANT(\w*)$')">PRATIQUANT<xsl:value-of select="substring-after(.,'PRACTICANT')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^translatay(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]ranslatay(\w*)$')"><xsl:value-of select="substring-before(.,'ranslatay')"/>ranslatai<xsl:value-of select="substring-after(.,'ranslatay')"/></xsl:if>
       <xsl:if test="matches(.,'^TRANSLATAY(\w*)$')">TRANSLATAI<xsl:value-of select="substring-after(.,'TRANSLATAY')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^contien$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ontien$')"><xsl:value-of select="substring-before(.,'ontien')"/>ontient</xsl:if>
       <xsl:if test="matches(.,'^CONTIEN$')">CONTIENT</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^goubel(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]oubel(\w+)$')"><xsl:value-of select="substring-before(.,'oubel')"/>obel<xsl:value-of select="substring-after(.,'oubel')"/></xsl:if>
       <xsl:if test="matches(.,'^GOUBEL(\w+)$')">GOBEL<xsl:value-of select="substring-after(.,'GOUBEL')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^ded(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ed(\w+)$')"><xsl:value-of select="substring-before(.,'ed')"/>éd<xsl:value-of select="substring-after(.,'ed')"/></xsl:if>
       <xsl:if test="matches(.,'^DED(\w+)$')">DÉD<xsl:value-of select="substring-after(.,'DED')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^dialoge(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ialoge(\w*)$')"><xsl:value-of select="substring-before(.,'ialoge')"/>ialogue<xsl:value-of select="substring-after(.,'ialoge')"/></xsl:if>
       <xsl:if test="matches(.,'^DIALOGE(\w*)$')">DIALOGUE<xsl:value-of select="substring-after(.,'DIALOGE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^apothecaire(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]pothecaire(\w*)$')"><xsl:value-of select="substring-before(.,'pothecaire')"/>pothicaire<xsl:value-of select="substring-after(.,'pothecaire')"/></xsl:if>
       <xsl:if test="matches(.,'^APOTHECAIRE(\w*)$')">APOTHICAIRE<xsl:value-of select="substring-after(.,'APOTHECAIRE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^bridez$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]ridez$')"><xsl:value-of select="substring-before(.,'ridez')"/>ridés</xsl:if>
       <xsl:if test="matches(.,'^BRIDEZ$')">BRIDÉS</xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^boucqs?$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]oucqs?(\w*)$')"><xsl:value-of select="substring-before(.,'oucq')"/>ouc<xsl:value-of select="substring-after(.,'oucq')"/></xsl:if>
       <xsl:if test="matches(.,'^BOUCQS?(\w*)$')">BOUC<xsl:value-of select="substring-after(.,'BOUCQ')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^pinture(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]inture(\w*)$')"><xsl:value-of select="substring-before(.,'inture')"/>einture<xsl:value-of select="substring-after(.,'inture')"/></xsl:if>
       <xsl:if test="matches(.,'^PINTURE(\w*)$')">PEINTURE<xsl:value-of select="substring-after(.,'PINTURE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^rustics?$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]ustics?(\w*)$')"><xsl:value-of select="substring-before(.,'ustic')"/>ustique<xsl:value-of select="substring-after(.,'ustic')"/></xsl:if>
       <xsl:if test="matches(.,'^RUSTICS?(\w*)$')">RUSTIQUE<xsl:value-of select="substring-after(.,'RUSTIC')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^boytes?$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]oytes?(\w*)$')"><xsl:value-of select="substring-before(.,'oyte')"/>oite<xsl:value-of select="substring-after(.,'oyte')"/></xsl:if>
       <xsl:if test="matches(.,'^BOYTES?(\w*)$')">BOITE<xsl:value-of select="substring-after(.,'BOYTE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^facille(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]acille(\w*)$')"><xsl:value-of select="substring-before(.,'acille')"/>acile<xsl:value-of select="substring-after(.,'acille')"/></xsl:if>
       <xsl:if test="matches(.,'^FACILLE(\w*)$')">FACILE<xsl:value-of select="substring-after(.,'FACILLE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^mocqu(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ocqu(\w+)$')"><xsl:value-of select="substring-before(.,'ocqu')"/>oqu<xsl:value-of select="substring-after(.,'ocqu')"/></xsl:if>
       <xsl:if test="matches(.,'^MOCQU(\w+)$')">MOQU<xsl:value-of select="substring-after(.,'MOCQU')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^correspondente(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]orrespondente(\w*)$')"><xsl:value-of select="substring-before(.,'orrespondente')"/>orrespondante<xsl:value-of select="substring-after(.,'orrespondente')"/></xsl:if>
       <xsl:if test="matches(.,'^CORRESPONDENTE(\w*)$')">CORRESPONDANTE<xsl:value-of select="substring-after(.,'CORRESPONDENTE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^interpreter(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ii]nterpreter(\w*)$')"><xsl:value-of select="substring-before(.,'nterpreter')"/>nterpréter<xsl:value-of select="substring-after(.,'nterpreter')"/></xsl:if>
       <xsl:if test="matches(.,'^INTERPRETER(\w*)$')">INTERPRÉTER<xsl:value-of select="substring-after(.,'INTERPRETER')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^sugce(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]ugce(\w*)$')"><xsl:value-of select="substring-before(.,'ugce')"/>uce<xsl:value-of select="substring-after(.,'ugce')"/></xsl:if>
       <xsl:if test="matches(.,'^SUGCE(\w*)$')">SUCE<xsl:value-of select="substring-after(.,'SUGCE')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^lecons?$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]econs?(\w*)$')"><xsl:value-of select="substring-before(.,'econ')"/>eçon<xsl:value-of select="substring-after(.,'econ')"/></xsl:if>
       <xsl:if test="matches(.,'^LECONS?(\w*)$')">LEÇON<xsl:value-of select="substring-after(.,'LECON')"/></xsl:if></reg></choice>
</xsl:when>
<xsl:when test="matches(.,'^freque(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]reque(\w+)$')"><xsl:value-of select="substring-before(.,'reque')"/>réque<xsl:value-of select="substring-after(.,'reque')"/></xsl:if>
       <xsl:if test="matches(.,'^FREQUE(\w+)$')">FRÉQUE<xsl:value-of select="substring-after(.,'FREQUE')"/></xsl:if></reg></choice>
</xsl:when>
                <xsl:when test="matches(.,'^sustan(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Ss]ustan(\w+)$')"><xsl:value-of select="substring-before(.,'ustan')"/>ubstan<xsl:value-of select="substring-after(.,'ustan')"/></xsl:if>
                                <xsl:if test="matches(.,'^SUSTAN(\w+)$')">SUBSTAN<xsl:value-of select="substring-after(.,'SUSTAN')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w+)icq$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w+)icq$')"><xsl:value-of select="substring-before(.,'icq')"/>ique<xsl:value-of select="substring-after(.,'icq')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w+)ICQ$')"><xsl:value-of select="substring-before(.,'ICQ')"/>IQUE<xsl:value-of select="substring-after(.,'ICQ')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^evang(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^evang(\w+)$')"><xsl:value-of select="substring-before(.,'evang')"/>évang<xsl:value-of select="substring-after(.,'evang')"/></xsl:if>
                                <xsl:if test="matches(.,'^Evang(\w+)$')"><xsl:value-of select="substring-before(.,'Evang')"/>Évang<xsl:value-of select="substring-after(.,'Evang')"/></xsl:if>
                                <xsl:if test="matches(.,'^EVANG(\w+)$')">ÉVANG<xsl:value-of select="substring-after(.,'EVANG')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w*)monstrer$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w*)[Mm]onstrer$')"><xsl:value-of select="substring-before(.,'onstrer')"/>ontrer<xsl:value-of select="substring-after(.,'onstrer')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w*)MONSTRER$')"><xsl:value-of select="substring-before(.,'MONSTRER')"/>MONTRER<xsl:value-of select="substring-after(.,'MONSTRER')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w+)controi(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w+)controi(\w+)$')"><xsl:value-of select="substring-before(.,'controi')"/>contrai<xsl:value-of select="substring-after(.,'controi')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w+)CONTROI(\w+)$')"><xsl:value-of select="substring-before(.,'CONTROI')"/>CONTRAI<xsl:value-of select="substring-after(.,'CONTROI')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^refec(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Rr]efec(\w+)$')"><xsl:value-of select="substring-before(.,'efec')"/>éfec<xsl:value-of select="substring-after(.,'efec')"/></xsl:if>
                                <xsl:if test="matches(.,'^REFEC(\w+)$')">RÉFEC<xsl:value-of select="substring-after(.,'REFEC')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^delec(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Dd]elec(\w+)$')"><xsl:value-of select="substring-before(.,'elec')"/>élec<xsl:value-of select="substring-after(.,'elec')"/></xsl:if>
                                <xsl:if test="matches(.,'^DELEC(\w+)$')">DÉLEC<xsl:value-of select="substring-after(.,'DELEC')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w+)eiforme(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w+)eiforme(\w*)$')"><xsl:value-of select="substring-before(.,'eiforme')"/>éiforme<xsl:value-of select="substring-after(.,'eiforme')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w+)EIFORME(\w*)$')"><xsl:value-of select="substring-before(.,'EIFORME')"/>ÉIFORME<xsl:value-of select="substring-after(.,'EIFORME')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^autorite(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Aa]utorite(\w*)$')"><xsl:value-of select="substring-before(.,'utorite')"/>utorité<xsl:value-of select="substring-after(.,'utorite')"/></xsl:if>
                                <xsl:if test="matches(.,'^AUTORITE(\w*)$')">AUTORITÉ<xsl:value-of select="substring-after(.,'AUTORITE')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w*)reserv(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w*)[Rr]eserv(\w*)$')"><xsl:value-of select="substring-before(.,'eserv')"/>éserv<xsl:value-of select="substring-after(.,'eserv')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w*)RESERV(\w*)$')"><xsl:value-of select="substring-before(.,'RESERV')"/>RÉSERV<xsl:value-of select="substring-after(.,'RESERV')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^fossez$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Ff]ossez(\w*)$')"><xsl:value-of select="substring-before(.,'ossez')"/>ossés<xsl:value-of select="substring-after(.,'ossez')"/></xsl:if>
                                <xsl:if test="matches(.,'^FOSSEZ$')">FOSSÉS<xsl:value-of select="substring-after(.,'FOSSEZ')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w*)entroi(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w*)[Ee]ntroi(\w*)$')"><xsl:value-of select="substring-before(.,'ntroi')"/>ntrai<xsl:value-of select="substring-after(.,'ntroi')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w*)ENTROI(\w*)$')"><xsl:value-of select="substring-before(.,'ENTROI')"/>ENTRAI<xsl:value-of select="substring-after(.,'ENTROI')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^flaccon(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Ff]laccon(\w*)$')"><xsl:value-of select="substring-before(.,'laccon')"/>lacon<xsl:value-of select="substring-after(.,'laccon')"/></xsl:if>
                                <xsl:if test="matches(.,'^FLACCON(\w*)$')">FLACON<xsl:value-of select="substring-after(.,'FLACCON')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w*)ouvroi(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w*)[Oo]uvroi(\w*)$')"><xsl:value-of select="substring-before(.,'uvroi')"/>uvrai<xsl:value-of select="substring-after(.,'uvroi')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w*)OUVROI(\w*)$')"><xsl:value-of select="substring-before(.,'OUVROI')"/>OUVRAI<xsl:value-of select="substring-after(.,'OUVROI')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^avoient$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Aa]voient$')"><xsl:value-of select="substring-before(.,'voient')"/>vaient</xsl:if>
                                <xsl:if test="matches(.,'^AVOIENT$')">AVAIENT</xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w+)joust(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w+)joust(\w*)$')"><xsl:value-of select="substring-before(.,'joust')"/>jout<xsl:value-of select="substring-after(.,'joust')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w+)JOUST(\w*)$')"><xsl:value-of select="substring-before(.,'OUVROI')"/>JOUT<xsl:value-of select="substring-after(.,'JOUST')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^arrous(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Aa]rrous(\w+)$')"><xsl:value-of select="substring-before(.,'rrous')"/>rros<xsl:value-of select="substring-after(.,'rrous')"/></xsl:if>
                                <xsl:if test="matches(.,'^ARROUS(\w+)$')">ARROS<xsl:value-of select="substring-after(.,'ARROUS')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w*)pesch(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w*)[Pp]esch(\w+)$')"><xsl:value-of select="substring-before(.,'esch')"/>êch<xsl:value-of select="substring-after(.,'esch')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w*)PESCH(\w+)$')"><xsl:value-of select="substring-before(.,'PESCH')"/>PÊCH<xsl:value-of select="substring-after(.,'PESCH')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^(al)?leich(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^(al|Al)?[Ll]eich(\w+)$')"><xsl:value-of select="substring-before(.,'eich')"/>éch<xsl:value-of select="substring-after(.,'eich')"/></xsl:if>
                                <xsl:if test="matches(.,'^(AL)?LEICH(\w+)$')"><xsl:value-of select="substring-before(.,'LEICH')"/>LÉCH<xsl:value-of select="substring-after(.,'LEICH')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^fleich(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Ff]leich(\w+)$')"><xsl:value-of select="substring-before(.,'leich')"/>lèch<xsl:value-of select="substring-after(.,'leich')"/></xsl:if>
                                <xsl:if test="matches(.,'^FLEICH(\w+)$')">FLÈCH<xsl:value-of select="substring-after(.,'FLEICH')"/></xsl:if></reg></choice>
                </xsl:when>
                <xsl:when test="matches(.,'^guaig(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Gg]uaig(\w+)$')"><xsl:value-of select="substring-before(.,'uaig')"/>ag<xsl:value-of select="substring-after(.,'uaig')"/></xsl:if>
                                <xsl:if test="matches(.,'^GUAIG(\w+)$')">GAG<xsl:value-of select="substring-after(.,'GUAIG')"/></xsl:if></reg></choice>
                </xsl:when>    
            <xsl:when test="matches(.,'^(\w*)chauf[^f](\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Cc]hauf[^f](\w*)$')"><xsl:value-of select="substring-before(.,'hauf')"/>hauff<xsl:value-of select="substring-after(.,'hauf')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)CHAUF[^F](\w*)$')"><xsl:value-of select="substring-before(.,'CHAUF')"/>CHAUFF<xsl:value-of select="substring-after(.,'CHAUF')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^noveau(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Nn]oveau(\w*)$')"><xsl:value-of select="substring-before(.,'oveau')"/>ouveau<xsl:value-of select="substring-after(.,'oveau')"/></xsl:if>
                    <xsl:if test="matches(.,'^NOVEAU(\w*)$')">NOUVEAU<xsl:value-of select="substring-after(.,'NOVEAU')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^baisler$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]aisler$')"><xsl:value-of select="substring-before(.,'aisler')"/>aîller</xsl:if>
                    <xsl:if test="matches(.,'^BAISLER$')">BAÎLLER</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^hou?stage(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^hou?stage(\w*)$')">otage<xsl:value-of select="substring-after(.,'stage')"/></xsl:if>
                    <xsl:if test="matches(.,'^Hou?stage(\w*)$')">Otage<xsl:value-of select="substring-after(.,'stage')"/></xsl:if>
                    <xsl:if test="matches(.,'^HOU?STAGE(\w*)$')">OTAGE<xsl:value-of select="substring-after(.,'STAGE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^quas$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^quas$')">cas</xsl:if>
                    <xsl:if test="matches(.,'^Quas$')">Cas</xsl:if>
                    <xsl:if test="matches(.,'^QUAS$')">CAS</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)enoille(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)enoille(\w*)$')"><xsl:value-of select="substring-before(.,'enoille')"/>enouille<xsl:value-of select="substring-after(.,'enoille')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w+)ENOILLE(\w*)$')"><xsl:value-of select="substring-before(.,'ENOILLE')"/>ENOUILLE<xsl:value-of select="substring-after(.,'ENOILLE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^sauconduit(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ss]auconduit(\w*)$')"><xsl:value-of select="substring-before(.,'auconduit')"/>auf-conduit<xsl:value-of select="substring-after(.,'auconduit')"/></xsl:if>
                    <xsl:if test="matches(.,'^SAUCONDUIT(\w*)$')">SAUF-CONDUIT<xsl:value-of select="substring-after(.,'SAUCONDUIT')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)ousch(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)ousch(\w+)$')"><xsl:value-of select="substring-before(.,'ousch')"/>ouch<xsl:value-of select="substring-after(.,'ousch')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w+)OUSCH(\w+)$')"><xsl:value-of select="substring-before(.,'OUSCH')"/>OUCH<xsl:value-of select="substring-after(.,'OUSCH')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^gueret(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Gg]ueret(\w*)$')"><xsl:value-of select="substring-before(.,'ueret')"/>uéret<xsl:value-of select="substring-after(.,'ueret')"/></xsl:if>
                    <xsl:if test="matches(.,'^GUERET(\w*)$')">GUÉRET<xsl:value-of select="substring-after(.,'GUERET')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^aer$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Aa]er$')"><xsl:value-of select="substring-before(.,'er')"/>ir</xsl:if>
                    <xsl:if test="matches(.,'^AER$')">AIR</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^conclud$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Cc]onclud$')"><xsl:value-of select="substring-before(.,'onclud')"/>onclu</xsl:if>
                    <xsl:if test="matches(.,'^CONCLUD$')">CONCLU</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)crioi(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Cc]rioi(\w*)$')"><xsl:value-of select="substring-before(.,'rioi')"/>riai<xsl:value-of select="substring-after(.,'rioi')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)CRIOI(\w*)$')"><xsl:value-of select="substring-before(.,'CRIOI')"/>CRIAI<xsl:value-of select="substring-after(.,'CRIOI')"/></xsl:if></reg></choice>
            </xsl:when>
            
            <xsl:when test="matches(.,'^poyvr(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Pp]oyvr(\w*)$')"><xsl:value-of select="substring-before(.,'oyvr')"/>oivr<xsl:value-of select="substring-after(.,'oyvr')"/></xsl:if>
                    <xsl:if test="matches(.,'^POYVR(\w*)$')">POIVR<xsl:value-of select="substring-after(.,'POYVR')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^b?efro(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]?[Ee]fro(\w+)$')"><xsl:value-of select="substring-before(.,'fro')"/>ffro<xsl:value-of select="substring-after(.,'fro')"/></xsl:if>
                    <xsl:if test="matches(.,'^B?EFRO(\w+)$')"><xsl:value-of select="substring-before(.,'EFRO')"/>EFFRO<xsl:value-of select="substring-after(.,'EFRO')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^triumph(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Tt]riumph(\w*)$')"><xsl:value-of select="substring-before(.,'riumph')"/>riomph<xsl:value-of select="substring-after(.,'riumph')"/></xsl:if>
                    <xsl:if test="matches(.,'^TRIUMPH(\w*)$')">TRIOMPH<xsl:value-of select="substring-after(.,'TRIUMPH')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)eroi(en)?t$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)eroi(en)?t$')"><xsl:value-of select="substring-before(.,'eroi')"/>erai<xsl:value-of select="substring-after(.,'eroi')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w+)EROI(EN)?T$')"><xsl:value-of select="substring-before(.,'EROI')"/>ERAI<xsl:value-of select="substring-after(.,'EROI')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)cocq(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Cc]ocq(\w*)$')"><xsl:value-of select="substring-before(.,'ocq')"/>oq<xsl:value-of select="substring-after(.,'ocq')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)COCQ(\w*)$')"><xsl:value-of select="substring-before(.,'COCQ')"/>COQ<xsl:value-of select="substring-after(.,'COCQ')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^toust$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Tt]oust$')"><xsl:value-of select="substring-before(.,'oust')"/>ôt</xsl:if>
                    <xsl:if test="matches(.,'^TOUST$')">TÔT</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^espo[^i](\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^espo[^i](\w*)$')">épo<xsl:value-of select="substring-after(.,'spo')"/></xsl:if>
                    <xsl:if test="matches(.,'^Espo[^i](\w*)$')">Épo<xsl:value-of select="substring-after(.,'spo')"/></xsl:if>
                    <xsl:if test="matches(.,'^ESPO[^I](\w*)$')">ÉPO<xsl:value-of select="substring-after(.,'ESPO')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^troigne(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Tt]roigne(\w*)$')"><xsl:value-of select="substring-before(.,'roigne')"/>rogne<xsl:value-of select="substring-after(.,'roigne')"/></xsl:if>
                    <xsl:if test="matches(.,'^TROIGNE(\w*)$')">TROGNE<xsl:value-of select="substring-after(.,'TROIGNE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^doz$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Dd]oz$')"><xsl:value-of select="substring-before(.,'oz')"/>os</xsl:if>
                    <xsl:if test="matches(.,'^DOZ$')">DOS</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^frot[ae](\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ff]rot[ae](\w*)$')"><xsl:value-of select="substring-before(.,'rot')"/>rott<xsl:value-of select="substring-after(.,'rot')"/></xsl:if>
                    <xsl:if test="matches(.,'^FROT[AE](\w*)$')">FROTT<xsl:value-of select="substring-after(.,'FROT')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^engrois(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ee]ngrois(\w+)$')"><xsl:value-of select="substring-before(.,'ngrois')"/>ngros<xsl:value-of select="substring-after(.,'ngrois')"/></xsl:if>
                    <xsl:if test="matches(.,'^ENGROIS(\w+)$')">ENGROS<xsl:value-of select="substring-after(.,'ENGROIS')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^grois(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Gg]rois(\w*)$')"><xsl:value-of select="substring-before(.,'rois')"/>ros<xsl:value-of select="substring-after(.,'rois')"/></xsl:if>
                    <xsl:if test="matches(.,'^GROIS(\w*)$')">GROS<xsl:value-of select="substring-after(.,'GROIS')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^revoluë$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Rr]evoluë$')"><xsl:value-of select="substring-before(.,'evoluë')"/>évolue</xsl:if>
                    <xsl:if test="matches(.,'^REVOLUË$')">RÉVOLUE</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^revol(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Rr]evol(\w+)$')"><xsl:value-of select="substring-before(.,'evol')"/>évol<xsl:value-of select="substring-after(.,'evol')"/></xsl:if>
                    <xsl:if test="matches(.,'^REVOL(\w+)$')">RÉVOL<xsl:value-of select="substring-after(.,'REVOL')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)nuyct(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Nn]uyct(\w*)$')"><xsl:value-of select="substring-before(.,'uyct')"/>uit<xsl:value-of select="substring-after(.,'uyct')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)NUYCT(\w*)$')"><xsl:value-of select="substring-before(.,'NUYCT')"/>NUIT<xsl:value-of select="substring-after(.,'NUYCT')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^allega(\w*)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Aa]llega(\w*)$')"><xsl:value-of select="substring-before(.,'llega')"/>llégua<xsl:value-of select="substring-after(.,'llega')"/></xsl:if>
                    <xsl:if test="matches(.,'^ALLEGA(\w*)$')">ALLÉGUA<xsl:value-of select="substring-after(.,'ALLEGA')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)leg[ai](\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Ll]eg[ai](\w+)$')"><xsl:value-of select="substring-before(.,'eg')"/>ég<xsl:value-of select="substring-after(.,'eg')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)LEG[AI](\w+)$')"><xsl:value-of select="substring-before(.,'LEG')"/>LÉG<xsl:value-of select="substring-after(.,'LEG')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^ause$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^ause$')"><xsl:value-of select="substring-before(.,'ause')"/>ose</xsl:if>
                    <xsl:if test="matches(.,'^Ause$')"><xsl:value-of select="substring-before(.,'Ause')"/>Ose</xsl:if>
                    <xsl:if test="matches(.,'^AUSE$')">OSE</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)ennans$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)ennans$')"><xsl:value-of select="substring-before(.,'ennans')"/>ennant</xsl:if>
                    <xsl:if test="matches(.,'^(\w+)ENNANS$')"><xsl:value-of select="substring-before(.,'ENNANS')"/>ENNANT</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^vefv(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Vv]efv(\w+)$')"><xsl:value-of select="substring-before(.,'efv')"/>euv<xsl:value-of select="substring-after(.,'efv')"/></xsl:if>
                    <xsl:if test="matches(.,'^VEFV(\w+)$')">VEUV<xsl:value-of select="substring-after(.,'VEFV')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^cropp(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Cc]ropp(\w+)$')"><xsl:value-of select="substring-before(.,'ropp')"/>roup<xsl:value-of select="substring-after(.,'ropp')"/></xsl:if>
                    <xsl:if test="matches(.,'^CROPP(\w+)$')">CROUP<xsl:value-of select="substring-after(.,'CROPP')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^acrop(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Aa]crop(\w+)$')"><xsl:value-of select="substring-before(.,'crop')"/>ccroup<xsl:value-of select="substring-after(.,'crop')"/></xsl:if>
                    <xsl:if test="matches(.,'^ACROP(\w+)$')">ACCROUP<xsl:value-of select="substring-after(.,'ACROP')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^crop(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Cc]rop(\w+)$')"><xsl:value-of select="substring-before(.,'rop')"/>roup<xsl:value-of select="substring-after(.,'rop')"/></xsl:if>
                    <xsl:if test="matches(.,'^CROP(\w+)$')">CROUP<xsl:value-of select="substring-after(.,'CROP')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^mariz$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Mm]ariz')"><xsl:value-of select="substring-before(.,'ariz')"/>aris</xsl:if>
                    <xsl:if test="matches(.,'^MARIZ$')">MARIS</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^desb(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Dd]esb(\w+)$')"><xsl:value-of select="substring-before(.,'esb')"/>éb<xsl:value-of select="substring-after(.,'esb')"/></xsl:if>
                    <xsl:if test="matches(.,'^DESB(\w+)$')">DÉB<xsl:value-of select="substring-after(.,'DESB')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^heri(\w+)$', 'i')">
<choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Hh]eri(\w+)$')"><xsl:value-of select="substring-before(.,'eri')"/>éri<xsl:value-of select="substring-after(.,'eri')"/></xsl:if>
                    <xsl:if test="matches(.,'^HERI(\w+)$')">HÉRI<xsl:value-of select="substring-after(.,'HERI')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^courbeau(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Cc]ourbeau(\w*)$')"><xsl:value-of select="substring-before(.,'ourbeau')"/>orbeau<xsl:value-of select="substring-after(.,'ourbeau')"/></xsl:if>
                    <xsl:if test="matches(.,'^COURBEAU(\w*)$')">CORBEAU<xsl:value-of select="substring-after(.,'COURBEAU')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)oultre(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Oo]ultre(\w*)$')"><xsl:value-of select="substring-before(.,'ultre')"/>utre<xsl:value-of select="substring-after(.,'ultre')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)OULTRE(\w*)$')"><xsl:value-of select="substring-before(.,'OULTRE')"/>OUTRE<xsl:value-of select="substring-after(.,'OULTRE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^pilots?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Pp]ilots?(\w*)$')"><xsl:value-of select="substring-before(.,'ilot')"/>ilote<xsl:value-of select="substring-after(.,'ilot')"/></xsl:if>
                    <xsl:if test="matches(.,'^PILOTS?$')">PILOTE<xsl:value-of select="substring-after(.,'PILOT')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)deront$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)deront$')"><xsl:value-of select="substring-before(.,'deront')"/>dront</xsl:if>
                    <xsl:if test="matches(.,'^(\w+)DERONT$')"><xsl:value-of select="substring-before(.,'DERONT')"/>DRONT</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^raport(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Rr]aport(\w*)$')"><xsl:value-of select="substring-before(.,'aport')"/>apport<xsl:value-of select="substring-after(.,'aport')"/></xsl:if>
                    <xsl:if test="matches(.,'^RAPORT(\w*)$')">RAPPORT<xsl:value-of select="substring-after(.,'RAPORT')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^fauldr(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ff]auldr(\w+)$')"><xsl:value-of select="substring-before(.,'auldr')"/>audr<xsl:value-of select="substring-after(.,'auldr')"/></xsl:if>
                    <xsl:if test="matches(.,'^FAULDR(\w+)$')">FAUDR<xsl:value-of select="substring-after(.,'FAULDR')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^tortre$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Tt]ortre$')"><xsl:value-of select="substring-before(.,'ortre')"/>ordre</xsl:if>
                    <xsl:if test="matches(.,'^TORTRE$')">TORDRE</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^clouse(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Cc]louse(\w*)$')"><xsl:value-of select="substring-before(.,'louse')"/>lose<xsl:value-of select="substring-after(.,'louse')"/></xsl:if>
                    <xsl:if test="matches(.,'^CLOUSE(\w*)$')">CLOSE<xsl:value-of select="substring-after(.,'CLOUSE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^escapp(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^escapp(\w+)$')">échapp<xsl:value-of select="substring-after(.,'escapp')"/></xsl:if>
                    <xsl:if test="matches(.,'^Escapp(\w+)$')">Échapp<xsl:value-of select="substring-after(.,'Escapp')"/></xsl:if>
                    <xsl:if test="matches(.,'^ESCAPP(\w+)$')">ÉCHAPP<xsl:value-of select="substring-after(.,'ESCAPP')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^apresdinées?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Aa]presdinées?$')"><xsl:value-of select="substring-before(.,'presdinée')"/>pres-dinée<xsl:value-of select="substring-after(.,'presdinée')"/></xsl:if>
                    <xsl:if test="matches(.,'^APRESDINÉES?$')">APRES-DINÉE<xsl:value-of select="substring-after(.,'APRESDINÉE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^febvrier$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ff]ebvrier$')"><xsl:value-of select="substring-before(.,'ebvrier')"/>évrier</xsl:if>
                    <xsl:if test="matches(.,'^FEBVRIER$')">FÉVRIER</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^engress(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ee]ngress(\w+)$')"><xsl:value-of select="substring-before(.,'ngress')"/>ngraiss<xsl:value-of select="substring-after(.,'ngress')"/></xsl:if>
                    <xsl:if test="matches(.,'^ENGRESS(\w+)$')">ENGRAISS<xsl:value-of select="substring-after(.,'ENGRESS')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)rdy$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)rdy$')"><xsl:value-of select="substring-before(.,'rdy')"/>rdi</xsl:if>
                    <xsl:if test="matches(.,'^(\w+)RDY$')"><xsl:value-of select="substring-before(.,'RDY')"/>RDI</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^commemo(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Cc]ommemo(\w+)$')"><xsl:value-of select="substring-before(.,'ommemo')"/>ommémo<xsl:value-of select="substring-after(.,'ommemo')"/></xsl:if>
                    <xsl:if test="matches(.,'^COMMEMO(\w+)$')">COMMÉMO<xsl:value-of select="substring-after(.,'COMMEMO')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)acion$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)acion$')"><xsl:value-of select="substring-before(.,'acion')"/>ation</xsl:if>
                    <xsl:if test="matches(.,'^(\w+)ACION$')"><xsl:value-of select="substring-before(.,'ACION')"/>ATION</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(in)?dec(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(in|In)?[Dd]ec(\w+)$')"><xsl:value-of select="substring-before(.,'ec')"/>éc<xsl:value-of select="substring-after(.,'ec')"/></xsl:if>
                    <xsl:if test="matches(.,'^(IN)?DEC(\w+)$')"><xsl:value-of select="substring-before(.,'DEC')"/>DÉC<xsl:value-of select="substring-after(.,'DEC')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^gue$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Gg]ue$')"><xsl:value-of select="substring-before(.,'ue')"/>ué</xsl:if>
                    <xsl:if test="matches(.,'^GUE$')">GUÉ</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^beveus?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]eveus?$')"><xsl:value-of select="substring-before(.,'eveu')"/>uveu<xsl:value-of select="substring-after(.,'eveu')"/></xsl:if>
                    <xsl:if test="matches(.,'^BEVEUS?$')">BUVEU<xsl:value-of select="substring-after(.,'BEVEU')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)neues?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Nn]eues?$')"><xsl:value-of select="substring-before(.,'eue')"/>ue<xsl:value-of select="substring-after(.,'eue')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)NEUES?$')"><xsl:value-of select="substring-before(.,'NEUE')"/>NUE<xsl:value-of select="substring-after(.,'NEUE')"/></xsl:if></reg></choice>
            </xsl:when>
            <!--Addition cogneu(e)(s) => connu(e)(s)-->
             <xsl:when test="matches(.,'^(re)?con?g?neue?s?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(re)?con?g?neue?s?$')"><xsl:value-of select="substring-before(.,'eu')"/>u<xsl:value-of select="substring-after(.,'eu')"/></xsl:if>
                    <xsl:if test="matches(.,'^(RE)?CON?G?NEUE?S?$')"><xsl:value-of select="substring-before(.,'EU')"/>U<xsl:value-of select="substring-after(.,'UE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)commend(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Cc]ommend(\w+)$')"><xsl:value-of select="substring-before(.,'ommend')"/>ommand<xsl:value-of select="substring-after(.,'ommend')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)COMMEND(\w+)$')"><xsl:value-of select="substring-before(.,'COMMEND')"/>COMMAND<xsl:value-of select="substring-after(.,'COMMEND')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)ndoi(en)?t$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)ndoi(en)?t$')"><xsl:value-of select="substring-before(.,'ndoi')"/>ndai<xsl:value-of select="substring-after(.,'ndoi')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w+)NDOI(EN)?T$')"><xsl:value-of select="substring-before(.,'NDOI')"/>NDAI<xsl:value-of select="substring-after(.,'NDOI')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^masts?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Mm]asts?$')"><xsl:value-of select="substring-before(.,'ast')"/>ât<xsl:value-of select="substring-after(.,'ast')"/></xsl:if>
                    <xsl:if test="matches(.,'^MASTS?$')">MÂT<xsl:value-of select="substring-after(.,'MAST')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^masch(\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Mm]asch(\w+)$')"><xsl:value-of select="substring-before(.,'asch')"/>âch<xsl:value-of select="substring-after(.,'asch')"/></xsl:if>
                    <xsl:if test="matches(.,'^MASCH(\w+)$')"><xsl:value-of select="substring-before(.,'MASCH')"/>MÂCH<xsl:value-of select="substring-after(.,'MASCH')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^mangeue$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Mm]angeue$')"><xsl:value-of select="substring-before(.,'angeue')"/>ange</xsl:if>
                    <xsl:if test="matches(.,'^MANGEUE$')">MANGE</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^seze$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ss]eze$')"><xsl:value-of select="substring-before(.,'eze')"/>eize</xsl:if>
                    <xsl:if test="matches(.,'^SEZE$')">SEIZE</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)uss?ars?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)uss?ars?$')"><xsl:value-of select="substring-before(.,'ar')"/>ard<xsl:value-of select="substring-after(.,'ar')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w+)USS?ARS?$')"><xsl:value-of select="substring-before(.,'AR')"/>ARD<xsl:value-of select="substring-after(.,'AR')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)doivoi(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Dd]oivoi(\w*)$')"><xsl:value-of select="substring-before(.,'oivoi')"/>evai<xsl:value-of select="substring-after(.,'oivoi')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)DOIVOI(\w*)$')"><xsl:value-of select="substring-before(.,'DOIVOI')"/>DEVAI<xsl:value-of select="substring-after(.,'DOIVOI')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^doulce(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Dd]oulce(\w*)$')"><xsl:value-of select="substring-before(.,'oulce')"/>ouce<xsl:value-of select="substring-after(.,'oulce')"/></xsl:if>
                    <xsl:if test="matches(.,'^DOULCE(\w*)$')">DOUCE<xsl:value-of select="substring-after(.,'DOULCE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)enyvr(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Ee]nyvr(\w*)$')"><xsl:value-of select="substring-before(.,'nyvr')"/>nivr<xsl:value-of select="substring-after(.,'nyvr')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)ENYVR(\w*)$')"><xsl:value-of select="substring-before(.,'ENYVR')"/>ENIVR<xsl:value-of select="substring-after(.,'ENYVR')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^trote(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Tt]rote(\w*)$')"><xsl:value-of select="substring-before(.,'rote')"/>rotte<xsl:value-of select="substring-after(.,'rote')"/></xsl:if>
                    <xsl:if test="matches(.,'^TROTE(\w*)$')">TROTTE<xsl:value-of select="substring-after(.,'TROTE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^gualente(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Gg]ualente(\w*)$')"><xsl:value-of select="substring-before(.,'ualente')"/>alante<xsl:value-of select="substring-after(.,'ualente')"/></xsl:if>
                    <xsl:if test="matches(.,'^GUALENTE(\w*)$')">GALANTE<xsl:value-of select="substring-after(.,'GUALENTE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^fiebvre(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ff]iebvre(\w*)$')"><xsl:value-of select="substring-before(.,'iebvre')"/>ièvre<xsl:value-of select="substring-after(.,'iebvre')"/></xsl:if>
                    <xsl:if test="matches(.,'^FIEBVRE(\w*)$')">FIÈVRE<xsl:value-of select="substring-after(.,'FIEBVRE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^fy$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ff]y$')"><xsl:value-of select="substring-before(.,'y')"/>i</xsl:if>
                    <xsl:if test="matches(.,'^FY$')">FI</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)mulle(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Mm]ulle(\w*)$')"><xsl:value-of select="substring-before(.,'ulle')"/>ule<xsl:value-of select="substring-after(.,'ulle')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)MULLE(\w*)$')"><xsl:value-of select="substring-before(.,'MULLE')"/>MULE<xsl:value-of select="substring-after(.,'MULLE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)brevi(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Bb]revi(\w*)$')"><xsl:value-of select="substring-before(.,'revi')"/>révi<xsl:value-of select="substring-after(.,'revi')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)BREVI(\w*)$')"><xsl:value-of select="substring-before(.,'BREVI')"/>BRÉVI<xsl:value-of select="substring-after(.,'BREVI')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^breves?$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                <xsl:if test="matches(.,'^[Bb]reves?$')"><xsl:value-of select="substring-before(.,'reve')"/>rève<xsl:value-of select="substring-after(.,'reve')"/></xsl:if>
                <xsl:if test="matches(.,'^BREVES?$')">BRÈVE<xsl:value-of select="substring-after(.,'BREVE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^pech(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Pp]ech(\w*)$')"><xsl:value-of select="substring-before(.,'ech')"/>éch<xsl:value-of select="substring-after(.,'ech')"/></xsl:if>
                    <xsl:if test="matches(.,'^PECH(\w*)$')">PÉCH<xsl:value-of select="substring-after(.,'PECH')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^innocens$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ii]nnocens$')"><xsl:value-of select="substring-before(.,'nnocens')"/>nnocents</xsl:if>
                    <xsl:if test="matches(.,'^INNOCENS$')">INNOCENTS</xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(as|des)?seich[ée](\w+)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(as|des|As|Des)?[Ss]eich[ée](\w+)$')"><xsl:value-of select="substring-before(.,'eich')"/>éch<xsl:value-of select="substring-after(.,'eich')"/></xsl:if>
                    <xsl:if test="matches(.,'^(AS|DES)?SEICH[ÉE](\w+)$')"><xsl:value-of select="substring-before(.,'EICH')"/>ÉCH<xsl:value-of select="substring-after(.,'EICH')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^(as|des)?seiche$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^(as|des|As|Des)?[Ss]eiche$')"><xsl:value-of select="substring-before(.,'eiche')"/>èche<xsl:value-of select="substring-after(.,'eiche')"/></xsl:if>
                    <xsl:if test="matches(.,'^(AS|DES)?SEICHE$')"><xsl:value-of select="substring-before(.,'SEICHE')"/>SÈCHE<xsl:value-of select="substring-after(.,'SEICHE')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^r?aproch(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Rr]?[Aa]proch(\w*)$')"><xsl:value-of select="substring-before(.,'proch')"/>pproch<xsl:value-of select="substring-after(.,'proch')"/></xsl:if>
                    <xsl:if test="matches(.,'^R?APROCH(\w*)$')"><xsl:value-of select="substring-before(.,'APROCH')"/>APPROCH<xsl:value-of select="substring-after(.,'APROCH')"/></xsl:if></reg></choice>
            </xsl:when>
            <!--pour les mots n'étant concernés par aucune régle, on copie la même chose sans <w>-->
            <xsl:otherwise>
                <xsl:value-of select="."/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
   <!-- 4°)Pour ceux ayant eu une règle appliquée, on relance les mêmes règles sur le reg@type='modernisation'-->



    <xsl:template match="tei:reg[@type='modernisation']" mode="pass4">
        <xsl:choose>  
                <xsl:when test="matches(.,'^treshaultz(\w*)$', 'i')"><reg type="modernisation">
                        <xsl:if test="matches(.,'^[Tt]reshaultz$')"><xsl:value-of select="substring-before(.,'reshaultz')"/>rès hauts</xsl:if>
                        <xsl:if test="matches(.,'^TRESHAULTZ$')">TRÈS HAUTS</xsl:if></reg>
                </xsl:when>
            <!--Termes fréquents (parmi les 5000 mots mots les plus fréquents du corpus Epistemon au 23/01/14)-->
<xsl:when test="matches(.,'^plustost$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^[Pp]lustost$')"><xsl:value-of select="substring-before(.,'lustost')"/>lutôt</xsl:if>
         <xsl:if test="matches(.,'^PLUSTOST$')">PLUTÔT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)esfoys$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^(\w+)esfoys$')"><xsl:value-of select="substring-before(.,'esfoys')"/>efois<xsl:value-of select="substring-after(.,'esfoys')"/></xsl:if>
         <xsl:if test="matches(.,'^(\w+)ESFOYS$')"><xsl:value-of select="substring-before(.,'ESFOYS')"/>EFOIS<xsl:value-of select="substring-after(.,'ESFOYS')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ainsin$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^[Aa]insin$')"><xsl:value-of select="substring-before(.,'insin')"/>insi</xsl:if>
         <xsl:if test="matches(.,'^AINSIN$')">AINSI</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^croy$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]roy$')"><xsl:value-of select="substring-before(.,'roy')"/>rois</xsl:if>
       <xsl:if test="matches(.,'^CROY$')">CROIS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^royne(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]oyne(\w*)$')"><xsl:value-of select="substring-before(.,'oyne')"/>eine<xsl:value-of select="substring-after(.,'oyne')"/></xsl:if>
       <xsl:if test="matches(.,'^ROYNE(\w*)$')">REINE<xsl:value-of select="substring-after(.,'ROYNE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^quilz$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Qq]uilz$')"><xsl:value-of select="substring-before(.,'uilz')"/>u'ils</xsl:if>
       <xsl:if test="matches(.,'^QUILZ$')">QU'ILS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^myeulx$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]yeulx$')"><xsl:value-of select="substring-before(.,'yeulx')"/>ieux</xsl:if>
       <xsl:if test="matches(.,'^MYEULX$')">MIEUX</xsl:if></reg>
            </xsl:when>
<!--Encore une addition ceulx => ceux-->
<xsl:when test="matches(.,'^ceulx$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]eulx$')"><xsl:value-of select="substring-before(.,'eulx')"/>eux</xsl:if>
       <xsl:if test="matches(.,'^CEULX$')">CEUX</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^demonstr(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]emonstr(\w*)$')"><xsl:value-of select="substring-before(.,'emonstr')"/>émonstr<xsl:value-of select="substring-after(.,'emonstr')"/></xsl:if>
       <xsl:if test="matches(.,'^DEMONSTR(\w*)$')">DÉMONSTR<xsl:value-of select="substring-after(.,'DEMONSTR')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^soymesme(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]oymesme(\w*)$')"><xsl:value-of select="substring-before(.,'oymesme')"/>oi-même<xsl:value-of select="substring-after(.,'oymesme')"/></xsl:if>
       <xsl:if test="matches(.,'^SOYMESME(\w*)$')">SOI-MÊME<xsl:value-of select="substring-after(.,'SOYMESME')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^pourtraict(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ourtraict(\w*)$')"><xsl:value-of select="substring-before(.,'ourtraict')"/>ortrait<xsl:value-of select="substring-after(.,'ourtraict')"/></xsl:if>
       <xsl:if test="matches(.,'^POURTRAICT(\w*)$')">PORTRAIT<xsl:value-of select="substring-after(.,'POURTRAICT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^pensemen(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ensemen(\w*)$')"><xsl:value-of select="substring-before(.,'ensemen')"/>ensée<xsl:value-of select="substring-after(.,'ensemen')"/></xsl:if>
       <xsl:if test="matches(.,'^PENSEMEN(\w*)$')">PENSÉE<xsl:value-of select="substring-after(.,'PENSEMEN')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^chault$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]hault$')"><xsl:value-of select="substring-before(.,'hault')"/>haut</xsl:if>
       <xsl:if test="matches(.,'^MYEULX$')">MIEUX</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)paroistr(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Pp]aroistr(\w+)$')"><xsl:value-of select="substring-before(.,'aroistr')"/>araîtr<xsl:value-of select="substring-after(.,'aroistr')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)PAROISTR(\w*)$')"><xsl:value-of select="substring-before(.,'PAROISTR')"/>PARAÎTR<xsl:value-of select="substring-after(.,'PAROISTR')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^peust$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]eust$')"><xsl:value-of select="substring-before(.,'eust')"/>ut</xsl:if>
       <xsl:if test="matches(.,'^PEUST$')">PUT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^[vp]eult$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[vpVP]eult$')"><xsl:value-of select="substring-before(.,'eult')"/>eut</xsl:if>
       <xsl:if test="matches(.,'^[VP]EULT$')">EUT</xsl:if></reg>
            </xsl:when>
            <!--Addition pour peulvent => peuvent-->
<xsl:when test="matches(.,'^peulvent$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[pP]eulvent$')"><xsl:value-of select="substring-before(.,'eulvent')"/>euvent</xsl:if>
       <xsl:if test="matches(.,'^PEULVENT$')">PEUVENT</xsl:if></reg>
            </xsl:when>            
<xsl:when test="matches(.,'^maniere(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]aniere(\w*)$')"><xsl:value-of select="substring-before(.,'aniere')"/>anière<xsl:value-of select="substring-after(.,'aniere')"/></xsl:if>
       <xsl:if test="matches(.,'^MANIERE(\w*)$')">MANIÈRE<xsl:value-of select="substring-after(.,'MANIERE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^estat(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^estat(\w*)$')">état<xsl:value-of select="substring-after(.,'estat')"/></xsl:if>
       <xsl:if test="matches(.,'^Estat(\w*)$')">État<xsl:value-of select="substring-after(.,'Estat')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTAT(\w*)$')">ÉTAT<xsl:value-of select="substring-after(.,'ESTAT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^toutesfois$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]outesfois$')"><xsl:value-of select="substring-before(.,'outesfois')"/>outefois</xsl:if>
       <xsl:if test="matches(.,'^TOUTESFOIS$')">TOUTEFOIS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^fortunez$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ortunez$')"><xsl:value-of select="substring-before(.,'ortunez')"/>ortunés</xsl:if>
       <xsl:if test="matches(.,'^FORTUNEZ$')">FORTUNÉS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^encor$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]ncor$')"><xsl:value-of select="substring-before(.,'ncor')"/>ncore</xsl:if>
       <xsl:if test="matches(.,'^ENCOR$')">ENCORE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^premiere(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]remiere(\w*)$')"><xsl:value-of select="substring-before(.,'remiere')"/>remière<xsl:value-of select="substring-after(.,'remiere')"/></xsl:if>
       <xsl:if test="matches(.,'^PREMIERE(\w*)$')">PREMIÈRE<xsl:value-of select="substring-after(.,'PREMIERE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^verité(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]erité(\w*)$')"><xsl:value-of select="substring-before(.,'erité')"/>érité<xsl:value-of select="substring-after(.,'erité')"/></xsl:if>
       <xsl:if test="matches(.,'^VERITÉ(\w*)$')">VÉRITÉ<xsl:value-of select="substring-after(.,'VERITÉ')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^desiroi(\w*)$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^[Dd]esiroi(\w*)$')"><xsl:value-of select="substring-before(.,'esiroi')"/>ésirai<xsl:value-of select="substring-after(.,'esiroi')"/></xsl:if>
         <xsl:if test="matches(.,'^DESIROI(\w*)$')">DÉSIRAI<xsl:value-of select="substring-after(.,'DESIROI')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^desir(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esir(\w*)$')"><xsl:value-of select="substring-before(.,'esir')"/>ésir<xsl:value-of select="substring-after(.,'esir')"/></xsl:if>
       <xsl:if test="matches(.,'^DESIR(\w*)$')">DÉSIR<xsl:value-of select="substring-after(.,'DESIR')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ja$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^ja$')"><xsl:value-of select="substring-before(.,'ja')"/>déjà</xsl:if>
       <xsl:if test="matches(.,'^Ja$')"><xsl:value-of select="substring-before(.,'Ja')"/>Déjà</xsl:if>
       <xsl:if test="matches(.,'^JA$')">DÉJÀ</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(p|m|fr)eres?$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^(P|p|M|m|fr|Fr)eres?$')"><xsl:value-of select="substring-before(.,'ere')"/>ère<xsl:value-of select="substring-after(.,'^ere')"/></xsl:if>
    <xsl:if test="matches(.,'^P|M|FR)ERES?$')"><xsl:value-of select="substring-before(.,'ERE')"/>ÈRE<xsl:value-of select="substring-after(.,'ERE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^estoi[st]$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^estoi[st]$')">étai<xsl:value-of select="substring-after(.,'estoi')"/></xsl:if>
         <xsl:if test="matches(.,'^Estoi[st]$')">Étai<xsl:value-of select="substring-after(.,'Estoi')"/></xsl:if>
         <xsl:if test="matches(.,'^ESTOI[ST]$')">ÉTAI<xsl:value-of select="substring-after(.,'ESTOI')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^estre$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^estre$')">être</xsl:if>
       <xsl:if test="matches(.,'^Estre$')">Être</xsl:if>
       <xsl:if test="matches(.,'^ESTRE$')">ÊTRE</xsl:if></reg>
            </xsl:when>
                <xsl:when test="matches(.,'^cest$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Cc]est$')"><xsl:value-of select="substring-before(.,'est')"/>et</xsl:if>
                                <xsl:if test="matches(.,'^CEST$')">CET</xsl:if></reg>
                </xsl:when>
<xsl:when test="matches(.,'^ceste$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]este$')"><xsl:value-of select="substring-before(.,'este')"/>ette</xsl:if>
       <xsl:if test="matches(.,'^CESTE$')">CETTE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^avoit$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]voit$')"><xsl:value-of select="substring-before(.,'voit')"/>vait</xsl:if>
       <xsl:if test="matches(.,'^AVOIT$')">AVAIT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^apres$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]pres$')"><xsl:value-of select="substring-before(.,'pres')"/>près</xsl:if>
       <xsl:if test="matches(.,'^APRES$')">APRÈS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^esté$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^esté$')"><xsl:value-of select="substring-before(.,'esté')"/>été</xsl:if>
       <xsl:if test="matches(.,'^Esté$')"><xsl:value-of select="substring-before(.,'Esté')"/>Été</xsl:if>
       <xsl:if test="matches(.,'^ESTÉ$')">ÉTÉ</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^este$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^este$')"><xsl:value-of select="substring-before(.,'este')"/>été</xsl:if>
         <xsl:if test="matches(.,'^Este$')"><xsl:value-of select="substring-before(.,'Este')"/>Été</xsl:if>
         <xsl:if test="matches(.,'^ESTE$')">ÉTÉ</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^estoient$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^estoient$')"><xsl:value-of select="substring-before(.,'estoient')"/>étaient</xsl:if>
       <xsl:if test="matches(.,'^Estoient$')"><xsl:value-of select="substring-before(.,'Estoient')"/>Étaient</xsl:if>
       <xsl:if test="matches(.,'^ESTOIENT$')">ÉTAIENT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^pource$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[pP]ource$')"><xsl:value-of select="substring-before(.,'ource')"/>arce</xsl:if>
       <xsl:if test="matches(.,'^POURCE$')">PARCE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ames?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^ames?$')">âme<xsl:value-of select="substring-after(.,'^ame')"/></xsl:if>
       <xsl:if test="matches(.,'^Ames?$')">Âme<xsl:value-of select="substring-after(.,'Ame')"/></xsl:if>
       <xsl:if test="matches(.,'^AMES?$')">ÂME<xsl:value-of select="substring-after(.,'AME')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^grace$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]race$')"><xsl:value-of select="substring-before(.,'race')"/>râce</xsl:if>
       <xsl:if test="matches(.,'^GRACE$')">GRÂCE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^faisoit$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]aisoit$')"><xsl:value-of select="substring-before(.,'aisoit')"/>aisait</xsl:if>
       <xsl:if test="matches(.,'^FAISOIT$')">FAISAIT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^avois$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^[Aa]vois$')"><xsl:value-of select="substring-before(.,'vois')"/>vais</xsl:if>
         <xsl:if test="matches(.,'^AVOIS$')">AVAIS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^doib[tv](\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]oib[tv](\w*)$')"><xsl:value-of select="substring-before(.,'oib')"/>oi<xsl:value-of select="substring-after(.,'oib')"/></xsl:if>
       <xsl:if test="matches(.,'^DOIB[TV](\w*)$')">DOI<xsl:value-of select="substring-after(.,'DOIB')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^veult$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^[Vv]eult$')"><xsl:value-of select="substring-before(.,'eult')"/>eut</xsl:if>
         <xsl:if test="matches(.,'^VEULT$')">VEUT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^presens$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^[Pp]resens$')"><xsl:value-of select="substring-before(.,'resen')"/>résents</xsl:if>
    <xsl:if test="matches(.,'^PRESENS$')">PRÉSENTS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^presen(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]resen(\w*)$')"><xsl:value-of select="substring-before(.,'resen')"/>résen<xsl:value-of select="substring-after(.,'resen')"/></xsl:if>
       <xsl:if test="matches(.,'^PRESEN(\w*)$')">PRÉSEN<xsl:value-of select="substring-after(.,'PRESEN')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^plaist$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^[Pp]laist$')"><xsl:value-of select="substring-before(.,'laist')"/>lait</xsl:if>
         <xsl:if test="matches(.,'^PLAIST$')">PLAIT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ayans$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^[Aa]yans$')"><xsl:value-of select="substring-before(.,'yans')"/>yant</xsl:if>
         <xsl:if test="matches(.,'^AYANS$')">AYANT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^fol$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^[Ff]ol$')"><xsl:value-of select="substring-before(.,'ol')"/>ou</xsl:if>
         <xsl:if test="matches(.,'^FOL$')">FOU</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^memoire(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]emoire(\w*)$')"><xsl:value-of select="substring-before(.,'emoire')"/>émoire<xsl:value-of select="substring-after(.,'emoire')"/></xsl:if>
       <xsl:if test="matches(.,'^MEMOIRE(\w*)$')">MÉMOIRE<xsl:value-of select="substring-after(.,'MEMOIRE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^aus$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^[Aa]us$')"><xsl:value-of select="substring-before(.,'us')"/>ux</xsl:if>
         <xsl:if test="matches(.,'^AUS$')">AUX</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^costé(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]osté(\w*)$')"><xsl:value-of select="substring-before(.,'osté')"/>ôté<xsl:value-of select="substring-after(.,'osté')"/></xsl:if>
       <xsl:if test="matches(.,'^COSTÉ(\w*)$')">CÔTÉ<xsl:value-of select="substring-after(.,'COSTÉ')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^pourroit$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^[Pp]ourroit$')"><xsl:value-of select="substring-before(.,'ourroit')"/>ourrait</xsl:if>
       <xsl:if test="matches(.,'^POURROIT$')">POURRAIT</xsl:if></reg>
            </xsl:when>
<!--Encore pourroient => pourraient-->
 <xsl:when test="matches(.,'^pourroient$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^[Pp]ourroient$')"><xsl:value-of select="substring-before(.,'ourroient')"/>ourraient</xsl:if>
       <xsl:if test="matches(.,'^POURROIENT$')">POURRAIENT</xsl:if></reg>
            </xsl:when>           
<xsl:when test="matches(.,'^advis$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]dvis$')"><xsl:value-of select="substring-before(.,'dvis')"/>vis</xsl:if>
       <xsl:if test="matches(.,'^ADVIS$')">AVIS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^neantmoins$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Nn]eantmoins$')"><xsl:value-of select="substring-before(.,'eantmoins')"/>éanmoins</xsl:if>
       <xsl:if test="matches(.,'^NEANTMOINS$')">NÉANMOINS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^aupres$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]upres$')"><xsl:value-of select="substring-before(.,'upres')"/>uprès</xsl:if>
       <xsl:if test="matches(.,'^AUPRES$')">AUPRÈS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^gueres?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]ueres?$')"><xsl:value-of select="substring-before(.,'uere')"/>uère</xsl:if>
       <xsl:if test="matches(.,'^GUERES?$')">GUÈRE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^merite(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]erite(\w*)$')"><xsl:value-of select="substring-before(.,'erite')"/>érite<xsl:value-of select="substring-after(.,'erite')"/></xsl:if>
       <xsl:if test="matches(.,'^MERITE(\w*)$')">MÉRITE<xsl:value-of select="substring-after(.,'MERITE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^aye$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ye$')"><xsl:value-of select="substring-before(.,'ye')"/>ie</xsl:if>
       <xsl:if test="matches(.,'^AYE$')">AIE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^seullement$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]eullement$')"><xsl:value-of select="substring-before(.,'eullement')"/>eulement</xsl:if>
       <xsl:if test="matches(.,'^SEULLEMENT$')">SEULEMENT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^mary(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ary(\w*)$')"><xsl:value-of select="substring-before(.,'ary')"/>ari<xsl:value-of select="substring-after(.,'ary')"/></xsl:if>
       <xsl:if test="matches(.,'^MARY(\w*)$')">MARI<xsl:value-of select="substring-after(.,'MARY')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^premierement$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]remierement$')"><xsl:value-of select="substring-before(.,'remierement')"/>remièrement</xsl:if>
       <xsl:if test="matches(.,'^PREMIEREMENT$')">PREMIÈREMENT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^matiere(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]atiere(\w*)$')"><xsl:value-of select="substring-before(.,'atiere')"/>atière<xsl:value-of select="substring-after(.,'atiere')"/></xsl:if>
       <xsl:if test="matches(.,'^MATIERE(\w*)$')">MATIÈRE<xsl:value-of select="substring-after(.,'MATIERE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^voila$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]oila$')"><xsl:value-of select="substring-before(.,'oila')"/>oilà</xsl:if>
       <xsl:if test="matches(.,'^VOILA$')">VOILÀ</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^facon(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]acon(\w*)$')"><xsl:value-of select="substring-before(.,'acon')"/>açon<xsl:value-of select="substring-after(.,'acon')"/></xsl:if>
       <xsl:if test="matches(.,'^FACON(\w*)$')">FAÇON<xsl:value-of select="substring-after(.,'FACON')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^agreable(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]greable(\w*)$')"><xsl:value-of select="substring-before(.,'greable')"/>gréable<xsl:value-of select="substring-after(.,'greable')"/></xsl:if>
       <xsl:if test="matches(.,'^AGREABLE(\w*)$')">AGRÉABLE<xsl:value-of select="substring-after(.,'AGREABLE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^avoyent$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]voyent$')"><xsl:value-of select="substring-before(.,'voyent')"/>vaient</xsl:if>
       <xsl:if test="matches(.,'^AVOYENT$')">AVAIENT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^bestes(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]estes(\w*)$')"><xsl:value-of select="substring-before(.,'estes')"/>êtes<xsl:value-of select="substring-after(.,'estes')"/></xsl:if>
       <xsl:if test="matches(.,'^BESTES(\w*)$')">BÊTES<xsl:value-of select="substring-after(.,'BESTES')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^cete$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ete$')"><xsl:value-of select="substring-before(.,'ete')"/>ette</xsl:if>
       <xsl:if test="matches(.,'^CETE$')">CETTE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^derriere$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]erriere$')"><xsl:value-of select="substring-before(.,'erriere')"/>errière</xsl:if>
       <xsl:if test="matches(.,'^DERRIERE$')">DERRIÈRE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^presence(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]resence(\w*)$')"><xsl:value-of select="substring-before(.,'resence')"/>résence<xsl:value-of select="substring-after(.,'resence')"/></xsl:if>
       <xsl:if test="matches(.,'^PRESENCE(\w*)$')">PRÉSENCE<xsl:value-of select="substring-after(.,'PRESENCE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^esperance(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]sperance(\w*)$')"><xsl:value-of select="substring-before(.,'sperance')"/>spérance<xsl:value-of select="substring-after(.,'sperance')"/></xsl:if>
       <xsl:if test="matches(.,'^ESPERANCE(\w*)$')">ESPÉRANCE<xsl:value-of select="substring-after(.,'ESPERANCE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^auroit', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]uroit$')"><xsl:value-of select="substring-before(.,'uroit')"/>urait</xsl:if>
       <xsl:if test="matches(.,'^AUROIT$')">AURAIT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^grenoille(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]renoille(\w*)$')"><xsl:value-of select="substring-before(.,'renoille')"/>renouille<xsl:value-of select="substring-after(.,'grenoille')"/></xsl:if>
       <xsl:if test="matches(.,'^GRENOILLE(\w*)$')">GRENOUILLE<xsl:value-of select="substring-after(.,'GRENOILLE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^receu(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]eceu(\w*)$')"><xsl:value-of select="substring-before(.,'eceu')"/>eçu<xsl:value-of select="substring-after(.,'eceu')"/></xsl:if>
       <xsl:if test="matches(.,'^RECEU(\w*)$')">REÇU<xsl:value-of select="substring-after(.,'RECEU')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^fors', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^fors$')">hormis</xsl:if>
       <xsl:if test="matches(.,'^Fors$')">Hormis</xsl:if>
       <xsl:if test="matches(.,'^FORS$')">HORMIS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^pensee(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ensee(\w*)$')"><xsl:value-of select="substring-before(.,'ensee')"/>ensée<xsl:value-of select="substring-after(.,'ensee')"/></xsl:if>
       <xsl:if test="matches(.,'^PENSEE(\w*)$')">PENSÉE<xsl:value-of select="substring-after(.,'PENSEE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^donques$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]onques$')"><xsl:value-of select="substring-before(.,'onques')"/>onc</xsl:if>
       <xsl:if test="matches(.,'^DONQUES$')">DONC</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^veue$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eue$')"><xsl:value-of select="substring-before(.,'eue')"/>ue</xsl:if>
       <xsl:if test="matches(.,'^VEUE$')">VUE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^helas$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]elas$')"><xsl:value-of select="substring-before(.,'elas')"/>élas</xsl:if>
       <xsl:if test="matches(.,'^HELAS$')">HÉLAS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^fee(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ee(\w*)$')"><xsl:value-of select="substring-before(.,'ee')"/>ée<xsl:value-of select="substring-after(.,'ee')"/></xsl:if>
       <xsl:if test="matches(.,'^FEE(\w*)$')">FÉE<xsl:value-of select="substring-after(.,'FEE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^guerir$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]uerir$')"><xsl:value-of select="substring-before(.,'uerir')"/>uérir</xsl:if>
       <xsl:if test="matches(.,'^GUERIR$')">GUÉRIR</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^honneste(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]onneste(\w*)$')"><xsl:value-of select="substring-before(.,'onneste')"/>onnête<xsl:value-of select="substring-after(.,'onneste')"/></xsl:if>
       <xsl:if test="matches(.,'^HONNESTE(\w*)$')">HONNÊTE<xsl:value-of select="substring-after(.,'HONNESTE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^estions$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^estions$')">etions</xsl:if>
         <xsl:if test="matches(.,'^Estions$')">Étions</xsl:if>
       <xsl:if test="matches(.,'^ESTIONS$')">ÉTIONS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^reverence(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]everence(\w*)$')"><xsl:value-of select="substring-before(.,'everence')"/>évérence<xsl:value-of select="substring-after(.,'everence')"/></xsl:if>
       <xsl:if test="matches(.,'^REVERENCE(\w*)$')">RÉVÉRENCE<xsl:value-of select="substring-after(.,'REVERENCE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^yeus$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Yy]eus$')"><xsl:value-of select="substring-before(.,'eus')"/>eux</xsl:if>
       <xsl:if test="matches(.,'^YEUS$')">YEUX</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^remede(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]emede(\w*)$')"><xsl:value-of select="substring-before(.,'emede')"/>emède<xsl:value-of select="substring-after(.,'emede')"/></xsl:if>
       <xsl:if test="matches(.,'^REMEDE(\w*)$')">REMÈDE<xsl:value-of select="substring-after(.,'REMEDE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^remedier(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]emedier(\w*)$')"><xsl:value-of select="substring-before(.,'emedier')"/>emédier<xsl:value-of select="substring-after(.,'emedier')"/></xsl:if>
       <xsl:if test="matches(.,'^REMEDIER(\w*)$')">REMÉDIER<xsl:value-of select="substring-after(.,'REMEDIER')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^piece(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]iece(\w*)$')"><xsl:value-of select="substring-before(.,'iece')"/>ièce<xsl:value-of select="substring-after(.,'iece')"/></xsl:if>
       <xsl:if test="matches(.,'^PIECE(\w*)$')">PIÈCE<xsl:value-of select="substring-after(.,'PIECE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^riviere(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]iviere(\w*)$')"><xsl:value-of select="substring-before(.,'iviere')"/>ivière<xsl:value-of select="substring-after(.,'iviere')"/></xsl:if>
       <xsl:if test="matches(.,'^RIVIERE(\w*)$')">RIVIÈRE<xsl:value-of select="substring-after(.,'RIVIERE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ennuy(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]nnuy(\w*)$')"><xsl:value-of select="substring-before(.,'nnuy')"/>nnui<xsl:value-of select="substring-after(.,'nnuy')"/></xsl:if>
       <xsl:if test="matches(.,'^ENNUY(\w*)$')">ENNUI<xsl:value-of select="substring-after(.,'ENNUY')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^entree(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]ntree(\w*)$')"><xsl:value-of select="substring-before(.,'ntree')"/>ntrée<xsl:value-of select="substring-after(.,'ntree')"/></xsl:if>
       <xsl:if test="matches(.,'^ENTREE(\w*)$')">ENTRÉE<xsl:value-of select="substring-after(.,'ENTREE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^necessaire(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Nn]ecessaire(\w*)$')"><xsl:value-of select="substring-before(.,'ecessaire')"/>écessaire<xsl:value-of select="substring-after(.,'ecessaire')"/></xsl:if>
       <xsl:if test="matches(.,'^NECESSAIRE(\w*)$')">NÉCESSAIRE<xsl:value-of select="substring-after(.,'NECESSAIRE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^tems$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]ems$')"><xsl:value-of select="substring-before(.,'ems')"/>emps</xsl:if>
       <xsl:if test="matches(.,'^TEMS$')">TEMPS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^come$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ome$')"><xsl:value-of select="substring-before(.,'ome')"/>omme</xsl:if>
       <xsl:if test="matches(.,'^COME$')">COMME</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^celeste$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]eleste$')"><xsl:value-of select="substring-before(.,'eleste')"/>éleste</xsl:if>
       <xsl:if test="matches(.,'^CELESTE$')">CÉLESTE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^gue$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]ue$')"><xsl:value-of select="substring-before(.,'ue')"/>ué</xsl:if>
       <xsl:if test="matches(.,'^GUE$')">GUÉ</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^Amerique$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]merique$')"><xsl:value-of select="substring-before(.,'merique')"/>mérique</xsl:if>
       <xsl:if test="matches(.,'^AMERIQUE$')">AMÉRIQUE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^espece(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]spece(\w*)$')"><xsl:value-of select="substring-before(.,'spece')"/>spèce<xsl:value-of select="substring-after(.,'spece')"/></xsl:if>
       <xsl:if test="matches(.,'^ESPECE(\w*)$')">ESPÈCE<xsl:value-of select="substring-after(.,'ESPECE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^quarré(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^quarré(\w*)$')">carré<xsl:value-of select="substring-after(.,'quarré')"/></xsl:if>
         <xsl:if test="matches(.,'^Quarré(\w*)$')">Carré<xsl:value-of select="substring-after(.,'Quarré')"/></xsl:if>
       <xsl:if test="matches(.,'^QUARRÉ(\w*)$')">CARRÉ<xsl:value-of select="substring-after(.,'QUARRÉ')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^quarrez(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^quarrez(\w*)$')">carrés<xsl:value-of select="substring-after(.,'quarrez')"/></xsl:if>
         <xsl:if test="matches(.,'^quarrez(\w*)$')">Carrés<xsl:value-of select="substring-after(.,'quarrez')"/></xsl:if>
       <xsl:if test="matches(.,'^QUARREZ(\w*)$')">CARRÉS<xsl:value-of select="substring-after(.,'QUARREZ')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^delice(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]elice(\w*)$')"><xsl:value-of select="substring-before(.,'elice')"/>élice<xsl:value-of select="substring-after(.,'elice')"/></xsl:if>
       <xsl:if test="matches(.,'^DELICE(\w*)$')">DÉLICE<xsl:value-of select="substring-after(.,'DELICE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^forest$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]orest$')"><xsl:value-of select="substring-before(.,'orest')"/>orêt</xsl:if>
       <xsl:if test="matches(.,'^FOREST$')">FORÊT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^extreme(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]xtreme(\w*)$')"><xsl:value-of select="substring-before(.,'xtreme')"/>xtrême<xsl:value-of select="substring-after(.,'xtreme')"/></xsl:if>
       <xsl:if test="matches(.,'^EXTREME(\w*)$')">EXTRÊME<xsl:value-of select="substring-after(.,'EXTREME')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^prest$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]rest$')"><xsl:value-of select="substring-before(.,'rest')"/>rêt</xsl:if>
       <xsl:if test="matches(.,'^PREST$')">PRÊT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^derniere(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]erniere(\w*)$')"><xsl:value-of select="substring-before(.,'erniere')"/>ernière<xsl:value-of select="substring-after(.,'erniere')"/></xsl:if>
       <xsl:if test="matches(.,'^DERNIERE(\w*)$')">DERNIÈRE<xsl:value-of select="substring-after(.,'DERNIERE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^grecz$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]recz$')"><xsl:value-of select="substring-before(.,'recz')"/>recs</xsl:if>
       <xsl:if test="matches(.,'^GRECZ$')">GRECS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^mile$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ile$')"><xsl:value-of select="substring-before(.,'ile')"/>ille</xsl:if>
       <xsl:if test="matches(.,'^MILE$')">MILLE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^verd$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]erd$')"><xsl:value-of select="substring-before(.,'erd')"/>ert</xsl:if>
       <xsl:if test="matches(.,'^VERD$')">VERT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^veritable(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eritable(\w*)$')"><xsl:value-of select="substring-before(.,'eritable')"/>éritable<xsl:value-of select="substring-after(.,'eritable')"/></xsl:if>
       <xsl:if test="matches(.,'^VERITABLE(\w*)$')">VÉRITABLE<xsl:value-of select="substring-after(.,'ERITABLE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^parens$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[pP]arens$')"><xsl:value-of select="substring-before(.,'arens')"/>arents</xsl:if>
       <xsl:if test="matches(.,'^PARENS$')">PARENTS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^treuve(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]reuve(\w*)$')"><xsl:value-of select="substring-before(.,'reuve')"/>rouve<xsl:value-of select="substring-after(.,'reuve')"/></xsl:if>
       <xsl:if test="matches(.,'^TREUVE(\w*)$')">TROUVE<xsl:value-of select="substring-after(.,'TREUVE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^resolu(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]esolu(\w*)$')"><xsl:value-of select="substring-before(.,'esolu')"/>ésolu<xsl:value-of select="substring-after(.,'esolu')"/></xsl:if>
       <xsl:if test="matches(.,'^RESOLU(\w*)$')">RÉSOLU<xsl:value-of select="substring-after(.,'RESOLU')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^miserable(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]iserable(\w*)$')"><xsl:value-of select="substring-before(.,'iserable')"/>isérable<xsl:value-of select="substring-after(.,'iserable')"/></xsl:if>
       <xsl:if test="matches(.,'^MISERABLE(\w*)$')">MISÉRABLE<xsl:value-of select="substring-after(.,'MISERABLE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^fidele(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]idele(\w*)$')"><xsl:value-of select="substring-before(.,'idele')"/>idèle<xsl:value-of select="substring-after(.,'idele')"/></xsl:if>
       <xsl:if test="matches(.,'^FIDELE(\w*)$')">FIDÈLE<xsl:value-of select="substring-after(.,'FIDELE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^pourveu(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ourveu(\w*)$')"><xsl:value-of select="substring-before(.,'ourveu')"/>ourvu<xsl:value-of select="substring-after(.,'ourveu')"/></xsl:if>
       <xsl:if test="matches(.,'^POURVEU(\w*)$')">POURVU<xsl:value-of select="substring-after(.,'POURVEU')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^puys$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[pP]uys$')"><xsl:value-of select="substring-before(.,'uys')"/>uis</xsl:if>
       <xsl:if test="matches(.,'^PUYS$')">PUIS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^appetit(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ppetit(\w*)$')"><xsl:value-of select="substring-before(.,'ppetit')"/>ppétit<xsl:value-of select="substring-after(.,'ppetit')"/></xsl:if>
       <xsl:if test="matches(.,'^APPETIT(\w*)$')">APPÉTIT<xsl:value-of select="substring-after(.,'APPETIT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^mestier(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]estier(\w*)$')"><xsl:value-of select="substring-before(.,'estier')"/>étier<xsl:value-of select="substring-after(.,'estier')"/></xsl:if>
       <xsl:if test="matches(.,'^MESTIER(\w*)$')">MÉTIER<xsl:value-of select="substring-after(.,'MESTIER')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^petis$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[pP]etis$')"><xsl:value-of select="substring-before(.,'etis')"/>etits</xsl:if>
       <xsl:if test="matches(.,'^PETIS$')">PETITS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^escrip(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^escrip(\w+)$')">écri<xsl:value-of select="substring-after(.,'escrip')"/></xsl:if>
       <xsl:if test="matches(.,'^Escrip(\w+)$')">Écri<xsl:value-of select="substring-after(.,'Escrip')"/></xsl:if>
       <xsl:if test="matches(.,'^ESCRIP(\w+)$')">ÉCRI<xsl:value-of select="substring-after(.,'ESCRIP')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^escri[^m](\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^escri[^m](\w*)$')">écri<xsl:value-of select="substring-after(.,'escri')"/></xsl:if>
       <xsl:if test="matches(.,'^Escri[^m](\w*)$')">Écri<xsl:value-of select="substring-after(.,'Escri')"/></xsl:if>
       <xsl:if test="matches(.,'^ESCRI[^M](\w*)$')">ÉCRI<xsl:value-of select="substring-after(.,'ESCRI')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^entiere(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]ntiere(\w*)$')"><xsl:value-of select="substring-before(.,'ntiere')"/>ntière<xsl:value-of select="substring-after(.,'ntiere')"/></xsl:if>
       <xsl:if test="matches(.,'^ENTIERE(\w*)$')">ENTIÈRE<xsl:value-of select="substring-after(.,'ENTIERE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^autruy$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]utruy$')"><xsl:value-of select="substring-before(.,'utruy')"/>utrui</xsl:if>
       <xsl:if test="matches(.,'^AUTRUY$')">AUTRUI</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^experience(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]xperience(\w*)$')"><xsl:value-of select="substring-before(.,'xperience')"/>xpérience<xsl:value-of select="substring-after(.,'xperience')"/></xsl:if>
       <xsl:if test="matches(.,'^EXPERIENCE(\w*)$')">EXPÉRIENCE<xsl:value-of select="substring-after(.,'EXPERIENCE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^leu$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]eu$')"><xsl:value-of select="substring-before(.,'eu')"/>u</xsl:if>
       <xsl:if test="matches(.,'^LEU$')">LU</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^plain$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]lain$')"><xsl:value-of select="substring-before(.,'lain')"/>lein</xsl:if>
       <xsl:if test="matches(.,'^PLAIN$')">PLEIN</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^prent$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]rent$')"><xsl:value-of select="substring-before(.,'rent')"/>rend</xsl:if>
       <xsl:if test="matches(.,'^PRENT$')">PREND</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^fusmes$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]usmes$')"><xsl:value-of select="substring-before(.,'usmes')"/>ûmes</xsl:if>
       <xsl:if test="matches(.,'^FUSMES$')">FÛMES</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^tens$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]ens$')"><xsl:value-of select="substring-before(.,'ens')"/>emps</xsl:if>
       <xsl:if test="matches(.,'^TENS$')">TEMPS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^mension$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ension$')"><xsl:value-of select="substring-before(.,'ension')"/>ention</xsl:if>
       <xsl:if test="matches(.,'^MENSION$')">MENTION</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^mieus$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ieus$')"><xsl:value-of select="substring-before(.,'ieus')"/>ieux</xsl:if>
       <xsl:if test="matches(.,'^MIEUS$')">MIEUX</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^fueillet(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ueillet(\w*)$')"><xsl:value-of select="substring-before(.,'ueillet')"/>euillet<xsl:value-of select="substring-after(.,'ueillet')"/></xsl:if>
       <xsl:if test="matches(.,'^FUEILLET(\w*)$')">FEUILLET<xsl:value-of select="substring-after(.,'FUEILLET')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^fueillage(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ueillage(\w*)$')"><xsl:value-of select="substring-before(.,'ueillage')"/>euillage<xsl:value-of select="substring-after(.,'ueillage')"/></xsl:if>
       <xsl:if test="matches(.,'^FUEILLAGE(\w*)$')">FEUILLAGE<xsl:value-of select="substring-after(.,'FUEILLAGE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^fueil$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ueil$')"><xsl:value-of select="substring-before(.,'ueil')"/>euille</xsl:if>
       <xsl:if test="matches(.,'^FUEIL$')">FEUILLE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^siege(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]iege(\w*)$')"><xsl:value-of select="substring-before(.,'iege')"/>iège<xsl:value-of select="substring-after(.,'iege')"/></xsl:if>
       <xsl:if test="matches(.,'^SIEGE(\w*)$')">SIÈGE<xsl:value-of select="substring-after(.,'SIEGE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^acquerir$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]cquerir$')"><xsl:value-of select="substring-before(.,'cquerir')"/>cquérir</xsl:if>
       <xsl:if test="matches(.,'^ACQUERIR$')">ACQUÉRIR</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^degrez', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]egrez$')"><xsl:value-of select="substring-before(.,'egrez')"/>egrés</xsl:if>
       <xsl:if test="matches(.,'^DEGREZ$')">DEGRÉS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ennemys', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]nnemys$')"><xsl:value-of select="substring-before(.,'nnemys')"/>nnemis</xsl:if>
       <xsl:if test="matches(.,'^ENNEMYS$')">ENNEMIS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^poete(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]oete(\w*)$')"><xsl:value-of select="substring-before(.,'oete')"/>oète<xsl:value-of select="substring-after(.,'oete')"/></xsl:if>
       <xsl:if test="matches(.,'^POETE(\w*)$')">POÈTE<xsl:value-of select="substring-after(.,'POETE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^Romme', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]omme$')"><xsl:value-of select="substring-before(.,'omme')"/>ome</xsl:if>
       <xsl:if test="matches(.,'^ROMME$')">ROME</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^dous', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ous$')"><xsl:value-of select="substring-before(.,'ous')"/>oux</xsl:if>
       <xsl:if test="matches(.,'^OUS$')">OUX</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^nommee(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Nn]ommee(\w*)$')"><xsl:value-of select="substring-before(.,'ommee')"/>ommée<xsl:value-of select="substring-after(.,'ommee')"/></xsl:if>
       <xsl:if test="matches(.,'^NOMMEE(\w*)$')">NOMMÉE<xsl:value-of select="substring-after(.,'NOMMEE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^paour(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]aour(\w*)$')"><xsl:value-of select="substring-before(.,'aour')"/>eur<xsl:value-of select="substring-after(.,'aour')"/></xsl:if>
       <xsl:if test="matches(.,'^PAOUR(\w*)$')">PEUR<xsl:value-of select="substring-after(.,'PAOUR')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^proces$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]roces$')"><xsl:value-of select="substring-before(.,'roces')"/>rocès</xsl:if>
       <xsl:if test="matches(.,'^PROCES$')">PROCÈS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^brief$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]rief$')"><xsl:value-of select="substring-before(.,'rief')"/>ref</xsl:if>
       <xsl:if test="matches(.,'^BRIEF$')">BREF</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^esperit(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]sperit(\w*)$')"><xsl:value-of select="substring-before(.,'sperit')"/>sprit<xsl:value-of select="substring-after(.,'sperit')"/></xsl:if>
       <xsl:if test="matches(.,'^ESPERIT(\w*)$')">ESPRIT<xsl:value-of select="substring-after(.,'ESPERIT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^considere$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]onsidere$')"><xsl:value-of select="substring-before(.,'onsidere')"/>onsidère</xsl:if>
       <xsl:if test="matches(.,'^CONSIDERE$')">CONSIDÈRE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^considerer$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]onsiderer$')"><xsl:value-of select="substring-before(.,'onsiderer')"/>onsidérer</xsl:if>
       <xsl:if test="matches(.,'^CONSIDERER$')">CONSIDÉRER</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^consideré(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]onsideré(\w*)$')"><xsl:value-of select="substring-before(.,'onsideré')"/>onsidéré</xsl:if>
       <xsl:if test="matches(.,'^CONSIDERÉ(\w*)$')">CONSIDÉRÉ</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^considerant(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]onsiderant(\w*)$')"><xsl:value-of select="substring-before(.,'onsiderant')"/>onsidérant</xsl:if>
       <xsl:if test="matches(.,'^CONSIDERANT(\w*)$')">CONSIDÉRANT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^estude(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^estude(\w*)$')">étude<xsl:value-of select="substring-after(.,'estude')"/></xsl:if>
       <xsl:if test="matches(.,'^Estude(\w*)$')">Étude<xsl:value-of select="substring-after(.,'Estude')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTUDE(\w*)$')">ÉTUDE<xsl:value-of select="substring-after(.,'ESTUDE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^testes$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]estes$')"><xsl:value-of select="substring-before(.,'estes')"/>êtes</xsl:if>
       <xsl:if test="matches(.,'^TESTES$')">TÊTES</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^priere(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]riere(\w*)$')"><xsl:value-of select="substring-before(.,'riere')"/>rière<xsl:value-of select="substring-after(.,'riere')"/></xsl:if>
       <xsl:if test="matches(.,'^PRIERE(\w*)$')">PRIÈRE<xsl:value-of select="substring-after(.,'PRIERE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^voyes$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]oyes$')"><xsl:value-of select="substring-before(.,'voyes')"/>voies</xsl:if>
       <xsl:if test="matches(.,'^VOYES$')">VOIES</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^homes?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]omes?$')"><xsl:value-of select="substring-before(.,'ome')"/>omme<xsl:value-of select="substring-after(.,'ome')"/></xsl:if>
       <xsl:if test="matches(.,'^HOMES?$')">HOMME<xsl:value-of select="substring-after(.,'HOME')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^espaule(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^espaule(\w*)$')">épaule<xsl:value-of select="substring-after(.,'espaule')"/></xsl:if>
       <xsl:if test="matches(.,'^Espaule(\w*)$')">Épaule<xsl:value-of select="substring-after(.,'Espaule')"/></xsl:if>
       <xsl:if test="matches(.,'^ESPAULE(\w*)$')">ÉPAULE<xsl:value-of select="substring-after(.,'ESPAULE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^nud$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Nn]ud$')"><xsl:value-of select="substring-before(.,'ud')"/>u</xsl:if>
       <xsl:if test="matches(.,'^NUD$')">NU</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^presques$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]resques$')"><xsl:value-of select="substring-before(.,'resques')"/>resque</xsl:if>
       <xsl:if test="matches(.,'^PRESQUES$')">PRESQUE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^eternelle(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^eternelle(\w*)$')">éternelle<xsl:value-of select="substring-after(.,'eternelle')"/></xsl:if>
       <xsl:if test="matches(.,'^Eternelle(\w*)$')">Éternelle<xsl:value-of select="substring-after(.,'Eternelle')"/></xsl:if>
       <xsl:if test="matches(.,'^ETERNELLE(\w*)$')">ÉTERNELLE<xsl:value-of select="substring-after(.,'ETERNELLE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^arriere(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]rriere(\w*)$')"><xsl:value-of select="substring-before(.,'rriere')"/>rrière<xsl:value-of select="substring-after(.,'rriere')"/></xsl:if>
       <xsl:if test="matches(.,'^ARRIERE(\w*)$')">ARRIÈRE<xsl:value-of select="substring-after(.,'ARRIERE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^pais$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ais$')"><xsl:value-of select="substring-before(.,'ais')"/>ays</xsl:if>
       <xsl:if test="matches(.,'^PAIS$')">PAYS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^Ameriquains$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]meriquains$')"><xsl:value-of select="substring-before(.,'meriquains')"/>méricains</xsl:if>
       <xsl:if test="matches(.,'^AMERIQUAINS$')">AMÉRICAINS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^reput(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]eput(\w*)$')"><xsl:value-of select="substring-before(.,'eput')"/>éput<xsl:value-of select="substring-after(.,'eput')"/></xsl:if>
       <xsl:if test="matches(.,'^REPUT(\w*)$')">RÉPUT<xsl:value-of select="substring-after(.,'REPUT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ensuy(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]nsuy(\w*)$')"><xsl:value-of select="substring-before(.,'nsuy')"/>nsui<xsl:value-of select="substring-after(.,'nsuy')"/></xsl:if>
       <xsl:if test="matches(.,'^ENSUY(\w*)$')">ENSUI<xsl:value-of select="substring-after(.,'ENSUY')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^doulceur(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]oulceur(\w*)$')"><xsl:value-of select="substring-before(.,'oulceur')"/>ouceur<xsl:value-of select="substring-after(.,'oulceur')"/></xsl:if>
       <xsl:if test="matches(.,'^DOULCEUR(\w*)$')">DOUCEUR<xsl:value-of select="substring-after(.,'DOULCEUR')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^dautant$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]autant$')"><xsl:value-of select="substring-before(.,'autant')"/>'autant</xsl:if>
       <xsl:if test="matches(.,'^DAUTANT$')">D'AUTANT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^medecin(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]edecin(\w*)$')"><xsl:value-of select="substring-before(.,'edecin')"/>édecin<xsl:value-of select="substring-after(.,'edecin')"/></xsl:if>
       <xsl:if test="matches(.,'^MEDECIN(\w*)$')">MÉDECIN<xsl:value-of select="substring-after(.,'MEDECIN')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^soucy(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]oucy(\w*)$')"><xsl:value-of select="substring-before(.,'oucy')"/>ouci<xsl:value-of select="substring-after(.,'oucy')"/></xsl:if>
       <xsl:if test="matches(.,'^SOUCY(\w*)$')">SOUCI<xsl:value-of select="substring-after(.,'SOUCY')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^sejour(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]ejour(\w*)$')"><xsl:value-of select="substring-before(.,'ejour')"/>éjour<xsl:value-of select="substring-after(.,'ejour')"/></xsl:if>
       <xsl:if test="matches(.,'^SEJOUR(\w*)$')">SÉJOUR<xsl:value-of select="substring-after(.,'SEJOUR')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^esc[^lira](\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^esc[^lira](\w*)$')">éc<xsl:value-of select="substring-after(.,'esc')"/></xsl:if>
       <xsl:if test="matches(.,'^Esc[^lira](\w*)$')">Éc<xsl:value-of select="substring-after(.,'Esc')"/></xsl:if>
       <xsl:if test="matches(.,'^ESC[^LIRA](\w*)$')">ÉC<xsl:value-of select="substring-after(.,'ESC')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^declar(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]eclar(\w*)$')"><xsl:value-of select="substring-before(.,'eclar')"/>éclar<xsl:value-of select="substring-after(.,'eclar')"/></xsl:if>
       <xsl:if test="matches(.,'^DECLAR(\w*)$')">DÉCLAR<xsl:value-of select="substring-after(.,'DECLAR')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^levre(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]evre(\w*)$')"><xsl:value-of select="substring-before(.,'evre')"/>èvre<xsl:value-of select="substring-after(.,'evre')"/></xsl:if>
       <xsl:if test="matches(.,'^LEVRE(\w*)$')">LÈVRE<xsl:value-of select="substring-after(.,'LEVRE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^mil$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]il$')"><xsl:value-of select="substring-before(.,'il')"/>ille</xsl:if>
       <xsl:if test="matches(.,'^MIL$')">MILLE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^regne(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]egne(\w*)$')"><xsl:value-of select="substring-before(.,'egne')"/>ègne<xsl:value-of select="substring-after(.,'egne')"/></xsl:if>
       <xsl:if test="matches(.,'^REGNE(\w*)$')">RÈGNE<xsl:value-of select="substring-after(.,'REGNE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^veus$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eus$')"><xsl:value-of select="substring-before(.,'eus')"/>us</xsl:if>
       <xsl:if test="matches(.,'^VEUS$')">VUS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^discretion(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]iscretion(\w*)$')"><xsl:value-of select="substring-before(.,'iscretion')"/>iscrétion<xsl:value-of select="substring-after(.,'iscretion')"/></xsl:if>
       <xsl:if test="matches(.,'^DISCRETION(\w*)$')">DISCRÉTION<xsl:value-of select="substring-after(.,'DISCRETION')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^prestre(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]restre(\w*)$')"><xsl:value-of select="substring-before(.,'restre')"/>rêtre<xsl:value-of select="substring-after(.,'restre')"/></xsl:if>
       <xsl:if test="matches(.,'^PRESTRE(\w*)$')">PRÊTRE<xsl:value-of select="substring-after(.,'PRESTRE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^voluntiers$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]oluntiers')"><xsl:value-of select="substring-before(.,'oluntiers')"/>olontiers</xsl:if>
       <xsl:if test="matches(.,'^VOLUNTIERS$')">VOLONTIERS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^frize(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]rize(\w*)$')"><xsl:value-of select="substring-before(.,'rize')"/>rise<xsl:value-of select="substring-after(.,'rize')"/></xsl:if>
       <xsl:if test="matches(.,'^PRESTRE(\w*)$')">PRÊTRE<xsl:value-of select="substring-after(.,'PRESTRE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^obei(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]bei(\w*)$')"><xsl:value-of select="substring-before(.,'bei')"/>béi<xsl:value-of select="substring-after(.,'bei')"/></xsl:if>
       <xsl:if test="matches(.,'^OBEI(\w*)$')">OBÉI<xsl:value-of select="substring-after(.,'OBEI')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^procede(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]rocede(\w*)$')"><xsl:value-of select="substring-before(.,'rocede')"/>rocède<xsl:value-of select="substring-after(.,'rocede')"/></xsl:if>
       <xsl:if test="matches(.,'^PROCEDE(\w*)$')">PROCÈDE<xsl:value-of select="substring-after(.,'PROCEDE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^gist$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]ist$')"><xsl:value-of select="substring-before(.,'ist')"/>ît</xsl:if>
       <xsl:if test="matches(.,'^GIST$')">GÎT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^resis(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]esis(\w*)$')"><xsl:value-of select="substring-before(.,'esis')"/>ésis<xsl:value-of select="substring-after(.,'esis')"/></xsl:if>
       <xsl:if test="matches(.,'^RESIS(\w*)$')">RÉSIS<xsl:value-of select="substring-after(.,'RESIS')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^descou(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]escou(\w*)$')"><xsl:value-of select="substring-before(.,'escou')"/>écou<xsl:value-of select="substring-after(.,'escou')"/></xsl:if>
       <xsl:if test="matches(.,'^DESCOU(\w*)$')">DÉCOU<xsl:value-of select="substring-after(.,'DESCOU')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^mescha(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]escha(\w*)$')"><xsl:value-of select="substring-before(.,'escha')"/>écha<xsl:value-of select="substring-after(.,'escha')"/></xsl:if>
       <xsl:if test="matches(.,'^MESCHA(\w*)$')">MÉCHA<xsl:value-of select="substring-after(.,'MESCHA')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^verite(\w*)$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^[Vv]erite(\w*)$')"><xsl:value-of select="substring-before(.,'erite')"/>érité<xsl:value-of select="substring-after(.,'erite')"/></xsl:if>
         <xsl:if test="matches(.,'^VERITE(\w*)$')">VÉRITÉ<xsl:value-of select="substring-after(.,'VERITE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^verit(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]erit(\w*)$')"><xsl:value-of select="substring-before(.,'erit')"/>érit<xsl:value-of select="substring-after(.,'erit')"/></xsl:if>
       <xsl:if test="matches(.,'^VERIT(\w*)$')">VÉRIT<xsl:value-of select="substring-after(.,'VERIT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^oyseau(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]yseau(\w*)$')"><xsl:value-of select="substring-before(.,'yseau')"/>iseau<xsl:value-of select="substring-after(.,'yseau')"/></xsl:if>
       <xsl:if test="matches(.,'^OYSEAU(\w*)$')">OISEAU<xsl:value-of select="substring-after(.,'OYSEAU')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^desormais$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esormais$')"><xsl:value-of select="substring-before(.,'esormais')"/>ésormais</xsl:if>
       <xsl:if test="matches(.,'^DESORMAIS$')">DÉSORMAIS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^pouvois$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ouvois$')"><xsl:value-of select="substring-before(.,'ouvois')"/>ouvais</xsl:if>
       <xsl:if test="matches(.,'^POUVOIS$')">POUVAIS</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)aiges?$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)aiges?$')"><xsl:value-of select="substring-before(.,'aige')"/>age<xsl:value-of select="substring-after(.,'aige')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w+)AIGES?$')"><xsl:value-of select="substring-before(.,'AIGE')"/>AGE<xsl:value-of select="substring-after(.,'AIGE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^fasché(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]asché(\w*)$')"><xsl:value-of select="substring-before(.,'asché')"/>âché<xsl:value-of select="substring-after(.,'isaige')"/></xsl:if>
       <xsl:if test="matches(.,'^FASCHÉ(\w*)$')">FÂCHÉ<xsl:value-of select="substring-after(.,'FASCHÉ')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^expres$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]xpres$')"><xsl:value-of select="substring-before(.,'xpres')"/>xprès</xsl:if>
       <xsl:if test="matches(.,'^EXPRES$')">EXPRÈS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^chasteau(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]hasteau(\w*)$')"><xsl:value-of select="substring-before(.,'hasteau')"/>hâteau<xsl:value-of select="substring-after(.,'hasteau')"/></xsl:if>
       <xsl:if test="matches(.,'^CHASTEAU(\w*)$')">CHÂTEAU<xsl:value-of select="substring-after(.,'CHASTEAU')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^receut$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]eceut$')"><xsl:value-of select="substring-before(.,'eceut')"/>eçut</xsl:if>
       <xsl:if test="matches(.,'^RECEUT$')">REÇUT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ars$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]rs$')"><xsl:value-of select="substring-before(.,'rs')"/>rts</xsl:if>
       <xsl:if test="matches(.,'^ARS$')">ARTS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^veit$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eit$')"><xsl:value-of select="substring-before(.,'eit')"/>it</xsl:if>
       <xsl:if test="matches(.,'^VEIT$')">VIT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^compere(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ompere(\w*)$')"><xsl:value-of select="substring-before(.,'ompere')"/>ompère<xsl:value-of select="substring-after(.,'hasteau')"/></xsl:if>
       <xsl:if test="matches(.,'^COMPERE(\w*)$')">COMPÈRE<xsl:value-of select="substring-after(.,'COMPERE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^riens$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]iens$')"><xsl:value-of select="substring-before(.,'iens')"/>ien</xsl:if>
       <xsl:if test="matches(.,'^RIENS$')">RIEN</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^eviter$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^eviter$')">éviter</xsl:if>
       <xsl:if test="matches(.,'^Eviter$')">Éviter</xsl:if>
       <xsl:if test="matches(.,'^EVITER$')">ÉVITER</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^lheure', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]heure$')"><xsl:value-of select="substring-before(.,'heure')"/>'heure</xsl:if>
       <xsl:if test="matches(.,'^LHEURE$')">L'HEURE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^colere(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]olere(\w*)$')"><xsl:value-of select="substring-before(.,'olere')"/>olère<xsl:value-of select="substring-after(.,'olere')"/></xsl:if>
       <xsl:if test="matches(.,'^COLERE(\w*)$')">COLÈRE<xsl:value-of select="substring-after(.,'COLERE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^damoyselle(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]amoyselle(\w*)$')"><xsl:value-of select="substring-before(.,'amoyselle')"/>amoiselle<xsl:value-of select="substring-after(.,'olere')"/></xsl:if>
       <xsl:if test="matches(.,'^DAMOYSELLE(\w*)$')">DAMOISELLE<xsl:value-of select="substring-after(.,'DAMOYSELLE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^precieu(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]recieu(\w*)$')"><xsl:value-of select="substring-before(.,'recieu')"/>récieu<xsl:value-of select="substring-after(.,'recieu')"/></xsl:if>
       <xsl:if test="matches(.,'^PRECIEU(\w*)$')">PRÉCIEU<xsl:value-of select="substring-after(.,'PRECIEU')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^gener(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]ener(\w*)$')"><xsl:value-of select="substring-before(.,'ener')"/>énér<xsl:value-of select="substring-after(.,'ener')"/></xsl:if>
       <xsl:if test="matches(.,'^GENER(\w*)$')">GÉNÉR<xsl:value-of select="substring-after(.,'GENER')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^vescu(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]escu(\w*)$')"><xsl:value-of select="substring-before(.,'escu')"/>écu<xsl:value-of select="substring-after(.,'escu')"/></xsl:if>
       <xsl:if test="matches(.,'^VESCU(\w*)$')">VÉCU<xsl:value-of select="substring-after(.,'VESCU')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^louenge(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]ouenge(\w*)$')"><xsl:value-of select="substring-before(.,'ouenge')"/>ouange<xsl:value-of select="substring-after(.,'ouenge')"/></xsl:if>
       <xsl:if test="matches(.,'^LOUENGE(\w*)$')">LOUANGE<xsl:value-of select="substring-after(.,'LOUENGE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^meine', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]eine$')"><xsl:value-of select="substring-before(.,'eine')"/>ène</xsl:if>
       <xsl:if test="matches(.,'^MEINE$')">MÈNE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)iesmes?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)iesmes?$')"><xsl:value-of select="substring-before(.,'iesme')"/>ième<xsl:value-of select="substring-after(.,'iesme')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)IESMES?$')"><xsl:value-of select="substring-before(.,'IESME')"/>IÈME<xsl:value-of select="substring-after(.,'IESME')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^recomp(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]ecomp(\w*)$')"><xsl:value-of select="substring-before(.,'ecomp')"/>écomp<xsl:value-of select="substring-after(.,'ecomp')"/></xsl:if>
       <xsl:if test="matches(.,'^RECOMP(\w*)$')">RÉCOMP<xsl:value-of select="substring-after(.,'RECOMP')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^liez', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]iez$')"><xsl:value-of select="substring-before(.,'iez')"/>iés</xsl:if>
       <xsl:if test="matches(.,'^LIEZ$')">LIÉS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^difference(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ifference(\w*)$')"><xsl:value-of select="substring-before(.,'ifference')"/>ifférence<xsl:value-of select="substring-after(.,'ifference')"/></xsl:if>
       <xsl:if test="matches(.,'^DIFFERENCE(\w*)$')">DIFFÉRENCE<xsl:value-of select="substring-after(.,'DIFFERENCE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ignorans', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ii]gnorans$')"><xsl:value-of select="substring-before(.,'gnorans')"/>gnorants</xsl:if>
       <xsl:if test="matches(.,'^IGNORANS$')">IGNORANTS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^consequence(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]onsequence(\w*)$')"><xsl:value-of select="substring-before(.,'onsequence')"/>onséquence<xsl:value-of select="substring-after(.,'onsequence')"/></xsl:if>
       <xsl:if test="matches(.,'^CONSEQUENCE(\w*)$')">CONSÉQUENCE<xsl:value-of select="substring-after(.,'CONSEQUENCE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^voulte(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]oulte(\w*)$')"><xsl:value-of select="substring-before(.,'oulte')"/>oûte<xsl:value-of select="substring-after(.,'oulte')"/></xsl:if>
       <xsl:if test="matches(.,'^VOULTE(\w*)$')">VOÛTE<xsl:value-of select="substring-after(.,'VOULTE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^vuide(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]uide(\w*)$')"><xsl:value-of select="substring-before(.,'uide')"/>ide<xsl:value-of select="substring-after(.,'uide')"/></xsl:if>
       <xsl:if test="matches(.,'^VUIDE(\w*)$')">VIDE<xsl:value-of select="substring-after(.,'VUIDE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^vey$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]ey$')"><xsl:value-of select="substring-before(.,'ey')"/>is</xsl:if>
       <xsl:if test="matches(.,'^VEY$')">VIS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^arrest(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]rrest(\w*)$')"><xsl:value-of select="substring-before(.,'rrest')"/>rrêt<xsl:value-of select="substring-after(.,'rrest')"/></xsl:if>
       <xsl:if test="matches(.,'^ARREST(\w*)$')">ARRÊT<xsl:value-of select="substring-after(.,'ARREST')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)credit(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Cc]redit(\w*)$')"><xsl:value-of select="substring-before(.,'redit')"/>rédit<xsl:value-of select="substring-after(.,'redit')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)CREDIT(\w*)$')"><xsl:value-of select="substring-before(.,'CREDIT')"/>CRÉDIT<xsl:value-of select="substring-after(.,'CREDIT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^povre(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ovre(\w*)$')"><xsl:value-of select="substring-before(.,'ovre')"/>auvre<xsl:value-of select="substring-after(.,'ovre')"/></xsl:if>
       <xsl:if test="matches(.,'^POVRE(\w*)$')">PAUVRE<xsl:value-of select="substring-after(.,'POVRE')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)[^fh]erent$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)[^fh]erent$')"><xsl:value-of select="substring-before(.,'erent')"/>èrent</xsl:if>
                    <xsl:if test="matches(.,'^(\w+)[^FH]ERENT$')"><xsl:value-of select="substring-before(.,'ERENT')"/>ÈRENT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ceans$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]eans$')"><xsl:value-of select="substring-before(.,'eans')"/>éans</xsl:if>
       <xsl:if test="matches(.,'^CEANS$')">CÉANS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^mystere(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ystere(\w*)$')"><xsl:value-of select="substring-before(.,'ystere')"/>ystère<xsl:value-of select="substring-after(.,'ystere')"/></xsl:if>
       <xsl:if test="matches(.,'^MYSTERE(\w*)$')">MYSTÈRE<xsl:value-of select="substring-after(.,'MYSTERE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^tenebre(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]enebre(\w*)$')"><xsl:value-of select="substring-before(.,'enebre')"/>énèbre<xsl:value-of select="substring-after(.,'enebre')"/></xsl:if>
       <xsl:if test="matches(.,'^TENEBRE(\w*)$')">TÉNÈBRE<xsl:value-of select="substring-after(.,'TENEBRE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^deliberé(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]eliberé(\w*)$')"><xsl:value-of select="substring-before(.,'eliberé')"/>elibéré<xsl:value-of select="substring-after(.,'eliberé')"/></xsl:if>
       <xsl:if test="matches(.,'^DELIBERÉ(\w*)$')">DELIBÉRÉ<xsl:value-of select="substring-after(.,'DELIBERÉ')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^serpens$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]erpens$')"><xsl:value-of select="substring-before(.,'erpens')"/>erpents</xsl:if>
       <xsl:if test="matches(.,'^SERPENS$')">SERPENTS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^propous$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ropous$')"><xsl:value-of select="substring-before(.,'ropous')"/>ropos</xsl:if>
       <xsl:if test="matches(.,'^PROPOUS$')">PROPOS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^festes$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[fF]estes$')"><xsl:value-of select="substring-before(.,'estes')"/>êtes</xsl:if>
       <xsl:if test="matches(.,'^FESTES$')">FÊTES</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^annee(\w*)$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^[Aa]nnee(\w*)$')"><xsl:value-of select="substring-before(.,'nnee')"/>nnée<xsl:value-of select="substring-after(.,'nnee')"/></xsl:if>
       <xsl:if test="matches(.,'^ANNEE(\w*)$')">ANNÉE<xsl:value-of select="substring-after(.,'ANNEE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^misere(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]isere(\w*)$')"><xsl:value-of select="substring-before(.,'isere')"/>isère<xsl:value-of select="substring-after(.,'isere')"/></xsl:if>
       <xsl:if test="matches(.,'^MISERE(\w*)$')">MISÈRE<xsl:value-of select="substring-after(.,'MISERE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^fumee(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]umee(\w*)$')"><xsl:value-of select="substring-before(.,'umee')"/>umée<xsl:value-of select="substring-after(.,'umee')"/></xsl:if>
       <xsl:if test="matches(.,'^FUMEE(\w*)$')">FUMÉE<xsl:value-of select="substring-after(.,'FUMEE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^pluye(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]luye(\w*)$')"><xsl:value-of select="substring-before(.,'luye')"/>luie<xsl:value-of select="substring-after(.,'luye')"/></xsl:if>
       <xsl:if test="matches(.,'^PLUYE(\w*)$')">PLUIE<xsl:value-of select="substring-after(.,'PLUYE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^poeut$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]oeut$')"><xsl:value-of select="substring-before(.,'oeut')"/>eut</xsl:if>
       <xsl:if test="matches(.,'^POEUT$')">PEUT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^closture(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]losture(\w*)$')"><xsl:value-of select="substring-before(.,'losture')"/>lôture<xsl:value-of select="substring-after(.,'luye')"/></xsl:if>
       <xsl:if test="matches(.,'^CLOSTURE(\w*)$')">CLÔTURE<xsl:value-of select="substring-after(.,'CLOSTURE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^singuliere(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]inguliere(\w*)$')"><xsl:value-of select="substring-before(.,'inguliere')"/>ingulière<xsl:value-of select="substring-after(.,'inguliere')"/></xsl:if>
       <xsl:if test="matches(.,'^INGULIERE(\w*)$')">INGULIÈRE<xsl:value-of select="substring-after(.,'INGULIERE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^desespoir(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esespoir(\w*)$')"><xsl:value-of select="substring-before(.,'esespoir')"/>ésespoir<xsl:value-of select="substring-after(.,'esespoir')"/></xsl:if>
       <xsl:if test="matches(.,'^DESESPOIR(\w*)$')">DÉSESPOIR<xsl:value-of select="substring-after(.,'DESESPOIR')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^operation(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]peration(\w*)$')"><xsl:value-of select="substring-before(.,'peration')"/>pération<xsl:value-of select="substring-after(.,'peration')"/></xsl:if>
       <xsl:if test="matches(.,'^OPERATION(\w*)$')">OPÉRATION<xsl:value-of select="substring-after(.,'OPERATION')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^flame(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]lame(\w*)$')"><xsl:value-of select="substring-before(.,'lame')"/>lamme<xsl:value-of select="substring-after(.,'lame')"/></xsl:if>
       <xsl:if test="matches(.,'^FLAME(\w*)$')">FLAMME<xsl:value-of select="substring-after(.,'FLAME')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^moien(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]oien(\w*)$')"><xsl:value-of select="substring-before(.,'oien')"/>oyen<xsl:value-of select="substring-after(.,'oien')"/></xsl:if>
       <xsl:if test="matches(.,'^MOIEN(\w*)$')">MOYEN<xsl:value-of select="substring-after(.,'MOIEN')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^haste$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]aste$')"><xsl:value-of select="substring-before(.,'aste')"/>âte</xsl:if>
       <xsl:if test="matches(.,'^HASTE$')">HÂTE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^edifice(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^edifice(\w*)$')">édifice<xsl:value-of select="substring-after(.,'edifice')"/></xsl:if>
       <xsl:if test="matches(.,'^Edifice(\w*)$')">Édifice<xsl:value-of select="substring-after(.,'Edifice')"/></xsl:if>
       <xsl:if test="matches(.,'^EDIFICE(\w*)$')">ÉDIFICE<xsl:value-of select="substring-after(.,'EDIFICE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^preface(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]reface(\w*)$')"><xsl:value-of select="substring-before(.,'reface')"/>réface<xsl:value-of select="substring-after(.,'reface')"/></xsl:if>
       <xsl:if test="matches(.,'^PREFACE(\w*)$')">PRÉFACE<xsl:value-of select="substring-after(.,'PREFACE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^gay(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]ay(\w*)$')"><xsl:value-of select="substring-before(.,'ay')"/>ai<xsl:value-of select="substring-after(.,'ay')"/></xsl:if>
       <xsl:if test="matches(.,'^GAY(\w*)$')">GAI<xsl:value-of select="substring-after(.,'GAY')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^esgard(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^esgard(\w*)$')">égard<xsl:value-of select="substring-after(.,'esgard')"/></xsl:if>
       <xsl:if test="matches(.,'^Esgard(\w*)$')">Égard<xsl:value-of select="substring-after(.,'Esgard')"/></xsl:if>
       <xsl:if test="matches(.,'^ESGARD(\w*)$')">ÉGARD<xsl:value-of select="substring-after(.,'ESGARD')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^diametre(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]iametre(\w*)$')"><xsl:value-of select="substring-before(.,'iametre')"/>iamètre<xsl:value-of select="substring-after(.,'iametre')"/></xsl:if>
       <xsl:if test="matches(.,'^DIAMETRE(\w*)$')">DIAMÈTRE<xsl:value-of select="substring-after(.,'DIAMETRE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^onc$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]nc$')"><xsl:value-of select="substring-before(.,'nc')"/>nques</xsl:if>
       <xsl:if test="matches(.,'^ONC$')">ONQUES</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^pronun(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ronun(\w*)$')"><xsl:value-of select="substring-before(.,'ronun')"/>ronon<xsl:value-of select="substring-after(.,'ronun')"/></xsl:if>
       <xsl:if test="matches(.,'^PRONUN(\w*)$')">PRONON<xsl:value-of select="substring-after(.,'PRONUN')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^debat(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ebat(\w*)$')"><xsl:value-of select="substring-before(.,'ebat')"/>ébat<xsl:value-of select="substring-after(.,'ebat')"/></xsl:if>
       <xsl:if test="matches(.,'^DEBAT(\w*)$')">DÉBAT<xsl:value-of select="substring-after(.,'DEBAT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^mors$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ors$')"><xsl:value-of select="substring-before(.,'ors')"/>orts</xsl:if>
       <xsl:if test="matches(.,'^MORS$')">MORTS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^pillier(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]illier(\w*)$')"><xsl:value-of select="substring-before(.,'illier')"/>ilier<xsl:value-of select="substring-after(.,'illier')"/></xsl:if>
       <xsl:if test="matches(.,'^PILLIER(\w*)$')">PILIER<xsl:value-of select="substring-after(.,'PILLIER')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^communement$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ommunement$')"><xsl:value-of select="substring-before(.,'ommunement')"/>ommunément</xsl:if>
       <xsl:if test="matches(.,'^COMMUNEMENT$')">COMMUNÉMENT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^flesche(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]lesche(\w*)$')"><xsl:value-of select="substring-before(.,'lesche')"/>lêche<xsl:value-of select="substring-after(.,'lesche')"/></xsl:if>
       <xsl:if test="matches(.,'^FLESCHE(\w*)$')">FLÊCHE<xsl:value-of select="substring-after(.,'FLESCHE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^scelon$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]celon$')"><xsl:value-of select="substring-before(.,'celon')"/>elon</xsl:if>
       <xsl:if test="matches(.,'^SCELON$')">SELON</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^souloit$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^souloit$')">avait l'habitude de</xsl:if>
       <xsl:if test="matches(.,'^Souloit$')">Avait l'habitude de</xsl:if>
       <xsl:if test="matches(.,'^SOULOIT$')">AVAIT L'HABITUDE DE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^vien$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[vV]ien$')"><xsl:value-of select="substring-before(.,'ien')"/>iens</xsl:if>
       <xsl:if test="matches(.,'^VIEN$')">VIENS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^apertement$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^apertement$')">ouvertement</xsl:if>
       <xsl:if test="matches(.,'^Apertement$')">Ouvertement</xsl:if>
       <xsl:if test="matches(.,'^APERTEMENT$')">OUVERTEMENT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^estang(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^estang(\w*)$')">étang<xsl:value-of select="substring-after(.,'estang')"/></xsl:if>
       <xsl:if test="matches(.,'^Estang(\w*)$')">Étang<xsl:value-of select="substring-after(.,'Estang')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTANG(\w*)$')">ÉTANG<xsl:value-of select="substring-after(.,'ESTANG')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^remply(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[rR]emply(\w*)$')"><xsl:value-of select="substring-before(.,'emply')"/>empli<xsl:value-of select="substring-after(.,'emply')"/></xsl:if>
       <xsl:if test="matches(.,'^REMPLY(\w*)$')">REMPLI<xsl:value-of select="substring-after(.,'REMPLY')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^clerement(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]lerement(\w*)$')"><xsl:value-of select="substring-before(.,'lerement')"/>lairement<xsl:value-of select="substring-after(.,'lerement')"/></xsl:if>
       <xsl:if test="matches(.,'^CLEREMENT(\w*)$')">CLAIREMENT<xsl:value-of select="substring-after(.,'CLEREMENT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^masle(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]asle(\w*)$')"><xsl:value-of select="substring-before(.,'asle')"/>âle<xsl:value-of select="substring-after(.,'asle')"/></xsl:if>
       <xsl:if test="matches(.,'^MASLE(\w*)$')">MÂLE<xsl:value-of select="substring-after(.,'masle')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^allegue(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]llegue(\w*)$')"><xsl:value-of select="substring-before(.,'llegue')"/>llègue<xsl:value-of select="substring-after(.,'llegue')"/></xsl:if>
       <xsl:if test="matches(.,'^ALLEGUE(\w*)$')">ALLÈGUE<xsl:value-of select="substring-after(.,'ALLEGUE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^donnee(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]onnee(\w*)$')"><xsl:value-of select="substring-before(.,'onnee')"/>onnée<xsl:value-of select="substring-after(.,'onnee')"/></xsl:if>
       <xsl:if test="matches(.,'^DONNEE(\w*)$')">DONNÉE<xsl:value-of select="substring-after(.,'DONNEE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^egal(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^egal(\w*)$')">égal<xsl:value-of select="substring-after(.,'egal')"/></xsl:if>
       <xsl:if test="matches(.,'^Egal(\w*)$')">Égal<xsl:value-of select="substring-after(.,'Egal')"/></xsl:if>
       <xsl:if test="matches(.,'^EGAL(\w*)$')">ÉGAL<xsl:value-of select="substring-after(.,'EGAL')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^gregeois(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]regeois(\w*)$')"><xsl:value-of select="substring-before(.,'regeois')"/>régeois<xsl:value-of select="substring-after(.,'regeois')"/></xsl:if>
       <xsl:if test="matches(.,'^GREGEOIS(\w*)$')">GRÉGEOIS<xsl:value-of select="substring-after(.,'GREGEOIS')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^etern(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^etern(\w*)$')">étern<xsl:value-of select="substring-after(.,'etern')"/></xsl:if>
       <xsl:if test="matches(.,'^Etern(\w*)$')">Étern<xsl:value-of select="substring-after(.,'Etern')"/></xsl:if>
       <xsl:if test="matches(.,'^ETERN(\w*)$')">ÉTERN<xsl:value-of select="substring-after(.,'ETERN')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^siecle(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]iecle(\w*)$')"><xsl:value-of select="substring-before(.,'iecle')"/>iècle<xsl:value-of select="substring-after(.,'iecle')"/></xsl:if>
       <xsl:if test="matches(.,'^SIECLE(\w*)$')">SIÈCLE<xsl:value-of select="substring-after(.,'SIECLE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^poulce(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]oulce(\w*)$')"><xsl:value-of select="substring-before(.,'oulce')"/>ouce<xsl:value-of select="substring-after(.,'oulce')"/></xsl:if>
       <xsl:if test="matches(.,'^POULCE(\w*)$')">POUCE<xsl:value-of select="substring-after(.,'POULCE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^fenestre(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]enestre(\w*)$')"><xsl:value-of select="substring-before(.,'enestre')"/>enêtre<xsl:value-of select="substring-after(.,'enestre')"/></xsl:if>
       <xsl:if test="matches(.,'^FENESTRE(\w*)$')">FENÊTRE<xsl:value-of select="substring-after(.,'FENESTRE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^tempeste(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]empeste(\w*)$')"><xsl:value-of select="substring-before(.,'empeste')"/>empête<xsl:value-of select="substring-after(.,'empeste')"/></xsl:if>
       <xsl:if test="matches(.,'^TEMPESTE(\w*)$')">TEMPÊTE<xsl:value-of select="substring-after(.,'TEMPESTE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^depart(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]epart(\w*)$')"><xsl:value-of select="substring-before(.,'epart')"/>épart<xsl:value-of select="substring-after(.,'epart')"/></xsl:if>
       <xsl:if test="matches(.,'^DEPART(\w*)$')">DÉPART<xsl:value-of select="substring-after(.,'DEPART')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^creature(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]reature(\w*)$')"><xsl:value-of select="substring-before(.,'reature')"/>réature<xsl:value-of select="substring-after(.,'reature')"/></xsl:if>
       <xsl:if test="matches(.,'^CREATURE(\w*)$')">CRÉATURE<xsl:value-of select="substring-after(.,'CREATURE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^braz$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]raz$')"><xsl:value-of select="substring-before(.,'raz')"/>ras</xsl:if>
       <xsl:if test="matches(.,'^BRAZ$')">BRAS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^soupper(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]oupper(\w*)$')"><xsl:value-of select="substring-before(.,'oupper')"/>ouper<xsl:value-of select="substring-after(.,'oupper')"/></xsl:if>
       <xsl:if test="matches(.,'^SOUPPER(\w*)$')">SOUPER<xsl:value-of select="substring-after(.,'SOUPPER')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^opposite$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]pposite$')"><xsl:value-of select="substring-before(.,'pposite')"/>opposé</xsl:if>
       <xsl:if test="matches(.,'^OPPOSITE$')">OPPOSÉ</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^facent$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]acent$')"><xsl:value-of select="substring-before(.,'acent')"/>assent</xsl:if>
       <xsl:if test="matches(.,'^FACENT$')">FASSENT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^leger(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]eger(\w*)$')"><xsl:value-of select="substring-before(.,'eger')"/>éger<xsl:value-of select="substring-after(.,'eger')"/></xsl:if>
       <xsl:if test="matches(.,'^LEGER(\w*)$')">LÉGER<xsl:value-of select="substring-after(.,'LEGER')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^eaue$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[eE]aue$')"><xsl:value-of select="substring-before(.,'aue')"/>au</xsl:if>
       <xsl:if test="matches(.,'^EAUE$')">EAU</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^zele(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Zz]ele(\w*)$')"><xsl:value-of select="substring-before(.,'ele')"/>èle<xsl:value-of select="substring-after(.,'ele')"/></xsl:if>
       <xsl:if test="matches(.,'^ZELE(\w*)$')">ZÈLE<xsl:value-of select="substring-after(.,'ZELE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(s|ntr|pl|cr)ainct(\w*)$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^(\w*)(s|ntr|pl|cr|Pl|Cr|S)ainct(\w*)$')"><xsl:value-of select="substring-before(.,'ainct')"/>aint<xsl:value-of select="substring-after(.,'ainct')"/></xsl:if>
    <xsl:if test="matches(.,'^(\w*)(S|NTR|PL|CR)AINCT(\w*)$')"><xsl:value-of select="substring-before(.,'AINCT')"/>AINT<xsl:value-of select="substring-after(.,'AINCT')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^obeyr$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]beyr$')"><xsl:value-of select="substring-before(.,'beyr')"/>béir</xsl:if>
       <xsl:if test="matches(.,'^OBEYR$')">OBÉIR</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^cercher$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ercher$')"><xsl:value-of select="substring-before(.,'ercher')"/>hercher</xsl:if>
       <xsl:if test="matches(.,'^CERCHER$')">CHERCHER</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^renommee(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]enommee(\w*)$')"><xsl:value-of select="substring-before(.,'enommee')"/>enommée<xsl:value-of select="substring-after(.,'enommee')"/></xsl:if>
       <xsl:if test="matches(.,'^RENOMMEE(\w*)$')">RENOMMÉE<xsl:value-of select="substring-after(.,'RENOMMEE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^arrivee(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]rrivee(\w*)$')"><xsl:value-of select="substring-before(.,'rrivee')"/>rrivée<xsl:value-of select="substring-after(.,'rrivee')"/></xsl:if>
       <xsl:if test="matches(.,'^ARRIVEE(\w*)$')">ARRIVÉE<xsl:value-of select="substring-after(.,'ARRIVEE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^requerir$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]equerir$')"><xsl:value-of select="substring-before(.,'equerir')"/>equérir</xsl:if>
       <xsl:if test="matches(.,'^REQUERIR$')">REQUÉRIR</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ceremonie(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]eremonie(\w*)$')"><xsl:value-of select="substring-before(.,'eremonie')"/>érémonie<xsl:value-of select="substring-after(.,'eremonie')"/></xsl:if>
       <xsl:if test="matches(.,'^CEREMONIE(\w*)$')">CÉRÉMONIE<xsl:value-of select="substring-after(.,'CEREMONIE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^fiere(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]iere(\w*)$')"><xsl:value-of select="substring-before(.,'iere')"/>ière<xsl:value-of select="substring-after(.,'iere')"/></xsl:if>
       <xsl:if test="matches(.,'^FIERE(\w*)$')">FIÈRE<xsl:value-of select="substring-after(.,'FIERE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^tetin(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]etin(\w*)$')"><xsl:value-of select="substring-before(.,'etin')"/>étin<xsl:value-of select="substring-after(.,'etin')"/></xsl:if>
       <xsl:if test="matches(.,'^TETIN(\w*)$')">TÉTIN<xsl:value-of select="substring-after(.,'TETIN')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^mons$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ons$')"><xsl:value-of select="substring-before(.,'ons')"/>onts</xsl:if>
       <xsl:if test="matches(.,'^MONS$')">MONTS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^sepulchr(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]epulchr(\w*)$')"><xsl:value-of select="substring-before(.,'epulchr')"/>épulchr<xsl:value-of select="substring-after(.,'epulchr')"/></xsl:if>
       <xsl:if test="matches(.,'^SEPULCHR(\w*)$')">SÉPULCHR<xsl:value-of select="substring-after(.,'SEPULCHR')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^estiez$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^estiez$')">étiez</xsl:if>
       <xsl:if test="matches(.,'^Estiez$')">Étiez</xsl:if>
       <xsl:if test="matches(.,'^ESTIEZ$')">ÉTIEZ</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ancor$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^ancor$')">encore</xsl:if>
       <xsl:if test="matches(.,'^Ancor$')">Encore</xsl:if>
       <xsl:if test="matches(.,'^ANCOR$')">ENCORE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^cuyde$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]uyde$')"><xsl:value-of select="substring-before(.,'uyde')"/>uide</xsl:if>
       <xsl:if test="matches(.,'^CUYDE$')">CUIDE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^prez$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]rez$')"><xsl:value-of select="substring-before(.,'rez')"/>rés</xsl:if>
       <xsl:if test="matches(.,'^PREZ$')">PRÉS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^esbahy(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^esbahy(\w*)$')">ébahi<xsl:value-of select="substring-after(.,'esbahy')"/></xsl:if>
       <xsl:if test="matches(.,'^Esbahy(\w*)$')">Ébahi<xsl:value-of select="substring-after(.,'Esbahy')"/></xsl:if>
       <xsl:if test="matches(.,'^ESBAHY(\w*)$')">ÉBAHI<xsl:value-of select="substring-after(.,'ESBAHY')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^apris$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]pris$')"><xsl:value-of select="substring-before(.,'pris')"/>ppris</xsl:if>
       <xsl:if test="matches(.,'^APRIS$')">APPRIS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^presompt(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]resompt(\w*)$')"><xsl:value-of select="substring-before(.,'resompt')"/>résompt<xsl:value-of select="substring-after(.,'resompt')"/></xsl:if>
       <xsl:if test="matches(.,'^PRESOMPT(\w*)$')">PRÉSOMPT<xsl:value-of select="substring-after(.,'PRESOMPT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^seurs$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]eurs$')"><xsl:value-of select="substring-before(.,'eurs')"/>oeurs</xsl:if>
       <xsl:if test="matches(.,'^SEURS$')">SOEURS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ingenieu(\w*)$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^[Ii]ngenieu(\w*)$')"><xsl:value-of select="substring-before(.,'ngenieu')"/>ngénieu<xsl:value-of select="substring-after(.,'ngenieu')"/></xsl:if>
       <xsl:if test="matches(.,'^INGENIEU(\w*)$')">INGÉNIEU<xsl:value-of select="substring-after(.,'INGENIEU')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^emblem(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]mblem(\w*)$')"><xsl:value-of select="substring-before(.,'mblem')"/>mblèm<xsl:value-of select="substring-after(.,'mblem')"/></xsl:if>
       <xsl:if test="matches(.,'^EMBLEM(\w*)$')">EMBLÈM<xsl:value-of select="substring-after(.,'EMBLEM')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^avient$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]vient$')"><xsl:value-of select="substring-before(.,'vient')"/>dvient</xsl:if>
       <xsl:if test="matches(.,'^AVIENT$')">ADVIENT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^colomne(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]olomne(\w*)$')"><xsl:value-of select="substring-before(.,'olomne')"/>olonne<xsl:value-of select="substring-after(.,'olomne')"/></xsl:if>
       <xsl:if test="matches(.,'^COLOMNE(\w*)$')">COLONNE<xsl:value-of select="substring-after(.,'COLOMNE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^execut(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^execut(\w*)$')">exécut<xsl:value-of select="substring-after(.,'execut')"/></xsl:if>
       <xsl:if test="matches(.,'^Execut(\w*)$')">Exécut<xsl:value-of select="substring-after(.,'Execut')"/></xsl:if>
       <xsl:if test="matches(.,'^EXECUT(\w*)$')">EXÉCUT<xsl:value-of select="substring-after(.,'EXECUT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^peniten(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^peniten(\w*)$')">péniten<xsl:value-of select="substring-after(.,'peniten')"/></xsl:if>
       <xsl:if test="matches(.,'^PENITEN(\w*)$')">PÉNITEN<xsl:value-of select="substring-after(.,'PENITEN')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ecri(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^ecri(\w*)$')">écri<xsl:value-of select="substring-after(.,'ecri')"/></xsl:if>
       <xsl:if test="matches(.,'^ECRI(\w*)$')">ÉCRI<xsl:value-of select="substring-after(.,'ECRI')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^bous$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]ous$')"><xsl:value-of select="substring-before(.,'ous')"/>outs</xsl:if>
       <xsl:if test="matches(.,'^BOUS$')">BOUTS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^greque(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]reque(\w*)$')"><xsl:value-of select="substring-before(.,'reque')"/>recque<xsl:value-of select="substring-after(.,'reque')"/></xsl:if>
       <xsl:if test="matches(.,'^GREQUE(\w*)$')">GRECQUE<xsl:value-of select="substring-after(.,'GREQUE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^defaut(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]efaut(\w*)$')"><xsl:value-of select="substring-before(.,'efaut')"/>éfaut<xsl:value-of select="substring-after(.,'efaut')"/></xsl:if>
       <xsl:if test="matches(.,'^DEFAUT(\w*)$')">DÉFAUT<xsl:value-of select="substring-after(.,'DEFAUT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ditte(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]itte(\w*)$')"><xsl:value-of select="substring-before(.,'itte')"/>ite<xsl:value-of select="substring-after(.,'itte')"/></xsl:if>
       <xsl:if test="matches(.,'^DITTE(\w*)$')">DITE<xsl:value-of select="substring-after(.,'DITTE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^accens$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ccens$')"><xsl:value-of select="substring-before(.,'ccens')"/>ccents</xsl:if>
       <xsl:if test="matches(.,'^ACCENS$')">ACCENTS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^escorc(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^escorc(\w*)$')">écorc<xsl:value-of select="substring-after(.,'escorc')"/></xsl:if>
       <xsl:if test="matches(.,'^Escorc(\w*)$')">Écorc<xsl:value-of select="substring-after(.,'Escorc')"/></xsl:if>
       <xsl:if test="matches(.,'^ESCORC(\w*)$')">ÉCORC<xsl:value-of select="substring-after(.,'ESCORC')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^hayne(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]ayne(\w*)$')"><xsl:value-of select="substring-before(.,'ayne')"/>aine<xsl:value-of select="substring-after(.,'ayne')"/></xsl:if>
       <xsl:if test="matches(.,'^HAYNE(\w*)$')">HAINE<xsl:value-of select="substring-after(.,'HAYNE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^jay(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Jj]ay(\w*)$')"><xsl:value-of select="substring-before(.,'ay')"/>'ai<xsl:value-of select="substring-after(.,'ay')"/></xsl:if>
       <xsl:if test="matches(.,'^JAY(\w*)$')">J'AI<xsl:value-of select="substring-after(.,'JAY')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^deseing(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]eseing(\w*)$')"><xsl:value-of select="substring-before(.,'eseing')"/>essin<xsl:value-of select="substring-after(.,'eseing')"/></xsl:if>
       <xsl:if test="matches(.,'^DESEING(\w*)$')">DESSEIN<xsl:value-of select="substring-after(.,'DESEING')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^umbr(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^umbr(\w*)$')">ombr<xsl:value-of select="substring-after(.,'umbr')"/></xsl:if>
       <xsl:if test="matches(.,'^Umbr(\w*)$')">Ombr<xsl:value-of select="substring-after(.,'Umbr')"/></xsl:if>
       <xsl:if test="matches(.,'^UMBR(\w*)$')">OMBR<xsl:value-of select="substring-after(.,'UMBR')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^pitie(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^pitie(\w*)$')"><xsl:value-of select="substring-before(.,'pitie')"/>pitié<xsl:value-of select="substring-after(.,'pitie')"/></xsl:if>
       <xsl:if test="matches(.,'^PITIE(\w*)$')">PITIÉ<xsl:value-of select="substring-after(.,'PITIE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^region(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]egion(\w*)$')"><xsl:value-of select="substring-before(.,'egion')"/>égion<xsl:value-of select="substring-after(.,'egion')"/></xsl:if>
       <xsl:if test="matches(.,'^REGION(\w*)$')">RÉGION<xsl:value-of select="substring-after(.,'REGION')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^desert(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esert(\w*)$')"><xsl:value-of select="substring-before(.,'esert')"/>ésert<xsl:value-of select="substring-after(.,'esert')"/></xsl:if>
       <xsl:if test="matches(.,'^DESERT(\w*)$')">DÉSERT<xsl:value-of select="substring-after(.,'DESERT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^estoille(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^estoille(\w*)$')">étoile<xsl:value-of select="substring-after(.,'estoille')"/></xsl:if>
       <xsl:if test="matches(.,'^Estoille(\w*)$')">Étoile<xsl:value-of select="substring-after(.,'Estoille')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTOILLE(\w*)$')">ÉSTOILE<xsl:value-of select="substring-after(.,'ESTOILLE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^toille(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]oille(\w*)$')"><xsl:value-of select="substring-before(.,'oille')"/>oile<xsl:value-of select="substring-after(.,'oille')"/></xsl:if>
       <xsl:if test="matches(.,'^TOILLE(\w*)$')">TOILE<xsl:value-of select="substring-after(.,'TOILLE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^evide(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^evide(\w*)$')">évide<xsl:value-of select="substring-after(.,'evide')"/></xsl:if>
       <xsl:if test="matches(.,'^Evide(\w*)$')">Évide<xsl:value-of select="substring-after(.,'Evide')"/></xsl:if>
       <xsl:if test="matches(.,'^EVIDE(\w*)$')">ÉVIDE<xsl:value-of select="substring-after(.,'EVIDE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^Ameriq$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]meriq$')"><xsl:value-of select="substring-before(.,'meriq')"/>mérique</xsl:if>
       <xsl:if test="matches(.,'^AMERIQ$')">AMÉRIQUE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^recit(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]ecit(\w*)$')"><xsl:value-of select="substring-before(.,'ecit')"/>écit<xsl:value-of select="substring-after(.,'ecit')"/></xsl:if>
       <xsl:if test="matches(.,'^RECIT(\w*)$')">RÉCIT<xsl:value-of select="substring-after(.,'RECIT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^moings$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]oings$')"><xsl:value-of select="substring-before(.,'oings')"/>oins</xsl:if>
       <xsl:if test="matches(.,'^MOINGS$')">MOINS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^commant$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ommant$')"><xsl:value-of select="substring-before(.,'ommant')"/>omment</xsl:if>
       <xsl:if test="matches(.,'^COMMANT$')">COMMENT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^denote(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]enote(\w*)$')"><xsl:value-of select="substring-before(.,'enote')"/>énote<xsl:value-of select="substring-after(.,'enote')"/></xsl:if>
       <xsl:if test="matches(.,'^DENOTE(\w*)$')">DÉNOTE<xsl:value-of select="substring-after(.,'DENOTE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^peus$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]eus$')"><xsl:value-of select="substring-before(.,'eus')"/>eux</xsl:if>
       <xsl:if test="matches(.,'^PEUS$')">PEUX</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^heureus$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]eureus$')"><xsl:value-of select="substring-before(.,'eureus')"/>eureux</xsl:if>
       <xsl:if test="matches(.,'^HEUREUS$')">HEUREUX</xsl:if></reg>
            </xsl:when>
           
            <!--CONJUGAISON-->
<xsl:when test="matches(.,'^voyt$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^(v|V)oyt$')"><xsl:value-of select="substring-before(.,'oyt')"/>oit</xsl:if>
    <xsl:if test="matches(.,'^VOYT$')">VOIT</xsl:if></reg>
           </xsl:when>
<xsl:when test="matches(.,'^(\w+)(n|l)oyt$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^(\w+)(n|l)oyt$')"><xsl:value-of select="substring-before(.,'oyt')"/>ait</xsl:if>
    <xsl:if test="matches(.,'^(\w+)(N|L)OYT$')"><xsl:value-of select="substring-before(.,'OYT')"/>AIT</xsl:if></reg>
           </xsl:when>
<xsl:when test="matches(.,'^(\w+)(n|l)oyent$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^(\w+)(n|l)oyent$')"><xsl:value-of select="substring-before(.,'oyent')"/>aient</xsl:if>
    <xsl:if test="matches(.,'^(\w+)(N|L)OYENT$')"><xsl:value-of select="substring-before(.,'OYENT')"/>AIENT</xsl:if></reg>
           </xsl:when>
<xsl:when test="matches(.,'^(\w+)(n|l)oi(t|s)$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^(\w+)(n|l)oi(t|s)$')"><xsl:value-of select="substring-before(.,'oi')"/>ai<xsl:value-of select="substring-after(.,'oi')"/></xsl:if>
    <xsl:if test="matches(.,'^(\w+)(N|L)OI(T|S)$')"><xsl:value-of select="substring-before(.,'OI')"/>AI<xsl:value-of select="substring-after(.,'OI')"/></xsl:if></reg>
           </xsl:when>
<xsl:when test="matches(.,'^(\w+)(n|l)oient$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^(\w+)(n|l)oient$')"><xsl:value-of select="substring-before(.,'oient')"/>aient</xsl:if>
    <xsl:if test="matches(.,'^(\w+)(N|L)OIENT$')"><xsl:value-of select="substring-before(.,'OIENT')"/>AIENT</xsl:if></reg>
           </xsl:when>
<xsl:when test="matches(.,'^(\w+)ploye$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^(\w+)ploye$')"><xsl:value-of select="substring-before(.,'ploye')"/>ploie</xsl:if>
    <xsl:if test="matches(.,'^(\w+)PLOYE$')"><xsl:value-of select="substring-before(.,'PLOYE')"/>PLOIE</xsl:if></reg>
           </xsl:when>
<xsl:when test="matches(.,'^vouloye$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^(v|V)ouloye$')"><xsl:value-of select="substring-before(.,'ouloye')"/>oulais</xsl:if>
    <xsl:if test="matches(.,'^VOULOYE$')"><xsl:value-of select="substring-before(.,'VOULOYE')"/>OULAIS</xsl:if></reg>
           </xsl:when>
<xsl:when test="matches(.,'^ayent$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)yent$')"><xsl:value-of select="substring-before(.,'yent')"/>ient</xsl:if>
       <xsl:if test="matches(.,'^AYENT$')">AIENT</xsl:if></reg>
            </xsl:when>  
<xsl:when test="matches(.,'^(\w*)[^y]eray$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^y]eray$')"><xsl:value-of select="substring-before(.,'eray')"/>erai</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^Y]ERAY$')"><xsl:value-of select="substring-before(.,'ERAY')"/>ERAI</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)yeray$', 'i')"><!--payeray--><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)yeray$')"><xsl:value-of select="substring-before(.,'yeray')"/>ierai</xsl:if>
       <xsl:if test="matches(.,'^(\w+)YERAY$')"><xsl:value-of select="substring-before(.,'YERAY')"/>IERAI</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^appoy$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^(A|a)ppoy$')"><xsl:value-of select="substring-before(.,'ppoy')"/>ppuy<xsl:value-of select="substring-after(.,'ppoy')"/></xsl:if>
         <xsl:if test="matches(.,'^APPOY$')"><xsl:value-of select="substring-before(.,'APPOY')"/>APPUY<xsl:value-of select="substring-after(.,'ppoy')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)tost$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(t|T)ost$')"><xsl:value-of select="substring-before(.,'ost')"/>ôt</xsl:if>
       <xsl:if test="matches(.,'^(\w*)TOST$')"><xsl:value-of select="substring-before(.,'TOST')"/>ÔT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^h?ost[^ir](\w*)$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^[Hh]?ost[^ir](\w*)$')"><xsl:value-of select="substring-before(.,'ost')"/>ôt<xsl:value-of select="substring-after(.,'ost')"/></xsl:if>
         <xsl:if test="matches(.,'^H?OST[^IR](\w*)$')"><xsl:value-of select="substring-before(.,'OST')"/>ÔT<xsl:value-of select="substring-after(.,'OST')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^goust(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(G|g)oust(\w*)$')"><xsl:value-of select="substring-before(.,'oust')"/>oût<xsl:value-of select="substring-after(.,'oust')"/></xsl:if>
       <xsl:if test="matches(.,'^GOUST(\w*)$')">GOÛT<xsl:value-of select="substring-after(.,'GOUST')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^feist$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(f|F)eist$')">ît</xsl:if>
       <xsl:if test="matches(.,'^FEIST$')">FÎT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^feust$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(f|F)eust$')"><xsl:value-of select="substring-before(.,'eust')"/>ut</xsl:if>
       <xsl:if test="matches(.,'^FEUST$')">FUT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^feut$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^(f|F)eut$')"><xsl:value-of select="substring-before(.,'eut')"/>ut</xsl:if>
         <xsl:if test="matches(.,'^FEUT$')">FUT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^afestoit$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)festoit$')"><xsl:value-of select="substring-before(.,'festoit')"/>ffûtait</xsl:if>
       <xsl:if test="matches(.,'^AFESTOIT$')">AFFÛTAIT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^a(p|c)rest(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)(p|c)rest(\w+)$')"><xsl:value-of select="substring-before(.,'rest')"/>rêt<xsl:value-of select="substring-after(.,'rest')"/></xsl:if>
       <xsl:if test="matches(.,'^A(P|C)REST(\w+)$')"><xsl:value-of select="substring-before(.,'REST')"/>RÊT<xsl:value-of select="substring-after(.,'REST')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^batee(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(B|b)atee(\w*)$')"><xsl:value-of select="substring-before(.,'atee')"/>âtée<xsl:value-of select="substring-after(.,'atee')"/></xsl:if>
       <xsl:if test="matches(.,'^BATEE(\w*)$')">BÂTÉE<xsl:value-of select="substring-after(.,'BASTEE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)(l|t)ast$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)(l|t)ast$')"><xsl:value-of select="substring-before(.,'ast')"/>ât</xsl:if>
       <xsl:if test="matches(.,'^(\w+)(L|T)AST$')"><xsl:value-of select="substring-before(.,'AST')"/>ÂT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^basta(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(B|b)asta(\w*)$')"><xsl:value-of select="substring-before(.,'asta')"/>âta<xsl:value-of select="substring-after(.,'asta')"/></xsl:if>
       <xsl:if test="matches(.,'^BASTA(\w*)$')">BÂTA<xsl:value-of select="substring-after(.,'BASTA')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^a?basta(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)?(B|b)asta(\w*)$')"><xsl:value-of select="substring-before(.,'asta')"/>âta<xsl:value-of select="substring-after(.,'asta')"/></xsl:if>
       <xsl:if test="matches(.,'^A?BASTA(\w*)$')"><xsl:value-of select="substring-before(.,'BASTA')"/>BÂTA<xsl:value-of select="substring-after(.,'BASTA')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^baste(\w*)$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^(B|b)aste(\w*)$')"><xsl:value-of select="substring-before(.,'aste')"/>ate<xsl:value-of select="substring-after(.,'aste')"/></xsl:if>
         <xsl:if test="matches(.,'^BASTE(\w*)$')">BATE<xsl:value-of select="substring-after(.,'BASTE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(d|m)ist$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(d|m|D|M)ist$')"><xsl:value-of select="substring-before(.,'ist')"/>it</xsl:if>
       <xsl:if test="matches(.,'^(\w*)(D|M)IST$')"><xsl:value-of select="substring-before(.,'IST')"/>IT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^aisne(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)isne(\w*)$')"><xsl:value-of select="substring-before(.,'isne')"/>iné<xsl:value-of select="substring-after(.,'isne')"/></xsl:if>
       <xsl:if test="matches(.,'^AISNE(\w*)$')">AINÉ<xsl:value-of select="substring-after(.,'AISNE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^asn(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^asn(\w*)$')">ân<xsl:value-of select="substring-after(.,'asn')"/></xsl:if>
       <xsl:if test="matches(.,'^Asn(\w*)$')">Ân<xsl:value-of select="substring-after(.,'Asn')"/></xsl:if>
       <xsl:if test="matches(.,'^ASN(\w*)$')">ÂN<xsl:value-of select="substring-after(.,'ASN')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[(d|ha|u)]isne(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[(d|D|ha|Ha|u)]isne(\w*)$')"><xsl:value-of select="substring-before(.,'isne')"/>îne<xsl:value-of select="substring-after(.,'isne')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)[(D|HA|U)]ISNE(\w*)$')"><xsl:value-of select="substring-before(.,'ISNE')"/>ÎNE<xsl:value-of select="substring-after(.,'ISNE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(d|dor|m)esn(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(d|dor|m|D|Dor|M)esn(\w+)$')"><xsl:value-of select="substring-before(.,'esn')"/>én<xsl:value-of select="substring-after(.,'esn')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(D|DOR|M)ESN(\w+)$')"><xsl:value-of select="substring-before(.,'ESN')"/>ÉN<xsl:value-of select="substring-after(.,'ESN')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(r|ch)esn(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(r|ch|R|CH)esn(\w+)$')"><xsl:value-of select="substring-before(.,'esn')"/>ên<xsl:value-of select="substring-after(.,'esn')"/></xsl:if>
       <xsl:if test="matches(.,'^(R|CH)ESN(\w+)$')"><xsl:value-of select="substring-before(.,'ESN')"/>ÊN<xsl:value-of select="substring-after(.,'ESN')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^vesn(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(V|v)esn(\w*)$')"><xsl:value-of select="substring-before(.,'esn')"/>en<xsl:value-of select="substring-after(.,'esn')"/></xsl:if>
       <xsl:if test="matches(.,'^VESN(\w*)$')">VEN<xsl:value-of select="substring-after(.,'VESN')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^aprint$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)print$')"><xsl:value-of select="substring-before(.,'print')"/>pprît</xsl:if>
       <xsl:if test="matches(.,'^APRINT$')">APPRÎT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)print$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(p|P)rint$')"><xsl:value-of select="substring-before(.,'rint')"/>rît</xsl:if>
       <xsl:if test="matches(.,'^(\w*)PRINT$')"><xsl:value-of select="substring-before(.,'PRINT')"/>RÎT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)prinse$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(p|P)rinse$')"><xsl:value-of select="substring-before(.,'rinse')"/>rise</xsl:if>
       <xsl:if test="matches(.,'^(\w*)PRINSE$')"><xsl:value-of select="substring-before(.,'PRINSE')"/>PRISE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[^(m|prouv|pl)]eurent$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^(m|prouv|pl)]eurent$')"><xsl:value-of select="substring-before(.,'eurent')"/>urent</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^(M|PROUV|PL)]EURENT$')"><xsl:value-of select="substring-before(.,'EURENT')"/>URENT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[^p]leurent$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^p](l|L)eurent$')"><xsl:value-of select="substring-before(.,'eurent')"/>urent</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^p]LEURENT$')"><xsl:value-of select="substring-before(.,'LEURENT')"/>LURENT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(dep)?leurent$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(dep|Dep)?(l|L)eurent$')"><xsl:value-of select="substring-before(.,'eurent')"/>urent</xsl:if>
       <xsl:if test="matches(.,'^(DEP)?LEURENT$')"><xsl:value-of select="substring-before(.,'LEURENT')"/>LURENT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^prouveurent$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(p|P)rouveurent$')"><xsl:value-of select="substring-before(.,'rouveurent')"/>rouvèrent</xsl:if>
       <xsl:if test="matches(.,'^PROUVEURENT$')">PROUVÈRENT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(m|l|[^n]t|r|p)asm(es|ans|oit)$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^(\w*)(m|l|[^n]t|r|p)asm(es|ans|oit)$')"><xsl:value-of select="substring-before(.,'asm')"/>âm<xsl:value-of select="substring-after(.,'asm')"/></xsl:if>
         <xsl:if test="matches(.,'^(\w*)(M|L|[^N]T|R|P)ASM(ES|ANS|OIT)$')"><xsl:value-of select="substring-before(.,'ASM')"/>ÂM<xsl:value-of select="substring-after(.,'ASM')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(tr|m)esme(\w*)$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^(\w*)(tr|m|Tr|M)esme(\w*)$')"><xsl:value-of select="substring-before(.,'esme')"/>ême<xsl:value-of select="substring-after(.,'esme')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(TR|M)ESME(\w*)$')"><xsl:value-of select="substring-before(.,'ESME')"/>ÊME<xsl:value-of select="substring-after(.,'ESME')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(omp|sp|nt|et|es?s|ur|gr|enr|yvr|enfr|char|g)aig[^r](\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(omp|sp|nt|et|es?s|ur|gr|enr|yvr|enfr|char|g|Es?s|ur|Gr|Enr|Yvr|Enfr|Char|G)aig[^r](\w*)$')"><xsl:value-of select="substring-before(.,'aig')"/>ag<xsl:value-of select="substring-after(.,'aig')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(OMP|SP|NT|ET|ES?S|UR|GR|ENR|YVR|ENFR|CHAR|G)AIG[^R](\w*)$')"><xsl:value-of select="substring-before(.,'AIG')"/>AG<xsl:value-of select="substring-after(.,'AIG')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(omp|sp|nt|et|es?s|ur|gr|enr|yvr|enfr|char|g)oig[^r](\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(omp|sp|nt|et|es?s|ur|gr|enr|yvr|enfr|char|g|Es?s|ur|Gr|Enr|Yvr|Enfr|Char|G)oig[^r](\w*)$')"><xsl:value-of select="substring-before(.,'oig')"/>og<xsl:value-of select="substring-after(.,'oig')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)(OMP|SP|NT|ET|ES?S|UR|GR|ENR|YVR|ENFR|CHAR|G)OIG[^R](\w*)$')"><xsl:value-of select="substring-before(.,'OIG')"/>OG<xsl:value-of select="substring-after(.,'OIG')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(esl|p|j)ongn(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(esl|p|j|Esl|P|J)ongn(\w+)$')"><xsl:value-of select="substring-before(.,'ongn')"/>oign<xsl:value-of select="substring-after(.,'ongn')"/></xsl:if>
       <xsl:if test="matches(.,'^(ESL|P|J)ONGN(\w+)$')"><xsl:value-of select="substring-before(.,'ONGN')"/>OIGN<xsl:value-of select="substring-after(.,'ONGN')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[^lpj]ongn(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^lpjPJL]ongn(\w+)$')"><xsl:value-of select="substring-before(.,'ongn')"/>onn<xsl:value-of select="substring-after(.,'ongn')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^LPJ]ONGN(\w+)$')"><xsl:value-of select="substring-before(.,'ONGN')"/>ONN<xsl:value-of select="substring-after(.,'ONGN')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)rengea$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(R|r)engea$')"><xsl:value-of select="substring-before(.,'engea')"/>angea</xsl:if>
       <xsl:if test="matches(.,'^(\w*)RENGEA$')"><xsl:value-of select="substring-before(.,'RENGEA')"/>RANGEA</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)renge(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(R|r)enge(\w*)$')"><xsl:value-of select="substring-before(.,'enge')"/>ange<xsl:value-of select="substring-after(.,'enge')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)RENGE(\w*)$')"><xsl:value-of select="substring-before(.,'RENGE')"/>RANGE<xsl:value-of select="substring-after(.,'RENGE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)veoir$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(V|v)eoir$')"><xsl:value-of select="substring-before(.,'eoir')"/>oir</xsl:if>
       <xsl:if test="matches(.,'^(\w*)VEOIR$')"><xsl:value-of select="substring-before(.,'VEOIR')"/>VOIR</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^veu$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(v|V)eu$')"><xsl:value-of select="substring-before(.,'eu')"/>u</xsl:if>
       <xsl:if test="matches(.,'^VEU$')">VU</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^deu$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(d|D)eu$')"><xsl:value-of select="substring-before(.,'deu')"/>dû</xsl:if>
       <xsl:if test="matches(.,'^DEU$')">DÛ</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^void$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(v|V)oid$')"><xsl:value-of select="substring-before(.,'oid')"/>oit</xsl:if>
       <xsl:if test="matches(.,'^VOID$')">VOIT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)chea$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)chea$')"><xsl:value-of select="substring-before(.,'chea')"/>cha</xsl:if>
       <xsl:if test="matches(.,'^(\w+)CHEA$')"><xsl:value-of select="substring-before(.,'CHEA')"/>CHA</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)chea[ns](\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)chea[ns](\w*)$')"><xsl:value-of select="substring-before(.,'chea')"/>cha<xsl:value-of select="substring-after(.,'chea')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)CHEA[NS](\w*)$')"><xsl:value-of select="substring-before(.,'CHEA')"/>CHA<xsl:value-of select="substring-after(.,'CHEA')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)cea$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)cea$')"><xsl:value-of select="substring-before(.,'cea')"/>ça</xsl:if>
       <xsl:if test="matches(.,'^(\w+)CEA$')"><xsl:value-of select="substring-before(.,'CEA')"/>ÇA</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^achapt(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)chapt(\w+)$')"><xsl:value-of select="substring-before(.,'chapt')"/>chet<xsl:value-of select="substring-after(.,'chapt')"/></xsl:if>
       <xsl:if test="matches(.,'^ACHAPT(\w+)$')">ACHET<xsl:value-of select="substring-after(.,'ACHAPT')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)ipte?s?$', 'i')"><reg type="modernisation">
                <xsl:if test="matches(.,'^(\w+)ipte?s?$')"><xsl:value-of select="substring-before(.,'ipt')"/>it<xsl:value-of select="substring-after(.,'ipt')"/></xsl:if>
                <xsl:if test="matches(.,'^(\w+)IPTE?S?$')"><xsl:value-of select="substring-before(.,'IPT')"/>IT<xsl:value-of select="substring-after(.,'IPT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)epv(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)epv(\w+)$')"><xsl:value-of select="substring-before(.,'epv')"/>ev<xsl:value-of select="substring-after(.,'epv')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)EPV(\w+)$')"><xsl:value-of select="substring-before(.,'EPV')"/>EV<xsl:value-of select="substring-after(.,'EPV')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)izer$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)izer$')"><xsl:value-of select="substring-before(.,'izer')"/>iser</xsl:if>
       <xsl:if test="matches(.,'^(\w+)IZER$')"><xsl:value-of select="substring-before(.,'IZER')"/>ISER</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^astrinct(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)strinct(\w*)$')"><xsl:value-of select="substring-before(.,'strinct')"/>streint<xsl:value-of select="substring-after(.,'strinct')"/></xsl:if>
       <xsl:if test="matches(.,'^ASTRINCT(\w*)$')">ASTREINT<xsl:value-of select="substring-after(.,'STRINCT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^estrainct(\w*)$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^(E|e)strainct(\w*)$')"><xsl:value-of select="substring-before(.,'strainct')"/>treint<xsl:value-of select="substring-after(.,'strainct')"/></xsl:if>
         <xsl:if test="matches(.,'^ESTRAINCT(\w*)$')">ETREINT<xsl:value-of select="substring-after(.,'STRAINCT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^estainct(\w*)$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^(E|e)stainct(\w*)$')"><xsl:value-of select="substring-before(.,'stainct')"/>teint<xsl:value-of select="substring-after(.,'stainct')"/></xsl:if>
         <xsl:if test="matches(.,'^ESTAINCT(\w*)$')">ETEINT<xsl:value-of select="substring-after(.,'STAINCT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(t|p|f|pr|fr|restr|astr)ainct(\w*)$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^(\w*)(t|p|f|pr|fr|restr|astr|Restr|Astr|T|P|F)ainct(\w*)$')"><xsl:value-of select="substring-before(.,'ainct')"/>eint<xsl:value-of select="substring-after(.,'ainct')"/></xsl:if>
         <xsl:if test="matches(.,'^(\w*)(T|P|F|PR|FR|RESTR|ASTR)AINCT(\w*)$')"><xsl:value-of select="substring-before(.,'AINCT')"/>EINT<xsl:value-of select="substring-after(.,'AINCT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^vainct$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(V|v)ainct$')"><xsl:value-of select="substring-before(.,'ainct')"/>ainc</xsl:if>
       <xsl:if test="matches(.,'^VAINCT$')">VAINC</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)hay$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(h|H)ay$')"><xsl:value-of select="substring-before(.,'ay')"/>ais</xsl:if>
       <xsl:if test="matches(.,'^(\w*)HAY$')"><xsl:value-of select="substring-before(.,'HAY')"/>HAIS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)preigne(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(p|P)reigne(\w*)$')"><xsl:value-of select="substring-before(.,'reigne')"/>renne<xsl:value-of select="substring-after(.,'reigne')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)PREIGNE(\w*)$')"><xsl:value-of select="substring-before(.,'PREIGNE')"/>PRENNE<xsl:value-of select="substring-after(.,'PREIGNE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^preignan(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(p|P)reignan(\w*)$')"><xsl:value-of select="substring-before(.,'reignan')"/>régnan<xsl:value-of select="substring-after(.,'reignan')"/></xsl:if>
       <xsl:if test="matches(.,'^PREIGNAN(\w*)$')">PRÉGNAN<xsl:value-of select="substring-after(.,'PREIGNAN')"/></xsl:if></reg>
            </xsl:when>
            
            <!--RACINE-->
<xsl:when test="matches(.,'^faulce(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(F|f)aulce(\w*)$')"><xsl:value-of select="substring-before(.,'aulce')"/>ausse<xsl:value-of select="substring-after(.,'aulce')"/></xsl:if>
       <xsl:if test="matches(.,'^FAULCE(\w*)$')">FAUSSE<xsl:value-of select="substring-after(.,'FAULCE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)aul[ct](\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(A|a)ul[ct](\w*)$')"><xsl:value-of select="substring-before(.,'ul')"/>u<xsl:value-of select="substring-after(.,'ul')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)AUL[CT](\w*)$')"><xsl:value-of select="substring-before(.,'AUL')"/>AU<xsl:value-of select="substring-after(.,'AUL')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)tiltr(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(t|T)iltr(\w+)$')"><xsl:value-of select="substring-before(.,'iltr')"/>itr<xsl:value-of select="substring-after(.,'iltr')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)TILTR(\w+)$')"><xsl:value-of select="substring-before(.,'TILTR')"/>TITR<xsl:value-of select="substring-after(.,'TILTR')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(fe|pe|spo)nce(\w*)$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^(\w*)(fe|pe|spo|Pe)nce(\w*)$')"><xsl:value-of select="substring-before(.,'nce')"/>nse<xsl:value-of select="substring-after(.,'nce')"/></xsl:if>
         <xsl:if test="matches(.,'^(\w*)(FE|PE|SPO)NCE(\w*)$')"><xsl:value-of select="substring-before(.,'NCE')"/>NSE<xsl:value-of select="substring-after(.,'NCE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^[rmdRMD]esp[eor][^c](\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[rmd]esp[eor][^c](\w*)$')"><xsl:value-of select="substring-before(.,'esp')"/>ép<xsl:value-of select="substring-after(.,'esp')"/></xsl:if>
       <xsl:if test="matches(.,'^[RMD]ESP[EOR][^C](\w*)$')"><xsl:value-of select="substring-before(.,'ESP')"/>ÉP<xsl:value-of select="substring-after(.,'ESP')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^desp[il](\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(d|D)esp[il](\w+)$')"><xsl:value-of select="substring-before(.,'esp')"/>ép<xsl:value-of select="substring-after(.,'esp')"/></xsl:if>
       <xsl:if test="matches(.,'^DESP[IL](\w+)$')">DÉP<xsl:value-of select="substring-after(.,'DESP')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^esp[ée]es?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^esp[ée]es?$')">ép<xsl:value-of select="substring-after(.,'esp')"/></xsl:if>
       <xsl:if test="matches(.,'^Esp[ée]es?$')">Ép<xsl:value-of select="substring-after(.,'Esp')"/></xsl:if>
       <xsl:if test="matches(.,'^ESP[ÉE]ES?$')">ÉP<xsl:value-of select="substring-after(.,'ESP')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^esv(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^esv(\w+)$')">év<xsl:value-of select="substring-after(.,'esv')"/></xsl:if>
       <xsl:if test="matches(.,'^Esv(\w+)$')">Év<xsl:value-of select="substring-after(.,'Esv')"/></xsl:if>
       <xsl:if test="matches(.,'^ESV(\w+)$')">ÉV<xsl:value-of select="substring-after(.,'ESV')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^desr(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(d|D)esr(\w+)$')"><xsl:value-of select="substring-before(.,'esr')"/>ér<xsl:value-of select="substring-after(.,'esr')"/></xsl:if>
       <xsl:if test="matches(.,'^DESR(\w+)$')">DÉR<xsl:value-of select="substring-after(.,'DESR')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^souspeçon(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(s|S)ouspeçon(\w*)$')"><xsl:value-of select="substring-before(.,'ouspeçon')"/>oupçon<xsl:value-of select="substring-after(.,'ouspeçon')"/></xsl:if>
       <xsl:if test="matches(.,'^SOUSPEÇON(\w*)$')">SOUPÇON<xsl:value-of select="substring-after(.,'SOUSPEÇON')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^sousp(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(s|S)ousp(\w+)$')"><xsl:value-of select="substring-before(.,'ousp')"/>oup<xsl:value-of select="substring-after(.,'ousp')"/></xsl:if>
       <xsl:if test="matches(.,'^SOUSP(\w+)$')">SOUP<xsl:value-of select="substring-after(.,'SOUSP')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^pluspart$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(p|P)luspart$')"><xsl:value-of select="substring-before(.,'luspart')"/>lupart<xsl:value-of select="substring-after(.,'luspart')"/></xsl:if>
       <xsl:if test="matches(.,'^PLUSPART(\w*)$')">PLUPART</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^d?esl(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(d|D)?esl(\w+)$')"><xsl:value-of select="substring-before(.,'esl')"/>él<xsl:value-of select="substring-after(.,'esl')"/></xsl:if>
       <xsl:if test="matches(.,'^Esl(\w+)$')">Él<xsl:value-of select="substring-after(.,'Esl')"/></xsl:if>
       <xsl:if test="matches(.,'^D?ESL(\w+)$')"><xsl:value-of select="substring-before(.,'ESL')"/>ÉL<xsl:value-of select="substring-after(.,'ESL')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^freslon(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(f|F)reslon(\w+)$')"><xsl:value-of select="substring-before(.,'reslon')"/>relon<xsl:value-of select="substring-after(.,'reslon')"/></xsl:if>
       <xsl:if test="matches(.,'^FRESLON(\w+)$')">FRELON<xsl:value-of select="substring-after(.,'FRESLON')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(m|gr|p|po|fr)esl(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(m|gr|p|M|Gr|P|po|Po|fr|Fr)esl(\w+)$')"><xsl:value-of select="substring-before(.,'esl')"/>êl<xsl:value-of select="substring-after(.,'esl')"/></xsl:if>
       <xsl:if test="matches(.,'^(M|GR|P|PO|FR)ESL(\w+)$')"><xsl:value-of select="substring-before(.,'ESL')"/>ÊL<xsl:value-of select="substring-after(.,'ESL')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(m|gr|p)esl(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(m|gr|p|M|Gr|P)esl(\w+)$')"><xsl:value-of select="substring-before(.,'esl')"/>êl<xsl:value-of select="substring-after(.,'esl')"/></xsl:if>
       <xsl:if test="matches(.,'^(M|GR|P)ESL(\w+)$')"><xsl:value-of select="substring-before(.,'ESL')"/>ÊL<xsl:value-of select="substring-after(.,'ESL')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^aesl(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)esl(\w+)$')"><xsl:value-of select="substring-before(.,'esl')"/>il<xsl:value-of select="substring-after(.,'esl')"/></xsl:if>
       <xsl:if test="matches(.,'^AESL(\w+)$')">AIL<xsl:value-of select="substring-after(.,'AESL')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)bransl(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(b|B)ransl(\w+)$')"><xsl:value-of select="substring-before(.,'ransl')"/>ranl<xsl:value-of select="substring-after(.,'ransl')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)BRANSL(\w+)$')"><xsl:value-of select="substring-before(.,'BRANSL')"/>BRANL<xsl:value-of select="substring-after(.,'BRANSL')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^h?arquebouze(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(h|H)?(a|A)rquebouze(\w*)$')"><xsl:value-of select="substring-before(.,'rquebouze')"/>rquebuse<xsl:value-of select="substring-after(.,'rquebouze')"/></xsl:if>
       <xsl:if test="matches(.,'^H?ARQUEBOUZE(\w*)$')"><xsl:value-of select="substring-before(.,'ARQUEBOUZE')"/>ARQUEBUSE<xsl:value-of select="substring-after(.,'ARQUEBOUZE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)oiay$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)oiay$')"><xsl:value-of select="substring-before(.,'oiay')"/>oyais<xsl:value-of select="substring-after(.,'oiay')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)OIAY$')"><xsl:value-of select="substring-before(.,'OIAY')"/>OYAIS<xsl:value-of select="substring-after(.,'OIAY')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)oia(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(o|O)ia(\w*)$')"><xsl:value-of select="substring-before(.,'ia')"/>ya<xsl:value-of select="substring-after(.,'ia')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OIA(\w*)$')"><xsl:value-of select="substring-before(.,'OIA')"/>OYA<xsl:value-of select="substring-after(.,'OIA')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^poisant(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(p|P)oisant(\w*)$')"><xsl:value-of select="substring-before(.,'oisant')"/>esant<xsl:value-of select="substring-after(.,'oisant')"/></xsl:if>
       <xsl:if test="matches(.,'^POISANT(\w*)$')">PESANT<xsl:value-of select="substring-after(.,'POISANT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^abhom(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)bhom(\w*)$')"><xsl:value-of select="substring-before(.,'bhom')"/>bom<xsl:value-of select="substring-after(.,'bhom')"/></xsl:if>
       <xsl:if test="matches(.,'^ABHOM(\w*)$')">ABOM<xsl:value-of select="substring-after(.,'ABHOM')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)abund(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(a|A)bund(\w*)$')"><xsl:value-of select="substring-before(.,'bund')"/>bond<xsl:value-of select="substring-after(.,'bund')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)ABUND(\w*)$')"><xsl:value-of select="substring-before(.,'ABUND')"/>ABOND<xsl:value-of select="substring-after(.,'ABUND')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^reigl(é|ee|ée|ez|er)(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]eigl(ee|ée|ez|er)(\w*)$')"><xsl:value-of select="substring-before(.,'eigl')"/>régl<xsl:value-of select="substring-after(.,'eigl')"/></xsl:if>
       <xsl:if test="matches(.,'^REIGL(EE|ÉE|EZ|ER)(\w*)$')">RÉGL<xsl:value-of select="substring-after(.,'REIGL')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^dereigl(é|ee|ée|ez|er)(\w*)$', 'i')"><reg type="modernisation">
                <xsl:if test="matches(.,'^[Dd]ereigl(ee|ée|ez|er)(\w*)$')"><xsl:value-of select="substring-before(.,'ereigl')"/>érégl<xsl:value-of select="substring-after(.,'ereigl')"/></xsl:if>
                <xsl:if test="matches(.,'^DEREIGL(EE|ÉE|EZ|ER)(\w*)$')">DÉRÉGL<xsl:value-of select="substring-after(.,'DEREIGL')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^reigl(ement|e)(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(r|R)eigl(ement|e)(\w*)$')"><xsl:value-of select="substring-before(.,'eigl')"/>ègl<xsl:value-of select="substring-after(.,'eigl')"/></xsl:if>
       <xsl:if test="matches(.,'^REIGL(EMENT|E)(\w*)$')">RÈGL<xsl:value-of select="substring-after(.,'REIGL')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^dereigl(ement|e)(\w*)$', 'i')"><reg type="modernisation">
                <xsl:if test="matches(.,'^(r|R)eigl(ement|e)(\w*)$')"><xsl:value-of select="substring-before(.,'eigl')"/>ègl<xsl:value-of select="substring-after(.,'eigl')"/></xsl:if>
                <xsl:if test="matches(.,'^REIGL(EMENT|E)(\w*)$')">RÈGL<xsl:value-of select="substring-after(.,'REIGL')"/></xsl:if></reg>
            </xsl:when>
            
            <!--Double consonne-->
            <xsl:when test="matches(.,'^deffunct(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Dd]effunct(\w*)$')"><xsl:value-of select="substring-before(.,'effunct')"/>éfunt<xsl:value-of select="substring-after(.,'effunct')"/></xsl:if>
                    <xsl:if test="matches(.,'^DEFFUNCT(\w*)$')"><xsl:value-of select="substring-before(.,'DEFFUNCT')"/>DÉFUNCT<xsl:value-of select="substring-after(.,'DEFFUNCT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(de|prou?|re|aultre)ff[aeiou](\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(de|prou?|re|aultre|De|Prou?|Re|Aultre)ff[aeiou](\w*)$')"><xsl:value-of select="substring-before(.,'ff')"/>f<xsl:value-of select="substring-after(.,'ff')"/></xsl:if>
       <xsl:if test="matches(.,'^(DE|PROU?|RE|AULTRE)FF[AEIOU](\w*)$')"><xsl:value-of select="substring-before(.,'FF')"/>F<xsl:value-of select="substring-after(.,'FF')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^affin$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)ffin$')"><xsl:value-of select="substring-before(.,'ffin')"/>fin<xsl:value-of select="substring-after(.,'ffin')"/></xsl:if>
       <xsl:if test="matches(.,'^AFFIN$')">AFIN<xsl:value-of select="substring-after(.,'AFFIN')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^acou(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)cou(\w+)$')"><xsl:value-of select="substring-before(.,'cou')"/>ccou<xsl:value-of select="substring-after(.,'cou')"/></xsl:if>
       <xsl:if test="matches(.,'^ACOU(\w+)$')">ACCOU<xsl:value-of select="substring-after(.,'ACOU')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^acul(\w+)$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^(a|A)cul(\w+)$')"><xsl:value-of select="substring-before(.,'cul')"/>ccul<xsl:value-of select="substring-after(.,'cul')"/></xsl:if>
       <xsl:if test="matches(.,'^ACUL(\w+)$')">ACCUL<xsl:value-of select="substring-after(.,'ACUL')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^admonnest(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)dmonnest(\w+)$')"><xsl:value-of select="substring-before(.,'dmonnest')"/>dmonest<xsl:value-of select="substring-after(.,'dmonnest')"/></xsl:if>
       <xsl:if test="matches(.,'^ADMONNEST(\w+)$')">ADMONEST<xsl:value-of select="substring-after(.,'ADMONNEST')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)aneau(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(a|A)neau(\w*)$')"><xsl:value-of select="substring-before(.,'neau')"/>nneau<xsl:value-of select="substring-after(.,'neau')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)ANEAU(\w*)$')"><xsl:value-of select="substring-before(.,'ANEAU')"/>ANNEAU<xsl:value-of select="substring-after(.,'ANEAU')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)anihil(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(a|A)nihil(\w*)$')"><xsl:value-of select="substring-before(.,'nihil')"/>nnihil<xsl:value-of select="substring-after(.,'nihil')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)ANIHIL(\w*)$')"><xsl:value-of select="substring-before(.,'ANIHIL')"/>ANNIHIL<xsl:value-of select="substring-after(.,'ANIHIL')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^bani(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(b|B)ani(\w*)$')"><xsl:value-of select="substring-before(.,'ani')"/>anni<xsl:value-of select="substring-after(.,'ani')"/></xsl:if>
       <xsl:if test="matches(.,'^BANI(\w*)$')">BANNI<xsl:value-of select="substring-after(.,'BANI')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(en)?rolle(\w*)$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^(En|en)?(R|r)olle(\w*)$')"><xsl:value-of select="substring-before(.,'olle')"/>ôle<xsl:value-of select="substring-after(.,'olle')"/></xsl:if>
       <xsl:if test="matches(.,'^(EN)?ROLLE(\w*)$')"><xsl:value-of select="substring-before(.,'ROLLE')"/>RÔLE<xsl:value-of select="substring-after(.,'ROLLE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)rolle(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)(R|r)olle(\w*)$')"><xsl:value-of select="substring-before(.,'olle')"/>ole<xsl:value-of select="substring-after(.,'olle')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ROLLE(\w*)$')"><xsl:value-of select="substring-before(.,'ROLLE')"/>ROLE<xsl:value-of select="substring-after(.,'ROLLE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^app(ai|erc|erç)(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)pp(ai|erc|erç)(\w+)$')"><xsl:value-of select="substring-before(.,'pp')"/>p<xsl:value-of select="substring-after(.,'pp')"/></xsl:if>
       <xsl:if test="matches(.,'^APP(AI|ERC|ERÇ)(\w+)$')">AP<xsl:value-of select="substring-after(.,'APP')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^trouppe(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(T|t)rouppe(\w*)$')"><xsl:value-of select="substring-before(.,'rouppe')"/>roupe<xsl:value-of select="substring-after(.,'rouppe')"/></xsl:if>
       <xsl:if test="matches(.,'^TROUPPE(\w*)$')">TROUPE<xsl:value-of select="substring-after(.,'TROUPPE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^apren(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)pren(\w+)$')"><xsl:value-of select="substring-before(.,'pren')"/>ppren<xsl:value-of select="substring-after(.,'pren')"/></xsl:if>
       <xsl:if test="matches(.,'^APREN(\w+)$')">APPREN<xsl:value-of select="substring-after(.,'APREN')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^aprins(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)prins(\w*)$')"><xsl:value-of select="substring-before(.,'prins')"/>ppris<xsl:value-of select="substring-after(.,'prins')"/></xsl:if>
       <xsl:if test="matches(.,'^APRINS(\w*)$')">APPRIS<xsl:value-of select="substring-after(.,'APRINS')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)suitte(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(S|s)uitte(\w*)$')"><xsl:value-of select="substring-before(.,'uitte')"/>uite<xsl:value-of select="substring-after(.,'uitte')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)SUITTE(\w*)$')"><xsl:value-of select="substring-before(.,'SUITTE')"/>SUITE<xsl:value-of select="substring-after(.,'SUITTE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^battaill(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(B|b)attaill(\w+)$')"><xsl:value-of select="substring-before(.,'attaill')"/>ataill<xsl:value-of select="substring-after(.,'attaill')"/></xsl:if>
       <xsl:if test="matches(.,'^BATTAILL(\w+)$')">BATAILL<xsl:value-of select="substring-after(.,'BATTAILL')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^recepte(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(R|r)ecepte(\w*)$')"><xsl:value-of select="substring-before(.,'ecepte')"/>ecette<xsl:value-of select="substring-after(.,'ecepte')"/></xsl:if>
       <xsl:if test="matches(.,'^RECEPTE(\w*)$')">RECETTE<xsl:value-of select="substring-after(.,'RECEPTE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)robb(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(R|r)obb(\w+)$')"><xsl:value-of select="substring-before(.,'obb')"/>ob<xsl:value-of select="substring-after(.,'obb')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)ROBB(\w+)$')"><xsl:value-of select="substring-before(.,'ROBB')"/>ROB<xsl:value-of select="substring-after(.,'ROBB')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^abbas?t(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(A|a)bbas?t(\w*)$')"><xsl:value-of select="substring-before(.,'bba')"/>ba<xsl:value-of select="substring-after(.,'bba')"/></xsl:if>
       <xsl:if test="matches(.,'^ABBAS?T(\w*)$')">ABA<xsl:value-of select="substring-after(.,'ABBA')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^as(s|ç)avoir$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^as(s|ç)avoir$')">à savoir</xsl:if>
       <xsl:if test="matches(.,'^As(s|ç)avoir$')">À savoir</xsl:if>
       <xsl:if test="matches(.,'^AS(S|Ç)AVOIR$')">À SAVOIR</xsl:if></reg>
            </xsl:when>
            
            <!--PREFIXE-->
<xsl:when test="matches(.,'^(\w*)ad(jou|va|vent)(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)ad(jou|va|vent)(\w+)$')"><xsl:value-of select="substring-before(.,'ad')"/>a<xsl:value-of select="substring-after(.,'ad')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)Ad(jou|va|vent)(\w+)$')"><xsl:value-of select="substring-before(.,'Ad')"/>A<xsl:value-of select="substring-after(.,'Ad')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)AD(JOU|VA|VENT)(\w+)$')"><xsl:value-of select="substring-before(.,'AD')"/>A<xsl:value-of select="substring-after(.,'AD')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^alaine(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^alaine(\w*)$')"><xsl:value-of select="substring-before(.,'alaine')"/>haleine<xsl:value-of select="substring-after(.,'alaine')"/></xsl:if>
       <xsl:if test="matches(.,'^Alaine(\w*)$')"><xsl:value-of select="substring-before(.,'Alaine')"/>Haleine<xsl:value-of select="substring-after(.,'Alaine')"/></xsl:if>
       <xsl:if test="matches(.,'^ALAINE(\w*)$')">HALEINE<xsl:value-of select="substring-after(.,'ALAINE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^h?arnoys$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(H|h)?(a|A)rnoys$')"><xsl:value-of select="substring-before(.,'rnoys')"/>rnais<xsl:value-of select="substring-after(.,'rnoys')"/></xsl:if>
       <xsl:if test="matches(.,'^H?ARNOYS$')"><xsl:value-of select="substring-before(.,'ARNOYS')"/>ARNAIS<xsl:value-of select="substring-after(.,'ARNOYS')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^amez$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(a|A)mez$')"><xsl:value-of select="substring-before(.,'mez')"/>imés<xsl:value-of select="substring-after(.,'mez')"/></xsl:if>
       <xsl:if test="matches(.,'^AMEZ$')"><xsl:value-of select="substring-before(.,'AMEZ')"/>AIMÉS<xsl:value-of select="substring-after(.,'AMEZ')"/></xsl:if></reg>
            </xsl:when>            
<xsl:when test="matches(.,'^avang(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^avang(\w+)$')">veng<xsl:value-of select="substring-after(.,'avang')"/></xsl:if>
       <xsl:if test="matches(.,'^Avang(\w+)$')">Veng<xsl:value-of select="substring-after(.,'Avang')"/></xsl:if>
       <xsl:if test="matches(.,'^AVANG(\w+)$')">VENG<xsl:value-of select="substring-after(.,'AVANG')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^biens[^aeiou](\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(B|b)iens[^aeiou](\w+)$')"><xsl:value-of select="substring-before(.,'iens')"/>ien<xsl:value-of select="substring-after(.,'iens')"/></xsl:if>
       <xsl:if test="matches(.,'^BIENS[^AEIOU](\w+)$')">BIEN<xsl:value-of select="substring-after(.,'BIENS')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)unz(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)unz(\w+)$')"><xsl:value-of select="substring-before(.,'unz')"/>onz<xsl:value-of select="substring-after(.,'unz')"/></xsl:if>
       <xsl:if test="matches(.,'^Unz(\w+)$')"><xsl:value-of select="substring-before(.,'Unz')"/>Onz<xsl:value-of select="substring-after(.,'Unz')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)UNZ(\w+)$')"><xsl:value-of select="substring-before(.,'UNZ')"/>ONZ<xsl:value-of select="substring-after(.,'UNZ')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^aurei(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^aurei(\w+)$')">orei<xsl:value-of select="substring-after(.,'aurei')"/></xsl:if>
       <xsl:if test="matches(.,'^Aurei(\w+)$')">Orei<xsl:value-of select="substring-after(.,'Aurei')"/></xsl:if>
       <xsl:if test="matches(.,'^AUREI(\w+)$')">OREI<xsl:value-of select="substring-after(.,'AUREI')"/></xsl:if></reg>
            </xsl:when>
            
                <!--conserver cet ordre pour les règles "^tres"-->
<xsl:when test="matches(.,'^tresors?$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^[Tt]resors?$')"><xsl:value-of select="substring-before(.,'resor')"/>résor<xsl:value-of select="substring-after(.,'resor')"/></xsl:if>
    <xsl:if test="matches(.,'^TRESORS?$')">TRÉSOR<xsl:value-of select="substring-after(.,'TRESOR')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^tres(pa|mou|t|bu)(\w+)$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^[Tt]res(pa|mou|t|bu)(\w+)$')"><xsl:value-of select="substring-before(.,'res')"/>ré<xsl:value-of select="substring-after(.,'res')"/></xsl:if>
    <xsl:if test="matches(.,'^TRES(PA|MOU|T|BU)(\w+)$')">TRÉ<xsl:value-of select="substring-after(.,'TRES')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^tressail(\w*)$', 'i')">
                        <xsl:value-of select="."/>
</xsl:when>
<xsl:when test="matches(.,'^tres(\w+)$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^[Tt]res(\w+)$')"><xsl:value-of select="substring-before(.,'res')"/>rès <xsl:value-of select="substring-after(.,'res')"/></xsl:if>
    <xsl:if test="matches(.,'^TRES(\w+)$')">TRÈS <xsl:value-of select="substring-after(.,'TRES')"/></xsl:if></reg>
</xsl:when>
            
            <!--SUFFIXE-->
<xsl:when test="matches(.,'^(\w*)croist$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(c|C)roist$')"><xsl:value-of select="substring-before(.,'roist')"/>roît</xsl:if>
       <xsl:if test="matches(.,'^(\w*)CROIST$')"><xsl:value-of select="substring-before(.,'UNZ')"/>CROÎT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^con?g?noist(\w*)$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^con?g?noist(\w*)$')">connait<xsl:value-of select="substring-after(.,'noist')"/></xsl:if>
         <xsl:if test="matches(.,'^Con?g?noist(\w*)$')">Connait<xsl:value-of select="substring-after(.,'noist')"/></xsl:if>
         <xsl:if test="matches(.,'^CON?G?NOIST(\w*)$')">CONNAIT<xsl:value-of select="substring-after(.,'NOIST')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^recon?g?noist(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^recon?g?noist(\w*)$')">reconnait<xsl:value-of select="substring-after(.,'noist')"/></xsl:if>
       <xsl:if test="matches(.,'^Recon?g?noist(\w*)$')">Reconnait<xsl:value-of select="substring-after(.,'noist')"/></xsl:if>
       <xsl:if test="matches(.,'^RECON?G?NOIST(\w*)$')">RECONNAIT<xsl:value-of select="substring-after(.,'NOIST')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)[^(en)]oist$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^(en)]oist$')"><xsl:value-of select="substring-before(.,'oist')"/>ait</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^(EN)]OIST$')"><xsl:value-of select="substring-before(.,'OIST')"/>AIT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[lnctombaueiv][lbaiou]z$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^(\w*)[lnctombLNCTOMBaueivAUEIV][lbaiou]z$')"><xsl:value-of select="substring-before(.,'z')"/>s</xsl:if>
         <xsl:if test="matches(.,'^(\w*)[LNCTOMBAUEIV][LBAIOU]Z$')"><xsl:value-of select="substring-before(.,'Z')"/>S</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[lnctmbaueivg]tz$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[lnctmbLNCTMBaueivAUEIVgG]tz$')"><xsl:value-of select="substring-before(.,'tz')"/>ts</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[LNCTMBAUEIVG]TZ$')"><xsl:value-of select="substring-before(.,'TZ')"/>TS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)otz$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)otz$')"><xsl:value-of select="substring-before(.,'otz')"/>ots</xsl:if>
       <xsl:if test="matches(.,'^(\w+)OTZ$')"><xsl:value-of select="substring-before(.,'OTZ')"/>OTS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)aize(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Aa]ize(\w*)$')"><xsl:value-of select="substring-before(.,'ize')"/>ise<xsl:value-of select="substring-after(.,'ize')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)AIZE(\w*)$')"><xsl:value-of select="substring-before(.,'AIZE')"/>AISE<xsl:value-of select="substring-after(.,'AIZE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^fauce(\w*)$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^[Ff]auce(\w*)$')"><xsl:value-of select="substring-before(.,'auce')"/>ausse<xsl:value-of select="substring-after(.,'auce')"/></xsl:if>
       <xsl:if test="matches(.,'^FAUCE(\w*)$')">FAUSSE<xsl:value-of select="substring-after(.,'FAUCE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)mens$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)mens$')"><xsl:value-of select="substring-before(.,'mens')"/>ments</xsl:if>
       <xsl:if test="matches(.,'^(\w+)MENS$')"><xsl:value-of select="substring-before(.,'MENS')"/>MENTS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)ndens$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ndens$')"><xsl:value-of select="substring-before(.,'ndens')"/>ndent</xsl:if>
       <xsl:if test="matches(.,'^(\w+)NDENS$')"><xsl:value-of select="substring-before(.,'NDENS')"/>NDENT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^dedens$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]edens$')"><xsl:value-of select="substring-before(.,'edens')"/>edans</xsl:if>
       <xsl:if test="matches(.,'^DEDENS$')">DEDANS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)dens$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Dd]ens$')"><xsl:value-of select="substring-before(.,'ens')"/>ents</xsl:if>
       <xsl:if test="matches(.,'^(\w*)DENS$')"><xsl:value-of select="substring-before(.,'DENS')"/>DENTS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(ent|pr)ens$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(ent|pr|Pr|Ent)ens$')"><xsl:value-of select="substring-before(.,'ens')"/>ends</xsl:if>
       <xsl:if test="matches(.,'^(\w*)(ENT|PR)ENS$')"><xsl:value-of select="substring-before(.,'DENS')"/>ENDS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^cens$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[cC]ens$')"><xsl:value-of select="substring-before(.,'ens')"/>ent</xsl:if>
       <xsl:if test="matches(.,'^CENS$')">CENT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^blans$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[bB]lans$')"><xsl:value-of select="substring-before(.,'lans')"/>lancs</xsl:if>
       <xsl:if test="matches(.,'^BLANS$')">BLANCS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^avans$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]vans$')"><xsl:value-of select="substring-before(.,'vans')"/>vant</xsl:if>
       <xsl:if test="matches(.,'^AVANS$')">AVANT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^marchans$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[mM]archans$')"><xsl:value-of select="substring-before(.,'archans')"/>archands</xsl:if>
       <xsl:if test="matches(.,'^MARCHANS$')">MARCHANDS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^grans$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[gG]rans$')"><xsl:value-of select="substring-before(.,'rans')"/>rands</xsl:if>
       <xsl:if test="matches(.,'^GRANS$')">GRANDS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^gran$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^[gG]ran$')"><xsl:value-of select="substring-before(.,'ran')"/>rand</xsl:if>
         <xsl:if test="matches(.,'^GRAN$')">GRAND</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(est|ast|gu|ou|rt|ot|nt|uss|ach|cqu|lt|mb|bl|oy|ç|fit|aut)ans$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^(\w*)(est|ast|gu|ou|rt|ot|nt|uss|ach|cqu|lt|mb|bl|oy|ç|fit|Est|aut|Aut)ans$')"><xsl:value-of select="substring-before(.,'ans')"/>ant</xsl:if>
       <xsl:if test="matches(.,'^(\w*)(EST|AST|GU|OU|RT|OT|NT|USS|ACH|CQU|LT|MB|BL|OY|Ç|FIT|AUT)ANS$')"><xsl:value-of select="substring-before(.,'ANS')"/>ANT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(enf|it|ist|bat|sav|am|ip|nqu)ans$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(enf|it|ist|bat|sav|am|ip|nqu|Enf|Sav|Am)ans$')"><xsl:value-of select="substring-before(.,'ans')"/>ants</xsl:if>
       <xsl:if test="matches(.,'^(\w*)(ENF|IT|IST|BAT|SAV|AM|IP|NQU)ANS$')"><xsl:value-of select="substring-before(.,'ANS')"/>ANTS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)(adhe|ffe)rens$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(adhe|ffe|Adhe)rens$')"><xsl:value-of select="substring-before(.,'rens')"/>rents</xsl:if>
       <xsl:if test="matches(.,'^(\w*)(ADHE|FFE)RENS$')"><xsl:value-of select="substring-before(.,'ANS')"/>RENTS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^gents$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[gG]ents$')"><xsl:value-of select="substring-before(.,'ents')"/>ens</xsl:if>
       <xsl:if test="matches(.,'^GENTS$')">GENS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)icque(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)icque(\w*)$')"><xsl:value-of select="substring-before(.,'icque')"/>ique<xsl:value-of select="substring-after(.,'icque')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ICQUE(\w*)$')"><xsl:value-of select="substring-before(.,'ICQUE')"/>IQUE<xsl:value-of select="substring-after(.,'ICQUE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)(ve|on)cques?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)(ve|on)cques?$')"><xsl:value-of select="substring-before(.,'cque')"/>c</xsl:if>
       <xsl:if test="matches(.,'^(\w+)(VE|ON)CQUES?$')"><xsl:value-of select="substring-before(.,'CQUE')"/>C</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)ancque(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ancque(\w*)$')"><xsl:value-of select="substring-before(.,'ancque')"/>anque<xsl:value-of select="substring-after(.,'ancque')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ANCQUE(\w*)$')"><xsl:value-of select="substring-before(.,'ANCQUE')"/>ANQUE<xsl:value-of select="substring-after(.,'ANCQUE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^a(ve|don)cq$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[A|a](ve|don)cq$')"><xsl:value-of select="substring-before(.,'cq')"/>c</xsl:if>
       <xsl:if test="matches(.,'^A(VE|DON)CQ$')"><xsl:value-of select="substring-before(.,'CQ')"/>C</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^dictant$', 'i')">
    <xsl:if test="matches(.,'^(d|D)ictant$')"><xsl:value-of select="substring-before(.,'ictant')"/>ictant</xsl:if>
    <xsl:if test="matches(.,'^DICTANT$')"><xsl:value-of select="substring-before(.,'DICTANT')"/>DICTANT</xsl:if>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)[^vft]in?ct(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^vft]in?ct(\w*)$')"><xsl:value-of select="substring-before(.,'ct')"/>t<xsl:value-of select="substring-after(.,'ct')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^VFT]IN?CT(\w*)$')"><xsl:value-of select="substring-before(.,'CT')"/>T<xsl:value-of select="substring-after(.,'CT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^dequoy$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(d|D)equoy$')"><xsl:value-of select="substring-before(.,'equoy')"/>e quoi</xsl:if>
       <xsl:if test="matches(.,'^DEQUOY$')"><xsl:value-of select="substring-before(.,'DEQUOY')"/>DE QUOI</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)quoy$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)(q|Q)uoy$')"><xsl:value-of select="substring-before(.,'uoy')"/>uoi</xsl:if>
       <xsl:if test="matches(.,'^(\w*)QUOY$')"><xsl:value-of select="substring-before(.,'QUOY')"/>QUOI</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^agui(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]gui(\w*)$')"><xsl:value-of select="substring-before(.,'gui')"/>igui<xsl:value-of select="substring-after(.,'gui')"/></xsl:if>
       <xsl:if test="matches(.,'^AGUI(\w*)$')">AIGUI<xsl:value-of select="substring-after(.,'AGUI')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^aguy(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]guy(\w*)$')"><xsl:value-of select="substring-before(.,'guy')"/>igui<xsl:value-of select="substring-after(.,'guy')"/></xsl:if>
       <xsl:if test="matches(.,'^AGUY(\w*)$')">AIGUI<xsl:value-of select="substring-after(.,'AGUY')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ague?s?$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^[aA]gue?s?$')"><xsl:value-of select="substring-before(.,'gu')"/>igu<xsl:value-of select="substring-after(.,'gu')"/></xsl:if>
       <xsl:if test="matches(.,'^AGUE?S?$')">AIGU<xsl:value-of select="substring-after(.,'AGU')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)[^p]oing$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^p]oing$')"><xsl:value-of select="substring-before(.,'oing')"/>oin</xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^P]OING$')"><xsl:value-of select="substring-before(.,'OING')"/>OIN</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)ulx$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ulx$')"><xsl:value-of select="substring-before(.,'ulx')"/>ux</xsl:if>
       <xsl:if test="matches(.,'^(\w+)ULX$')"><xsl:value-of select="substring-before(.,'ULX')"/>UX</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^loix$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]oix$')"><xsl:value-of select="substring-before(.,'oix')"/>ois</xsl:if>
       <xsl:if test="matches(.,'^LOIX$')">LOIS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)aulme(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)aulme(\w*)$')"><xsl:value-of select="substring-before(.,'aulme')"/>aume<xsl:value-of select="substring-after(.,'aulme')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)AULME(\w*)$')"><xsl:value-of select="substring-before(.,'AULME')"/>AUME<xsl:value-of select="substring-after(.,'AULME')"/></xsl:if></reg>
            </xsl:when>
            <!--Mots fréquents-->
<xsl:when test="matches(.,'^(\w*)oynes?(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Oo]ynes?(\w*)$')"><xsl:value-of select="substring-before(.,'yne')"/>ine<xsl:value-of select="substring-after(.,'yne')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OYNES?(\w*)$')"><xsl:value-of select="substring-before(.,'OYNE')"/>OINE<xsl:value-of select="substring-after(.,'OYNE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)oyres?(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Oo]yres?(\w*)$')"><xsl:value-of select="substring-before(.,'yre')"/>ire<xsl:value-of select="substring-after(.,'yre')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OYRES?(\w*)$')"><xsl:value-of select="substring-before(.,'OYRE')"/>OIRE<xsl:value-of select="substring-after(.,'OYRE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)oyzes?(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Oo]yzes?(\w*)$')"><xsl:value-of select="substring-before(.,'yze')"/>ise<xsl:value-of select="substring-after(.,'yze')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OYZES?(\w*)$')"><xsl:value-of select="substring-before(.,'OYZE')"/>OISE<xsl:value-of select="substring-after(.,'OYZE')"/></xsl:if></reg>
            </xsl:when>
            <!--y => i-->
<xsl:when test="matches(.,'^i?(ce)?luy$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[iI]?(ce|Ce)?[lL]uy$')"><xsl:value-of select="substring-before(.,'uy')"/>ui</xsl:if>
       <xsl:if test="matches(.,'^I?(CE)?LUY$')"><xsl:value-of select="substring-before(.,'LUY')"/>UI</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^i?celluy$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[iI]?(c|C)elluy$')"><xsl:value-of select="substring-before(.,'elluy')"/>elui</xsl:if>
       <xsl:if test="matches(.,'^I?CELLUY$')"><xsl:value-of select="substring-before(.,'CELLUY')"/>CELUI</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ayt?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]yt?$')"><xsl:value-of select="substring-before(.,'y')"/>i<xsl:value-of select="substring-after(.,'y')"/></xsl:if>
       <xsl:if test="matches(.,'^AYT?$')"><xsl:value-of select="substring-before(.,'AY')"/>AI<xsl:value-of select="substring-after(.,'Y')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ny$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^ny$')">ni</xsl:if>
         <xsl:if test="matches(.,'^Ny$')">Ni</xsl:if>
       <xsl:if test="matches(.,'^NY$')">NI</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(ain|aus)?sy$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(Ain|Aus|ain|aus)?[sS]y$')"><xsl:value-of select="substring-before(.,'y')"/>i</xsl:if>
       <xsl:if test="matches(.,'^(AIN|AUS)?SY$')"><xsl:value-of select="substring-before(.,'SY')"/>SI</xsl:if></reg>
            </xsl:when>      
<xsl:when test="matches(.,'^i?cy$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[iI]?(c|C)y$')"><xsl:value-of select="substring-before(.,'y')"/>i</xsl:if>
       <xsl:if test="matches(.,'^I?CY$')"><xsl:value-of select="substring-before(.,'CY')"/>CI</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^huy$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]uy$')"><xsl:value-of select="substring-before(.,'uy')"/>ui</xsl:if>
       <xsl:if test="matches(.,'^HUY$')">HUI</xsl:if></reg>
            </xsl:when>     
<xsl:when test="matches(.,'^(\w*)[^m][aeiouy]rty(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[^m][aeiouy]rty(\w*)$')"><xsl:value-of select="substring-before(.,'rty')"/>rti<xsl:value-of select="substring-after(.,'rty')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)[^M][AEIOUY]RTY(\w*)$')"><xsl:value-of select="substring-before(.,'RTY')"/>RTI<xsl:value-of select="substring-after(.,'RTY')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)chym(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Cc]hym(\w*)$')"><xsl:value-of select="substring-before(.,'hym')"/>him<xsl:value-of select="substring-after(.,'hym')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)CHYM(\w*)$')"><xsl:value-of select="substring-before(.,'CHYM')"/>CHIM<xsl:value-of select="substring-after(.,'CHYM')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^amy(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]my(\w*)$')"><xsl:value-of select="substring-before(.,'my')"/>mi<xsl:value-of select="substring-after(.,'my')"/></xsl:if>
       <xsl:if test="matches(.,'^AMY(\w*)$')">AMI<xsl:value-of select="substring-after(.,'AMY')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^h?aza(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]?[Aa]za(\w*)$')"><xsl:value-of select="substring-before(.,'za')"/>sa<xsl:value-of select="substring-after(.,'za')"/></xsl:if>
       <xsl:if test="matches(.,'^H?AZA(\w*)$')"><xsl:value-of select="substring-before(.,'AZA')"/>ASA<xsl:value-of select="substring-after(.,'AZA')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)eryes?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)eryes?$')"><xsl:value-of select="substring-before(.,'erye')"/>erie<xsl:value-of select="substring-after(.,'erie')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ERYES?$')"><xsl:value-of select="substring-before(.,'ERYE')"/>ERIE<xsl:value-of select="substring-after(.,'ERYE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^huyt(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]uyt(\w*)$')"><xsl:value-of select="substring-before(.,'uyt')"/>uit<xsl:value-of select="substring-after(.,'uyt')"/></xsl:if>
       <xsl:if test="matches(.,'^HUYT(\w*)$')">HUIT<xsl:value-of select="substring-after(.,'HUYT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^parmy$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[pP]army$')"><xsl:value-of select="substring-before(.,'army')"/>armi</xsl:if>
       <xsl:if test="matches(.,'^PARMY$')">PARMI</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^vray(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]ray(\w*)$')"><xsl:value-of select="substring-before(.,'ray')"/>rai<xsl:value-of select="substring-after(.,'ray')"/></xsl:if>
       <xsl:if test="matches(.,'^VRAY(\w*)$')">VRAI<xsl:value-of select="substring-after(.,'VRAY')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^voyla$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]oyla$')"><xsl:value-of select="substring-before(.,'oyla')"/>oilà</xsl:if>
       <xsl:if test="matches(.,'^VOYLA$')">VOILÀ</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)mercy(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Mm]ercy(\w*)$')"><xsl:value-of select="substring-before(.,'ercy')"/>erci<xsl:value-of select="substring-after(.,'ercy')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)MERCY(\w*)$')"><xsl:value-of select="substring-before(.,'MERCY')"/>MERCI<xsl:value-of select="substring-after(.,'MERCY')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^dy$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]y$')"><xsl:value-of select="substring-before(.,'y')"/>is</xsl:if>
       <xsl:if test="matches(.,'^DY$')">DIS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)ouyss(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)ouyss(\w+)$')"><xsl:value-of select="substring-before(.,'ouyss')"/>ouiss<xsl:value-of select="substring-after(.,'ouyss')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OUYSS(\w+)$')"><xsl:value-of select="substring-before(.,'OUYSS')"/>OUISS<xsl:value-of select="substring-after(.,'OUYSS')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^demy$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]emy$')"><xsl:value-of select="substring-before(.,'emy')"/>emi</xsl:if>
       <xsl:if test="matches(.,'^DEMY$')">DEMI</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^failly$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[fF]ailly$')"><xsl:value-of select="substring-before(.,'ailly')"/>ailli</xsl:if>
       <xsl:if test="matches(.,'^FAILLY$')">FAILLI</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^essays?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]ssays?$')"><xsl:value-of select="substring-before(.,'ssay')"/>ssai<xsl:value-of select="substring-after(.,'ssay')"/></xsl:if>
       <xsl:if test="matches(.,'^ESSAYS?$')">ESSAI<xsl:value-of select="substring-after(.,'ESSAY')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^hyver(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]yver(\w*)$')"><xsl:value-of select="substring-before(.,'yver')"/>iver<xsl:value-of select="substring-after(.,'yver')"/></xsl:if>
       <xsl:if test="matches(.,'^HYVER(\w*)$')">HIVER<xsl:value-of select="substring-after(.,'HYVER')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^estably(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^estably(\w*)$')"><xsl:value-of select="substring-before(.,'estably')"/>établi<xsl:value-of select="substring-after(.,'estably')"/></xsl:if>
       <xsl:if test="matches(.,'^Estably(\w*)$')"><xsl:value-of select="substring-before(.,'Estably')"/>Établi<xsl:value-of select="substring-after(.,'Estably')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTABLY(\w*)$')">ÉTABLI<xsl:value-of select="substring-after(.,'ESTABLY')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)fuyr(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Ff]uyr(\w*)$')"><xsl:value-of select="substring-before(.,'uyr')"/>uir<xsl:value-of select="substring-after(.,'uyr')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)FUYR(\w*)$')"><xsl:value-of select="substring-before(.,'FUYR')"/>FUIR<xsl:value-of select="substring-after(.,'FUYR')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)finy(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Ff]iny(\w*)$')"><xsl:value-of select="substring-before(.,'iny')"/>ini<xsl:value-of select="substring-after(.,'iny')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)FINY(\w*)$')"><xsl:value-of select="substring-before(.,'FINY')"/>FINI<xsl:value-of select="substring-after(.,'FINY')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ouy$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]uy$')"><xsl:value-of select="substring-before(.,'uy')"/>ui</xsl:if>
       <xsl:if test="matches(.,'^OUY$')">OUI</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^boy$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]oy$')"><xsl:value-of select="substring-before(.,'oy')"/>ois</xsl:if>
                    <xsl:if test="matches(.,'^BOY$')">BOIS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)oy[es]?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)oy[es]?$')"><xsl:value-of select="substring-before(.,'oy')"/>oi<xsl:value-of select="substring-after(.,'oy')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)Oy[es]?$')"><xsl:value-of select="substring-before(.,'Oy')"/>Oi<xsl:value-of select="substring-after(.,'Oy')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)OY[ES]?$')"><xsl:value-of select="substring-before(.,'OY')"/>OI<xsl:value-of select="substring-after(.,'OY')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)suyv(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Ss]uyv(\w*)$')"><xsl:value-of select="substring-before(.,'uyv')"/>uiv<xsl:value-of select="substring-after(.,'uyv')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)SUYV(\w*)$')"><xsl:value-of select="substring-before(.,'SUYV')"/>SUIV<xsl:value-of select="substring-after(.,'SUYV')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ay[md](\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]y[md](\w+)$')"><xsl:value-of select="substring-before(.,'y')"/>i<xsl:value-of select="substring-after(.,'y')"/></xsl:if>
       <xsl:if test="matches(.,'^AY[MD](\w+)$')">AI<xsl:value-of select="substring-after(.,'AY')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)[hu]th[oe](\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)[hu]th[oe](\w*)$')"><xsl:value-of select="substring-before(.,'th')"/>t<xsl:value-of select="substring-after(.,'th')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)[HU]TH[OE](\w*)$')"><xsl:value-of select="substring-before(.,'TH')"/>TSUIV<xsl:value-of select="substring-after(.,'TH')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^sceu(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[sS]ceu(\w*)$')"><xsl:value-of select="substring-before(.,'ceu')"/>u<xsl:value-of select="substring-after(.,'ceu')"/></xsl:if>
       <xsl:if test="matches(.,'^SCEU(\w*)$')">SU<xsl:value-of select="substring-after(.,'SCEU')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^asseu(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]sseu(\w+)$')"><xsl:value-of select="substring-before(.,'sseu')"/>ssu<xsl:value-of select="substring-after(.,'sseu')"/></xsl:if>
       <xsl:if test="matches(.,'^ASSEU(\w+)$')">ASSU<xsl:value-of select="substring-after(.,'ASSEU')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)cheute(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Cc]heute(\w*)$')"><xsl:value-of select="substring-before(.,'heute')"/>hute<xsl:value-of select="substring-after(.,'heute')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)CHEUTE(\w*)$')"><xsl:value-of select="substring-before(.,'CHEUTE')"/>CHUTE<xsl:value-of select="substring-after(.,'CHEUTE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)oub[dts](\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)oub[dts](\w*)$')"><xsl:value-of select="substring-before(.,'oub')"/>ou<xsl:value-of select="substring-after(.,'oub')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)OUB[DTS](\w*)$')"><xsl:value-of select="substring-before(.,'OUB')"/>OU<xsl:value-of select="substring-after(.,'OUB')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(^dem)on?str(\w+)$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^(^[Dd]em)on?str(\w*)$')"><xsl:value-of select="substring-before(.,'str')"/>tr<xsl:value-of select="substring-after(.,'str')"/></xsl:if>
         <xsl:if test="matches(.,'^(^DEM)ON?STR(\w*)$')"><xsl:value-of select="substring-before(.,'STR')"/>TR<xsl:value-of select="substring-after(.,'STR')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w*)eust$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)eust$')"><xsl:value-of select="substring-before(.,'eust')"/>eut<xsl:value-of select="substring-after(.,'eust')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)EUST$')"><xsl:value-of select="substring-before(.,'EUST')"/>EUT<xsl:value-of select="substring-after(.,'EUST')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)[ao]istr(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)[ao]istr(\w*)$')"><xsl:value-of select="substring-before(.,'istr')"/>îtr<xsl:value-of select="substring-after(.,'istr')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)[AO]ISTR(\w*)$')"><xsl:value-of select="substring-before(.,'ISTR')"/>ÎTR<xsl:value-of select="substring-after(.,'ISTR')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ancestre(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ncestre(\w*)$')"><xsl:value-of select="substring-before(.,'ncestre')"/>ncêtre<xsl:value-of select="substring-after(.,'ncestre')"/></xsl:if>
       <xsl:if test="matches(.,'^ANCESTRE(\w*)$')">ANCÊTRE<xsl:value-of select="substring-after(.,'ANCESTRE')"/></xsl:if></reg>
</xsl:when>
            <xsl:when test="matches(.,'^estez$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^estez$')">êtes</xsl:if>
                    <xsl:if test="matches(.,'^Estez$')">Êtes</xsl:if>
                    <xsl:if test="matches(.,'^ESTEZ(\w*)$')">ÊTES</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^est[raueo](\w*)$', 'i')"><reg type="modernisation">
        <xsl:if test="matches(.,'^est[raueo](\w*)$')">ét<xsl:value-of select="substring-after(.,'est')"/></xsl:if>
        <xsl:if test="matches(.,'^Est[raueo](\w*)$')">Ét<xsl:value-of select="substring-after(.,'Est')"/></xsl:if>
        <xsl:if test="matches(.,'^EST[RAUEO](\w*)$')">ÉT<xsl:value-of select="substring-after(.,'EST')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^mest(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]est(\w*)$')"><xsl:value-of select="substring-before(.,'est')"/>ét<xsl:value-of select="substring-after(.,'est')"/></xsl:if>
       <xsl:if test="matches(.,'^MEST(\w*)$')">MÉT<xsl:value-of select="substring-after(.,'MEST')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^arbalest(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]rbalest(\w*)$')"><xsl:value-of select="substring-before(.,'rbalest')"/>rbalèt<xsl:value-of select="substring-after(.,'rbalest')"/></xsl:if>
       <xsl:if test="matches(.,'^ARBALEST(\w*)$')">ARBALÈT<xsl:value-of select="substring-after(.,'ARBALEST')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^ancestre(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ncestre(\w*)$')"><xsl:value-of select="substring-before(.,'ncestre')"/>ncêtre<xsl:value-of select="substring-after(.,'ncestre')"/></xsl:if>
       <xsl:if test="matches(.,'^ANCESTRE(\w*)$')">ANCÊTRE<xsl:value-of select="substring-after(.,'ANCESTRE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^assubjectir$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ssubjectir$')"><xsl:value-of select="substring-before(.,'ssubjectir')"/>ssujettir</xsl:if>
       <xsl:if test="matches(.,'^ASSUBJECTIR$')">ASSUJETTIR</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(\w+)ergier$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ergier$')"><xsl:value-of select="substring-before(.,'ergier')"/>erger<xsl:value-of select="substring-after(.,'ergier')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ERGIER$')"><xsl:value-of select="substring-before(.,'ERGIER')"/>ERGER<xsl:value-of select="substring-after(.,'ERGIER')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^tousjours$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[tT]ousjours$')"><xsl:value-of select="substring-before(.,'ousjours')"/>oujours</xsl:if>
       <xsl:if test="matches(.,'^TOUSJOURS$')">TOUJOURS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^desja$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esja$')"><xsl:value-of select="substring-before(.,'esja')"/>éjà</xsl:if>
       <xsl:if test="matches(.,'^DESJA$')">DÉJÀ</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^su[zs]$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]u[zs]$')"><xsl:value-of select="substring-before(.,'u')"/>ur</xsl:if>
       <xsl:if test="matches(.,'^SU[ZS]$')">SUR</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^chascun(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]hascun(\w*)$')"><xsl:value-of select="substring-before(.,'hascun')"/>hacun<xsl:value-of select="substring-after(.,'hascun')"/></xsl:if>
       <xsl:if test="matches(.,'^CHASCUN(\w*)$')">CHACUN<xsl:value-of select="substring-after(.,'CHASCUN')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^chasque(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]hasque(\w*)$')"><xsl:value-of select="substring-before(.,'hasque')"/>haque<xsl:value-of select="substring-after(.,'hascun')"/></xsl:if>
       <xsl:if test="matches(.,'^CHASQUE(\w*)$')">CHAQUE<xsl:value-of select="substring-after(.,'CHASQUE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^pendent$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]endent$')"><xsl:value-of select="substring-before(.,'endent')"/>endant</xsl:if>
       <xsl:if test="matches(.,'^PENDENT$')">PENDANT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^scavoir$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]cavoir$')"><xsl:value-of select="substring-before(.,'cavoir')"/>avoir</xsl:if>
       <xsl:if test="matches(.,'^SCAVOIR$')">SAVOIR</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^sçav(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]çav(\w*)$')"><xsl:value-of select="substring-before(.,'çav')"/>av<xsl:value-of select="substring-after(.,'çav')"/></xsl:if>
       <xsl:if test="matches(.,'^SÇAV(\w*)$')">SAV<xsl:value-of select="substring-after(.,'SÇAV')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^sçait$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]çait$')"><xsl:value-of select="substring-before(.,'çait')"/>ait</xsl:if>
       <xsl:if test="matches(.,'^SÇAIT$')">SAIT</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^encores$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]ncores$')"><xsl:value-of select="substring-before(.,'ncores')"/>ncore</xsl:if>
       <xsl:if test="matches(.,'^ENCORES$')">ENCORE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^prins$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]rins$')"><xsl:value-of select="substring-before(.,'rins')"/>ris</xsl:if>
       <xsl:if test="matches(.,'^PRINS$')">PRIS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^quel(cun|qun)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Qq]uel(cun|qun)$')"><xsl:value-of select="substring-before(.,'uel')"/>uelqu'un</xsl:if>
       <xsl:if test="matches(.,'^QUEL(CUN|QUN)$')">QUELQU'UN</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^(age|eage|aage)(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(age|eage|aage)(\w*)$')">âge</xsl:if>
       <xsl:if test="matches(.,'^(Age|Eage|Aage)(\w*)$')">Âge</xsl:if>
       <xsl:if test="matches(.,'^(AGE|EAGE|AAGE)(\w*)$')">ÂGE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^sepmaine(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]epmaine(\w*)$')"><xsl:value-of select="substring-before(.,'epmaine')"/>emaine<xsl:value-of select="substring-after(.,'epmaine')"/></xsl:if>
       <xsl:if test="matches(.,'^SEPMAINE(\w*)$')">SEMAINE<xsl:value-of select="substring-after(.,'SEPMAINE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^cognoi(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ognoi(\w*)$')"><xsl:value-of select="substring-before(.,'ognoi')"/>onnai<xsl:value-of select="substring-after(.,'ognoi')"/></xsl:if>
       <xsl:if test="matches(.,'^COGNOI(\w*)$')">CONNAI<xsl:value-of select="substring-after(.,'COGNOI')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^foiblesse(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]oiblesse(\w*)$')"><xsl:value-of select="substring-before(.,'oiblesse')"/>aiblesse<xsl:value-of select="substring-after(.,'oiblesse')"/></xsl:if>
       <xsl:if test="matches(.,'^FOIBLESSE(\w*)$')">FAIBLESSE<xsl:value-of select="substring-after(.,'FOIBLESSE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^cueur$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ueur$')"><xsl:value-of select="substring-before(.,'ueur')"/>oeur<xsl:value-of select="substring-after(.,'ueur')"/></xsl:if>
       <xsl:if test="matches(.,'^CUEUR$')">COEUR<xsl:value-of select="substring-after(.,'CUEUR')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^beuf(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]euf(\w*)$')"><xsl:value-of select="substring-before(.,'euf')"/>oeuf<xsl:value-of select="substring-after(.,'euf')"/></xsl:if>
       <xsl:if test="matches(.,'^BEUF(\w*)$')">BOEUF<xsl:value-of select="substring-after(.,'BEUF')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^bezace(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]ezace(\w*)$')"><xsl:value-of select="substring-before(.,'bezace')"/>besace<xsl:value-of select="substring-after(.,'ezace')"/></xsl:if>
       <xsl:if test="matches(.,'^BEZACE(\w*)$')">BESACE<xsl:value-of select="substring-after(.,'BEZACE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^repous$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]epous$')"><xsl:value-of select="substring-before(.,'epous')"/>epos</xsl:if>
       <xsl:if test="matches(.,'^REPOUS$')">REPOS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^tyrant(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[tT]yrant(\w*)$')"><xsl:value-of select="substring-before(.,'yrant')"/>yran<xsl:value-of select="substring-after(.,'yrant')"/></xsl:if>
       <xsl:if test="matches(.,'^TYRANT(\w*)$')">TYRAN<xsl:value-of select="substring-after(.,'TYRANT')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ungs?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Uu]ngs?$')"><xsl:value-of select="substring-before(.,'ng')"/>n<xsl:value-of select="substring-after(.,'ng')"/></xsl:if>
       <xsl:if test="matches(.,'^UNGS?$')">UN<xsl:value-of select="substring-after(.,'UNG')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^fantasie(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]antasie(\w*)$')"><xsl:value-of select="substring-before(.,'antasie')"/>antaisie<xsl:value-of select="substring-after(.,'antasie')"/></xsl:if>
       <xsl:if test="matches(.,'^FANTASIE(\w*)$')">FANTAISIE<xsl:value-of select="substring-after(.,'FANTASIE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^cholere(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]holere(\w*)$')"><xsl:value-of select="substring-before(.,'holere')"/>olère<xsl:value-of select="substring-after(.,'holere')"/></xsl:if>
       <xsl:if test="matches(.,'^CHOLERE(\w*)$')">COLÈRE<xsl:value-of select="substring-after(.,'CHOLERE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^aumoins$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]umoins$')"><xsl:value-of select="substring-before(.,'umoins')"/>u moins</xsl:if>
       <xsl:if test="matches(.,'^AUMOINS$')">AU MOINS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^estomach(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ee]stomach(\w*)$')"><xsl:value-of select="substring-before(.,'stomach')"/>stomac<xsl:value-of select="substring-after(.,'stomach')"/></xsl:if>
       <xsl:if test="matches(.,'^ESTOMACH(\w*)$')">ESTOMAC<xsl:value-of select="substring-after(.,'ESTOMACH')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^pis$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]is$')"><xsl:value-of select="substring-before(.,'is')"/>ire</xsl:if>
       <xsl:if test="matches(.,'^PIS$')">PIRE</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^lon$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]on$')"><xsl:value-of select="substring-before(.,'on')"/>'on</xsl:if>
       <xsl:if test="matches(.,'^LON$')">L'ON</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^ausquels$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]usquels$')"><xsl:value-of select="substring-before(.,'usquels')"/>uxquels</xsl:if>
       <xsl:if test="matches(.,'^AUSQUELS$')">AUXQUELS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^avanture(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]vanture(\w*)$')"><xsl:value-of select="substring-before(.,'vanture')"/>venture</xsl:if>
         <xsl:if test="matches(.,'^AVANTURE(\w*)$')">AVENTURE<xsl:value-of select="substring-after(.,'AVANTURE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^touts$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]outs$')"><xsl:value-of select="substring-before(.,'outs')"/>ous</xsl:if>
       <xsl:if test="matches(.,'^TOUTS$')">TOUS</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^oncques$', 'i')"><reg type="modernisation">
         <xsl:if test="matches(.,'^oncques$')">onques</xsl:if>
         <xsl:if test="matches(.,'^Oncques$')">Onques</xsl:if>
       <xsl:if test="matches(.,'^ONCQUES$')">ONQUES</xsl:if></reg>
            </xsl:when>
                
                <!--ACCENT-->
              
<xsl:when test="matches(.,'^(\w+)ees?$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^(\w+)ees?$')"><xsl:value-of select="substring-before(.,'ee')"/>ée<xsl:value-of select="substring-after(.,'ee')"/></xsl:if>
    <xsl:if test="matches(.,'^(\w+)EES?$')"><xsl:value-of select="substring-before(.,'EE')"/>ÉE<xsl:value-of select="substring-after(.,'EE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^abbe[sz]$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]bbe[sz]$')"><xsl:value-of select="substring-before(.,'bbe')"/>bbés</xsl:if>
       <xsl:if test="matches(.,'^ABBE[ZS]$')">ABBÉS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^abbe$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^[Aa]bbe$')"><xsl:value-of select="substring-before(.,'bbe')"/>bbé</xsl:if>
    <xsl:if test="matches(.,'^ABBE$')">ABBÉ</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^abreger$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[aA]breger$')"><xsl:value-of select="substring-before(.,'breger')"/>bréger</xsl:if>
       <xsl:if test="matches(.,'^ABREGER$')">ABRÉGER</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^agreable(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]greable(\w*)$')"><xsl:value-of select="substring-before(.,'greable')"/>gréable<xsl:value-of select="substring-after(.,'greable')"/></xsl:if>
       <xsl:if test="matches(.,'^AGREABLE(\w*)$')">AGRÉABLE<xsl:value-of select="substring-after(.,'AGREABLE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^allego(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]llego(\w*)$')"><xsl:value-of select="substring-before(.,'llego')"/>llégo<xsl:value-of select="substring-after(.,'llego')"/></xsl:if>
       <xsl:if test="matches(.,'^ALLEGO(\w*)$')">ALLÉGO<xsl:value-of select="substring-after(.,'ALLEGO')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^altera(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ltera(\w*)$')"><xsl:value-of select="substring-before(.,'ltera')"/>ltéra<xsl:value-of select="substring-after(.,'ltera')"/></xsl:if>
       <xsl:if test="matches(.,'^ALTERA(\w*)$')">ALTÉRA<xsl:value-of select="substring-after(.,'ALTERA')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^bene[vfd](\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]ene[vfd](\w+)$')"><xsl:value-of select="substring-before(.,'ene')"/>éné<xsl:value-of select="substring-after(.,'ene')"/></xsl:if>
       <xsl:if test="matches(.,'^BENE[VFD](\w+)$')">BÉNÉ<xsl:value-of select="substring-after(.,'BENE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^regl(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]egl(\w+)$')"><xsl:value-of select="substring-before(.,'egl')"/>ègl<xsl:value-of select="substring-after(.,'egl')"/></xsl:if>
       <xsl:if test="matches(.,'^REGL(\w+)$')">RÈGL<xsl:value-of select="substring-after(.,'REGL')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^devot(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]evot(\w*)$')"><xsl:value-of select="substring-before(.,'evot')"/>évot<xsl:value-of select="substring-after(.,'evot')"/></xsl:if>
       <xsl:if test="matches(.,'^DEVOT(\w*)$')">DÉVOT<xsl:value-of select="substring-after(.,'DEVOT')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^conseq(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]onseq(\w+)$')"><xsl:value-of select="substring-before(.,'onseq')"/>onséq<xsl:value-of select="substring-after(.,'onseq')"/></xsl:if>
       <xsl:if test="matches(.,'^CONSEQ(\w+)$')">CONSÉQ<xsl:value-of select="substring-after(.,'CONSEQ')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^tres$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]res$')"><xsl:value-of select="substring-before(.,'res')"/>rès</xsl:if>
       <xsl:if test="matches(.,'^TRES$')">TRÈS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^beat(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]eat(\w*)$')"><xsl:value-of select="substring-before(.,'eat')"/>éat<xsl:value-of select="substring-after(.,'eat')"/></xsl:if>
       <xsl:if test="matches(.,'^BEAT(\w*)$')">BÉAT<xsl:value-of select="substring-after(.,'BEAT')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^(ais|malais|asse?ur|separ|desesper|moder|inconsider|figur|proportionn|importun|inopin|impun|passionn|opportun|(in)?commod|profond|express|confus|pos|nomm|conform|priv|reciproc)ement$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^(ais|malais|asse?ur|separ|desesper|moder|inconsider|figur|proportionn|importun|inopin|impun|passionn|opportun|(in)?commod|profond|express|confus|pos|nomm|conform|priv|reciproc)ement(\w*)$')"><xsl:value-of select="substring-before(.,'ement')"/>ément</xsl:if>
    <xsl:if test="matches(.,'^(Ais|Malais|Asse?ur|Separ|Desesper|Moder|Inconsider|Figur|Proportionn|Importun|Inopin|Impun|Passionn|Opportun|Incommod|Commod|Profond|Express|Confus|Pos|Nomm|Conform|Priv|Reciproc)ement(\w*)$')"><xsl:value-of select="substring-before(.,'ement')"/>ément</xsl:if>
    <xsl:if test="matches(.,'^(AIS|MALAIS|ASSE?UR|SEPAR|DESESPER|MODER|INCONSIDER|FIGUR|PROPORTIONN|IMPORTUN|INOPIN|IMPUN|PASSIONN|OPPORTUN|INCOMMOD|COMMOD|PROFOND|EXPRESS|CONFUS|POS|NOMM|CONFORM|PRIV|RECIPROC)EMENT(\w*)$')"><xsl:value-of select="substring-before(.,'EMENT')"/>ÉMENT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^aysement$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ysement$')"><xsl:value-of select="substring-before(.,'ysement')"/>isément</xsl:if>
       <xsl:if test="matches(.,'^AYSEMENT$')"><xsl:value-of select="substring-before(.,'AYSEMENT')"/>AISÉMENT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^malaysement$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]alaysement$')"><xsl:value-of select="substring-before(.,'alaysement')"/>alaisément</xsl:if>
       <xsl:if test="matches(.,'^MALAYSEMENT$')"><xsl:value-of select="substring-before(.,'MALAYSEMENT')"/>MALAISÉMENT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^courtoysement$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ourtoysement$')"><xsl:value-of select="substring-before(.,'ourtoysement')"/>ourtoisement</xsl:if>
       <xsl:if test="matches(.,'^COURTOYSEMENT$')"><xsl:value-of select="substring-before(.,'COURTOYSEMENT')"/>COURTOISEMENT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^eshontement$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^eshontement$')">éhontément</xsl:if>
       <xsl:if test="matches(.,'^Eshontement$')">Éhontément</xsl:if>
       <xsl:if test="matches(.,'^ESHONTEMENT$')">ÉHONTÉMENT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^desesperément$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]esesperément$')"><xsl:value-of select="substring-before(.,'esesperément')"/>esespérément</xsl:if>
       <xsl:if test="matches(.,'^DESESPERÉMENT$')">DESESPÉRÉMENT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^element(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^element(\w*)$')">élément<xsl:value-of select="substring-after(.,'element')"/></xsl:if>
       <xsl:if test="matches(.,'^Element(\w*)$')">Élément<xsl:value-of select="substring-after(.,'Element')"/></xsl:if>
       <xsl:if test="matches(.,'^ELEMENT(\w*)$')">ÉLÉMENT<xsl:value-of select="substring-after(.,'ELEMENT')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^evenement(\w*)$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^evenement(\w*)$')">évènement<xsl:value-of select="substring-after(.,'evenement')"/></xsl:if>
    <xsl:if test="matches(.,'^Evenement(\w*)$')">Évènement<xsl:value-of select="substring-after(.,'Evenement')"/></xsl:if>
    <xsl:if test="matches(.,'^EVENEMENT(\w*)$')">ÉVÈNEMENT<xsl:value-of select="substring-after(.,'EVENEMENT')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^advenement(\w*)$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^[Aa]dvenement(\w*)$')">advènement<xsl:value-of select="substring-after(.,'dvenement')"/></xsl:if>
    <xsl:if test="matches(.,'^ADVENEMENT(\w*)$')">ADVÈNEMENT<xsl:value-of select="substring-after(.,'ADVENEMENT')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)(il|qu)ites?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)(il|qu)ites?$')"><xsl:value-of select="substring-before(.,'ite')"/>ité<xsl:value-of select="substring-after(.,'ite')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)(IL|QU)ITES?$')"><xsl:value-of select="substring-before(.,'ITE')"/>ITÉ<xsl:value-of select="substring-after(.,'ITE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)mities?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)mities?$')"><xsl:value-of select="substring-before(.,'mitie')"/>mitié<xsl:value-of select="substring-after(.,'mitie')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)MITIES?$')"><xsl:value-of select="substring-before(.,'MITIE')"/>MITIÉ<xsl:value-of select="substring-after(.,'MITIE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)etiq(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)etiq(\w+)$')"><xsl:value-of select="substring-before(.,'etiq')"/>étiq<xsl:value-of select="substring-after(.,'etiq')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ETIQ(\w+)$')"><xsl:value-of select="substring-before(.,'ETIQ')"/>ÉTIQ<xsl:value-of select="substring-after(.,'ETIQ')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^pres$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]res$')"><xsl:value-of select="substring-before(.,'res')"/>rès</xsl:if>
       <xsl:if test="matches(.,'^PRES$')">PRÈS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^au?pres$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]u?pres$')"><xsl:value-of select="substring-before(.,'pres')"/>près</xsl:if>
       <xsl:if test="matches(.,'^AU?PRES$')"><xsl:value-of select="substring-before(.,'pres')"/>PRÈS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)elis[tm]es?$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^(\w+)elis[tm]es?$')"><xsl:value-of select="substring-before(.,'elis')"/>élis<xsl:value-of select="substring-after(.,'elis')"/></xsl:if>
    <xsl:if test="matches(.,'^(\w+)ELIS[TM]ES?$')"><xsl:value-of select="substring-before(.,'ELIS')"/>ÉLIS<xsl:value-of select="substring-after(.,'ELIS')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^francois$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]rancois$')"><xsl:value-of select="substring-before(.,'rancois')"/>rançais</xsl:if>
       <xsl:if test="matches(.,'^FRANCOIS$')">FRANÇAIS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^elire$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^elire$')">élire</xsl:if>
       <xsl:if test="matches(.,'^Elire$')">Élire</xsl:if>                                
       <xsl:if test="matches(.,'^ELIRE$')">ÉLIRE</xsl:if></reg>
</xsl:when>
                <!--AUTRE-->
<xsl:when test="matches(.,'^(\w+)ostre$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)ostre$')"><xsl:value-of select="substring-before(.,'ostre')"/>otre<xsl:value-of select="substring-after(.,'ostre')"/></xsl:if>
    <xsl:if test="matches(.,'^(\w+)OSTRE$')"><xsl:value-of select="substring-before(.,'OSTRE')"/>OTRE<xsl:value-of select="substring-after(.,'OSTRE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^dueil(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ueil(\w*)$')"><xsl:value-of select="substring-before(.,'ueil')"/>euil<xsl:value-of select="substring-after(.,'ueil')"/></xsl:if>
       <xsl:if test="matches(.,'^DUEIL(\w*)$')">DEUIL<xsl:value-of select="substring-after(.,'DUEIL')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)ologe(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^ologe(\w*)$')"><xsl:value-of select="substring-before(.,'ologe')"/>ologue<xsl:value-of select="substring-after(.,'ologe')"/></xsl:if>
       <xsl:if test="matches(.,'^OLOGE(\w*)$')">OLOGUE<xsl:value-of select="substring-after(.,'OLOGE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^verolez$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]erolez$')"><xsl:value-of select="substring-before(.,'erolez')"/>erolés</xsl:if>
       <xsl:if test="matches(.,'^VEROLEZ$')">VEROLÉS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^precept(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]recept(\w*)$')"><xsl:value-of select="substring-before(.,'recept')"/>récept<xsl:value-of select="substring-after(.,'recept')"/></xsl:if>
       <xsl:if test="matches(.,'^PRECEPT(\w*)$')">PRÉCEPT<xsl:value-of select="substring-after(.,'PRECEPT')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^silenes?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]ilenes?$')"><xsl:value-of select="substring-before(.,'ilene')"/>ilène<xsl:value-of select="substring-after(.,'ilene')"/></xsl:if>
       <xsl:if test="matches(.,'^SILENES?$')">SILÈNE<xsl:value-of select="substring-after(.,'SILENE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^oys(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]ys(\w*)$')"><xsl:value-of select="substring-before(.,'ys')"/>is<xsl:value-of select="substring-after(.,'ys')"/></xsl:if>
       <xsl:if test="matches(.,'^OYS(\w*)$')">OIS<xsl:value-of select="substring-after(.,'OYS')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^lievres?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[ll]ievres?$')"><xsl:value-of select="substring-before(.,'ievre')"/>ièvre<xsl:value-of select="substring-after(.,'ievre')"/></xsl:if>
       <xsl:if test="matches(.,'^LIEVRES?$')">LIÈVRE<xsl:value-of select="substring-after(.,'LIEVRE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)fz$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)fz$')"><xsl:value-of select="substring-before(.,'fz')"/>fs</xsl:if>
       <xsl:if test="matches(.,'^(\w+)FZ$')"><xsl:value-of select="substring-before(.,'FZ')"/>FS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)servoit$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)servoit$')"><xsl:value-of select="substring-before(.,'servoit')"/>servait</xsl:if>
       <xsl:if test="matches(.,'^(\w+)SERVOIT$')"><xsl:value-of select="substring-before(.,'SERVOIT')"/>SERVAIT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)teriore(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)teriore(\w*)$')"><xsl:value-of select="substring-before(.,'teriore')"/>térieure<xsl:value-of select="substring-after(.,'teriore')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)TERIORE(\w*)$')"><xsl:value-of select="substring-before(.,'TERIORE')"/>TÉRIEURE<xsl:value-of select="substring-after(.,'TERIORE')"/></xsl:if></reg>
</xsl:when>
            <xsl:when test="matches(.,'^guardian(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Gg]uardian(\w*)$')"><xsl:value-of select="substring-before(.,'uardian')"/>ardien<xsl:value-of select="substring-after(.,'uardian')"/></xsl:if>
                    <xsl:if test="matches(.,'^GUARDIAN(\w*)$')">GARDIEN<xsl:value-of select="substring-after(.,'GUARDIAN')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)guard(\w*)$', 'i')"><reg type="modernisation">
                <xsl:if test="matches(.,'^(\w*)guard(\w*)$')"><xsl:value-of select="substring-before(.,'guard')"/>gard<xsl:value-of select="substring-after(.,'guard')"/></xsl:if>
                <xsl:if test="matches(.,'^(\w*)GUARD(\w*)$')"><xsl:value-of select="substring-before(.,'GUARD')"/>GARD<xsl:value-of select="substring-after(.,'GUARD')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^guabelant$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]uabelant$')"><xsl:value-of select="substring-before(.,'uabelant')"/>abelant<xsl:value-of select="substring-after(.,'uabelant')"/></xsl:if>
       <xsl:if test="matches(.,'^GUABELANT$')">GABELANT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^republique(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]epublique(\w*)$')"><xsl:value-of select="substring-before(.,'epublique')"/>épublique<xsl:value-of select="substring-after(.,'epublique')"/></xsl:if>
       <xsl:if test="matches(.,'^REPUBLIQUE(\w*)$')">RÉPUBLIQUE<xsl:value-of select="substring-after(.,'REPUBLIQUE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^ouvrans$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Oo]uvrans$')"><xsl:value-of select="substring-before(.,'uvrans')"/>uvrant</xsl:if>
       <xsl:if test="matches(.,'^OUVRANS$')">OUVRANT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^lisans$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]isans$')"><xsl:value-of select="substring-before(.,'isans')"/>isant</xsl:if>
       <xsl:if test="matches(.,'^LISANS$')">LISANT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^deprisement(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]eprisement(\w*)$')"><xsl:value-of select="substring-before(.,'eprisement')"/>éprisement<xsl:value-of select="substring-after(.,'eprisement')"/></xsl:if>
       <xsl:if test="matches(.,'^DEPRISEMENT(\w*)$')">DÉPRISEMENT<xsl:value-of select="substring-after(.,'DEPRISEMENT')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^veiglent$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eiglent$')"><xsl:value-of select="substring-before(.,'eiglent')"/>euillent</xsl:if>
       <xsl:if test="matches(.,'^VEIGLENT$')">VEUILLENT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^prelude(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]relude(\w*)$')"><xsl:value-of select="substring-before(.,'relude')"/>rélude<xsl:value-of select="substring-after(.,'relude')"/></xsl:if>
       <xsl:if test="matches(.,'^PRELUDE(\w*)$')">PRÉLUDE<xsl:value-of select="substring-after(.,'PRELUDE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^dignite(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ignite(\w*)$')"><xsl:value-of select="substring-before(.,'ignite')"/>ignité<xsl:value-of select="substring-after(.,'ignite')"/></xsl:if>
       <xsl:if test="matches(.,'^DIGNITE(\w*)$')">DIGNITÉ<xsl:value-of select="substring-after(.,'DIGNITE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^folaterie(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]olaterie(\w*)$')"><xsl:value-of select="substring-before(.,'olaterie')"/>olâtrerie<xsl:value-of select="substring-after(.,'olaterie')"/></xsl:if>
       <xsl:if test="matches(.,'^FOLATERIE(\w*)$')">FOLÂTRERIE<xsl:value-of select="substring-after(.,'FOLATERIE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^folastre(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]olastre(\w*)$')"><xsl:value-of select="substring-before(.,'olastre')"/>olâtre<xsl:value-of select="substring-after(.,'olastre')"/></xsl:if>
       <xsl:if test="matches(.,'^FOLASTRE(\w*)$')">FOLÂTRE<xsl:value-of select="substring-after(.,'FOLASTRE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)querir$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Qq]uerir$')"><xsl:value-of select="substring-before(.,'uerir')"/>uérir</xsl:if>
       <xsl:if test="matches(.,'^(\w*)QUERIR$')"><xsl:value-of select="substring-before(.,'QUERIR')"/>QUÉRIR</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^deri(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]eri(\w*)$')"><xsl:value-of select="substring-before(.,'eri')"/>éri<xsl:value-of select="substring-after(.,'eri')"/></xsl:if>
       <xsl:if test="matches(.,'^DERI(\w*)$')">DÉRI<xsl:value-of select="substring-after(.,'DERI')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^[rd]edu(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[DdRr]edu(\w*)$')"><xsl:value-of select="substring-before(.,'edu')"/>édu<xsl:value-of select="substring-after(.,'edu')"/></xsl:if>
       <xsl:if test="matches(.,'^[RD]EDU(\w*)$')"><xsl:value-of select="substring-before(.,'EDU')"/>ÉDU<xsl:value-of select="substring-after(.,'EDU')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^legierete(\w*)$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^[Ll]egierete(\w*)$')"><xsl:value-of select="substring-before(.,'egierete')"/>égèreté<xsl:value-of select="substring-after(.,'egierete')"/></xsl:if>
    <xsl:if test="matches(.,'^LEGIERETE(\w*)$')">ÉGÈRETÉ<xsl:value-of select="substring-after(.,'LEGIERETE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^legiere(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]egiere(\w*)$')"><xsl:value-of select="substring-before(.,'egiere')"/>égère<xsl:value-of select="substring-after(.,'egiere')"/></xsl:if>
       <xsl:if test="matches(.,'^LEGIERE(\w*)$')">ÉGÈRE<xsl:value-of select="substring-after(.,'LEGIERE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^vestu(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]estu(\w*)$')"><xsl:value-of select="substring-before(.,'estu')"/>êtu<xsl:value-of select="substring-after(.,'estu')"/></xsl:if>
       <xsl:if test="matches(.,'^VESTU(\w*)$')">VÊTU<xsl:value-of select="substring-after(.,'VESTU')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^hespanol(\w*)$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^hespanol(\w*)$')"><xsl:value-of select="substring-before(.,'hespanol')"/>espagnol<xsl:value-of select="substring-after(.,'hespanol')"/></xsl:if>
    <xsl:if test="matches(.,'^Hespanol(\w*)$')"><xsl:value-of select="substring-before(.,'Hespanol')"/>Espagnol<xsl:value-of select="substring-after(.,'Hespanol')"/></xsl:if>
    <xsl:if test="matches(.,'^HESPANOL(\w*)$')">ESPAGNOL<xsl:value-of select="substring-after(.,'HESPANOL')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^(\w+)romettoi(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w+)romettoi(\w*)$')"><xsl:value-of select="substring-before(.,'romettoi')"/>romettai<xsl:value-of select="substring-after(.,'romettoi')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w+)ROMETTOI(\w*)$')"><xsl:value-of select="substring-before(.,'ROMETTOI')"/>ROMETTAI<xsl:value-of select="substring-after(.,'ROMETTOI')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^pretendoi(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]retendoi(\w*)$')"><xsl:value-of select="substring-before(.,'retendoi')"/>rétendai<xsl:value-of select="substring-after(.,'retendoi')"/></xsl:if>
       <xsl:if test="matches(.,'^PRETENDOI(\w*)$')">PRÉTENDAI<xsl:value-of select="substring-after(.,'PRETENDOI')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^literal(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]iteral(\w*)$')"><xsl:value-of select="substring-before(.,'iteral')"/>ittéral<xsl:value-of select="substring-after(.,'iteral')"/></xsl:if>
       <xsl:if test="matches(.,'^LITERAL(\w*)$')">LITTÉRAL<xsl:value-of select="substring-after(.,'LITERAL')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^demour(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]emour(\w*)$')"><xsl:value-of select="substring-before(.,'emour')"/>emeur<xsl:value-of select="substring-after(.,'emour')"/></xsl:if>
       <xsl:if test="matches(.,'^DEMOUR(\w*)$')">DEMEUR<xsl:value-of select="substring-after(.,'DEMOUR')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^sirene(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]irene(\w*)$')"><xsl:value-of select="substring-before(.,'irene')"/>irène<xsl:value-of select="substring-after(.,'irene')"/></xsl:if>
       <xsl:if test="matches(.,'^SIRENE(\w*)$')">SIRÈNE<xsl:value-of select="substring-after(.,'SIRENE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^gaiete(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]aiete(\w*)$')"><xsl:value-of select="substring-before(.,'aiete')"/>aieté<xsl:value-of select="substring-after(.,'aiete')"/></xsl:if>
       <xsl:if test="matches(.,'^GAIETE(\w*)$')">GAIETÉ<xsl:value-of select="substring-after(.,'GAIETE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^crochetastes$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]rochetastes$')"><xsl:value-of select="substring-before(.,'rochetastes')"/>rochetâtes</xsl:if>
    <xsl:if test="matches(.,'^CROCHETASTES$')">CROCHETÂTES</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^veist$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eist$')"><xsl:value-of select="substring-before(.,'eist')"/>it</xsl:if>
       <xsl:if test="matches(.,'^VEIST$')">VIT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^veistes$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]eistes$')"><xsl:value-of select="substring-before(.,'eistes')"/>îtes</xsl:if>
       <xsl:if test="matches(.,'^VEISTES$')">VÎTES</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^contenen(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ontenen(\w*)$')"><xsl:value-of select="substring-before(.,'ontenen')"/>ontenan<xsl:value-of select="substring-after(.,'ontenen')"/></xsl:if>
       <xsl:if test="matches(.,'^CONTENEN(\w*)$')">CONTENAN<xsl:value-of select="substring-after(.,'CONTENEN')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^medulare(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]edulare(\w*)$')"><xsl:value-of select="substring-before(.,'edulare')"/>édullaire<xsl:value-of select="substring-after(.,'edulare')"/></xsl:if>
       <xsl:if test="matches(.,'^MEDULARE(\w*)$')">MÉDULLAIRE<xsl:value-of select="substring-after(.,'MEDULARE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^beste(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]este(\w*)$')"><xsl:value-of select="substring-before(.,'este')"/>ête<xsl:value-of select="substring-after(.,'este')"/></xsl:if>
       <xsl:if test="matches(.,'^BESTE(\w*)$')">BÊTE<xsl:value-of select="substring-after(.,'BESTE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^pretend(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]retend(\w*)$')"><xsl:value-of select="substring-before(.,'retend')"/>rétend<xsl:value-of select="substring-after(.,'retend')"/></xsl:if>
       <xsl:if test="matches(.,'^PRETEND(\w*)$')">PRÉTEND<xsl:value-of select="substring-after(.,'PRETEND')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^deli(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]eli(\w+)$')"><xsl:value-of select="substring-before(.,'eli')"/>éli<xsl:value-of select="substring-after(.,'eli')"/></xsl:if>
       <xsl:if test="matches(.,'^DELI(\w+)$')">DÉLI<xsl:value-of select="substring-after(.,'DELI')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^mouelle(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ouelle(\w*)$')"><xsl:value-of select="substring-before(.,'ouelle')"/>oelle<xsl:value-of select="substring-after(.,'ouelle')"/></xsl:if>
       <xsl:if test="matches(.,'^MOUELLE(\w*)$')">MOELLE<xsl:value-of select="substring-after(.,'MOUELLE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^gresse(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]resse(\w*)$')"><xsl:value-of select="substring-before(.,'resse')"/>raisse<xsl:value-of select="substring-after(.,'resse')"/></xsl:if>
       <xsl:if test="matches(.,'^GRESSE(\w*)$')">GRAISSE<xsl:value-of select="substring-after(.,'GRESSE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^legiers?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]egiers?$')"><xsl:value-of select="substring-before(.,'legier')"/>léger<xsl:value-of select="substring-after(.,'legier')"/></xsl:if>
       <xsl:if test="matches(.,'^LEGIERS?$')">LÉGER<xsl:value-of select="substring-after(.,'LEGIER')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^hardiz$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]ardiz$')"><xsl:value-of select="substring-before(.,'ardiz')"/>ardis</xsl:if>
       <xsl:if test="matches(.,'^HARDIZ$')">HARDIS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^medit(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]edit(\w+)$')"><xsl:value-of select="substring-before(.,'edit')"/>édit<xsl:value-of select="substring-after(.,'edit')"/></xsl:if>
       <xsl:if test="matches(.,'^MEDIT(\w+)$')">MÉDIT<xsl:value-of select="substring-after(.,'MEDIT')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^reveler(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]eveler(\w+)$')"><xsl:value-of select="substring-before(.,'eveler')"/>évèler<xsl:value-of select="substring-after(.,'eveler')"/></xsl:if>
       <xsl:if test="matches(.,'^REVELER(\w+)$')">RÉVÈLER<xsl:value-of select="substring-after(.,'REVELER')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^oeconomique(\w*)$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^oeconomi(\w*)$')">économi<xsl:value-of select="substring-after(.,'oeconomi')"/></xsl:if>
    <xsl:if test="matches(.,'^Oeconomi(\w*)$')">économi<xsl:value-of select="substring-after(.,'oeconomi')"/></xsl:if>
    <xsl:if test="matches(.,'^OECONOMI(\w*)$')">ÉCONOMI<xsl:value-of select="substring-after(.,'OECONOMI')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^croiez$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]roiez$')"><xsl:value-of select="substring-before(.,'roiez')"/>royez</xsl:if>
       <xsl:if test="matches(.,'^CROIEZ$')">CROYEZ</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^pensast$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ensast$')"><xsl:value-of select="substring-before(.,'ensast')"/>ensât</xsl:if>
       <xsl:if test="matches(.,'^PENSAST$')">PENSÂT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^meta(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]eta(\w*)$')"><xsl:value-of select="substring-before(.,'eta')"/>éta<xsl:value-of select="substring-after(.,'eta')"/></xsl:if>
       <xsl:if test="matches(.,'^META(\w*)$')">MÉTA<xsl:value-of select="substring-after(.,'META')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^demo(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]emo(\w+)$')"><xsl:value-of select="substring-before(.,'emo')"/>émo<xsl:value-of select="substring-after(.,'emo')"/></xsl:if>
       <xsl:if test="matches(.,'^DEMO(\w+)$')">DÉMO<xsl:value-of select="substring-after(.,'DEMO')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^fols$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ols$')"><xsl:value-of select="substring-before(.,'ols')"/>ous</xsl:if>
       <xsl:if test="matches(.,'^FOLS$')">FOUS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^beviez$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]eviez$')"><xsl:value-of select="substring-before(.,'eviez')"/>uviez</xsl:if>
       <xsl:if test="matches(.,'^BEVIEZ$')">BUVIEZ</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^perdiz$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]erdiz$')"><xsl:value-of select="substring-before(.,'erdiz')"/>erdis</xsl:if>
       <xsl:if test="matches(.,'^PERDIZ$')">PERDIS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^profund(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]rofund(\w*)$')"><xsl:value-of select="substring-before(.,'rofund')"/>rofond<xsl:value-of select="substring-after(.,'rofund')"/></xsl:if>
       <xsl:if test="matches(.,'^PROFUND(\w*)$')">PROFOND<xsl:value-of select="substring-after(.,'PROFUND')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^tesmo(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]esmo(\w+)$')"><xsl:value-of select="substring-before(.,'esmo')"/>émo<xsl:value-of select="substring-after(.,'esmo')"/></xsl:if>
       <xsl:if test="matches(.,'^TESMO(\w+)$')">TÉMO<xsl:value-of select="substring-after(.,'TESMO')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^malautru(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]alautru(\w*)$')"><xsl:value-of select="substring-before(.,'alautru')"/>alotru<xsl:value-of select="substring-after(.,'alautru')"/></xsl:if>
       <xsl:if test="matches(.,'^MALAUTRU(\w*)$')">MALOTRU<xsl:value-of select="substring-after(.,'MALAUTRU')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^sentoy(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]entoy(\w+)$')"><xsl:value-of select="substring-before(.,'entoy')"/>entai<xsl:value-of select="substring-after(.,'entoy')"/></xsl:if>
       <xsl:if test="matches(.,'^SENTOY(\w+)$')">SENTAI<xsl:value-of select="substring-after(.,'SENTOY')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^friant(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]riant(\w*)$')"><xsl:value-of select="substring-before(.,'riant')"/>riand<xsl:value-of select="substring-after(.,'riant')"/></xsl:if>
       <xsl:if test="matches(.,'^FRIANT(\w*)$')">FRIAND<xsl:value-of select="substring-after(.,'FRIANT')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^huill(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]uill(\w*)$')"><xsl:value-of select="substring-before(.,'uill')"/>uil<xsl:value-of select="substring-after(.,'uill')"/></xsl:if>
       <xsl:if test="matches(.,'^HUILL(\w*)$')">HUIL<xsl:value-of select="substring-after(.,'HUILL')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^huyle(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Hh]uyle(\w*)$')"><xsl:value-of select="substring-before(.,'uyle')"/>uile<xsl:value-of select="substring-after(.,'uyle')"/></xsl:if>
       <xsl:if test="matches(.,'^HUYLE(\w*)$')">HUILE<xsl:value-of select="substring-after(.,'HUYLE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)rendray(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Rr]endray(\w*)$')"><xsl:value-of select="substring-before(.,'endray')"/>endrai<xsl:value-of select="substring-after(.,'endray')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)RENDRAY(\w*)$')"><xsl:value-of select="substring-before(.,'RENDRAY')"/>RENDRAI<xsl:value-of select="substring-after(.,'RENDRAY')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^die$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ie$')"><xsl:value-of select="substring-before(.,'ie')"/>it</xsl:if>
       <xsl:if test="matches(.,'^DIE$')">DIT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^fist$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]ist$')"><xsl:value-of select="substring-before(.,'ist')"/>it</xsl:if>
       <xsl:if test="matches(.,'^FIST$')">FIT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^disoi(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]isoi(\w*)$')"><xsl:value-of select="substring-before(.,'isoi')"/>isai<xsl:value-of select="substring-after(.,'isoi')"/></xsl:if>
       <xsl:if test="matches(.,'^DISOI(\w*)$')">DISAI<xsl:value-of select="substring-after(.,'DISOI')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^dépendoi(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]épendoi(\w*)$')"><xsl:value-of select="substring-before(.,'épendoi')"/>épendai<xsl:value-of select="substring-after(.,'épendoi')"/></xsl:if>
       <xsl:if test="matches(.,'^DÉPENDOI(\w*)$')">DÉPENDAI<xsl:value-of select="substring-after(.,'DÉPENDOI')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^(\w*)sentoi(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^(\w*)[Ss]entoi(\w*)$')"><xsl:value-of select="substring-before(.,'entoi')"/>entai<xsl:value-of select="substring-after(.,'entoi')"/></xsl:if>
       <xsl:if test="matches(.,'^(\w*)SENTOI(\w*)$')"><xsl:value-of select="substring-before(.,'SENTOI')"/>SENTAI<xsl:value-of select="substring-after(.,'SENTOI')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^serpilliere(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]erpilliere(\w*)$')"><xsl:value-of select="substring-before(.,'erpilliere')"/>erpillère<xsl:value-of select="substring-after(.,'erpilliere')"/></xsl:if>
       <xsl:if test="matches(.,'^SERPILLIERE(\w*)$')">SERPILLÈRE<xsl:value-of select="substring-after(.,'SERPILLIERE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^interpretez$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ii]nterpretez$')"><xsl:value-of select="substring-before(.,'nterpretez')"/>nterprétez</xsl:if>
       <xsl:if test="matches(.,'^INTERPRETEZ$')">INTERPRÉTEZ</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^paist$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]aist$')"><xsl:value-of select="substring-before(.,'aist')"/>aît</xsl:if>
       <xsl:if test="matches(.,'^PAIST$')">PAÎT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^povoir$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ovoir$')"><xsl:value-of select="substring-before(.,'ovoir')"/>ouvoir</xsl:if>
       <xsl:if test="matches(.,'^POVOIR$')">POUVOIR</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^esba(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^esba(\w*)$')">éba<xsl:value-of select="substring-after(.,'esba')"/></xsl:if>
       <xsl:if test="matches(.,'^Esba(\w*)$')">Éba<xsl:value-of select="substring-after(.,'Esba')"/></xsl:if>
       <xsl:if test="matches(.,'^ESBA(\w*)$')">ÉBA<xsl:value-of select="substring-after(.,'ESBA')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^guayement$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]uayement$')"><xsl:value-of select="substring-before(.,'uayement')"/>aiement</xsl:if>
       <xsl:if test="matches(.,'^GUAYEMENT$')">GAIEMENT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^viets$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Vv]iets$')"><xsl:value-of select="substring-before(.,'iets')"/>its</xsl:if>
       <xsl:if test="matches(.,'^VIETS$')">VITS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^soubvienne(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]oubvienne(\w*)$')"><xsl:value-of select="substring-before(.,'oubvienne')"/>ouvienne<xsl:value-of select="substring-after(.,'oubvienne')"/></xsl:if>
       <xsl:if test="matches(.,'^SOUBVIENNE(\w*)$')">SOUVIENNE<xsl:value-of select="substring-after(.,'SOUBVIENNE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^my$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]y$')"><xsl:value-of select="substring-before(.,'y')"/>i</xsl:if>
       <xsl:if test="matches(.,'^MY$')">MI</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^metys$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]etys$')"><xsl:value-of select="substring-before(.,'etys')"/>etis</xsl:if>
       <xsl:if test="matches(.,'^METYS$')">METIS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^genealogie(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]enealogie(\w*)$')"><xsl:value-of select="substring-before(.,'enealogie')"/>énéalogie<xsl:value-of select="substring-after(.,'enealogie')"/></xsl:if>
       <xsl:if test="matches(.,'^GENEALOGIE(\w*)$')">GÉNÉALOGIE<xsl:value-of select="substring-after(.,'GENEALOGIE')"/></xsl:if></reg>
</xsl:when>     
<xsl:when test="matches(.,'^remects$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^[Rr]emects$')"><xsl:value-of select="substring-before(.,'emects')"/>emets</xsl:if>
    <xsl:if test="matches(.,'^REMECTS$')">REMETS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^geands?$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^[Gg]eands?$')"><xsl:value-of select="substring-before(.,'eand')"/>éant<xsl:value-of select="substring-after(.,'eand')"/></xsl:if>
    <xsl:if test="matches(.,'^GEANDS?(\w*)$')">GÉANT<xsl:value-of select="substring-after(.,'GEAND')"/></xsl:if></reg>
</xsl:when> 
<xsl:when test="matches(.,'^nasqui(\w+)$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^[Nn]asqui(\w+)$')"><xsl:value-of select="substring-before(.,'asqui')"/>aqui<xsl:value-of select="substring-after(.,'asqui')"/></xsl:if>
    <xsl:if test="matches(.,'^NASQUI(\w+)$')">NAQUI<xsl:value-of select="substring-after(.,'NASQUI')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^remects$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^[Rr]emects$')"><xsl:value-of select="substring-before(.,'emects')"/>emets</xsl:if>
    <xsl:if test="matches(.,'^REMECTS$')">REMETS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^yssit$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^yssit$')"><xsl:value-of select="substring-before(.,'yssit')"/>issit</xsl:if>
    <xsl:if test="matches(.,'^Yssit$')"><xsl:value-of select="substring-before(.,'Yssit')"/>Issit</xsl:if>
    <xsl:if test="matches(.,'^YSSIT$')">ISSIT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^fascher(\w+)$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^[Ff]ascher(\w+)$')"><xsl:value-of select="substring-before(.,'ascher')"/>âcher<xsl:value-of select="substring-after(.,'ascher')"/></xsl:if>
    <xsl:if test="matches(.,'^FASCHER(\w+)$')">FÂCHER<xsl:value-of select="substring-after(.,'FASCHER')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^plairoi(\w*)$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^[Pp]lairoi(\w*)$')"><xsl:value-of select="substring-before(.,'lairoi')"/>lairai<xsl:value-of select="substring-after(.,'lairoi')"/></xsl:if>
    <xsl:if test="matches(.,'^PLAIROI(\w*)$')">PLAIRAI<xsl:value-of select="substring-after(.,'PLAIROI')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^sust$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^[Ss]ust$')"><xsl:value-of select="substring-before(.,'ust')"/>ût</xsl:if>
    <xsl:if test="matches(.,'^SUST$')">SÛT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^jusques$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^[Jj]usques$')"><xsl:value-of select="substring-before(.,'usques')"/>usque</xsl:if>
    <xsl:if test="matches(.,'^JUSQUES$')">JUSQUE</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^aujourdhuy$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ujourdhuy$')"><xsl:value-of select="substring-before(.,'ujourdhuy')"/>ujourd'hui</xsl:if>
       <xsl:if test="matches(.,'^AUJOURDHUY$')">AUJOURD'HUI</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^ducz$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ucz$')"><xsl:value-of select="substring-before(.,'ucz')"/>ucs</xsl:if>
       <xsl:if test="matches(.,'^DUCZ$')">DUCS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^descenduz$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]escenduz$')"><xsl:value-of select="substring-before(.,'escenduz')"/>escendus</xsl:if>
       <xsl:if test="matches(.,'^DESCENDUZ$')">DESCENDUS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^coustrets$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]oustrets$')"><xsl:value-of select="substring-before(.,'oustrets')"/>outrets</xsl:if>
       <xsl:if test="matches(.,'^COUSTRETS$')">COUTRETS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^hostiaire(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^hostiaire(\w*)$')">ostiaire<xsl:value-of select="substring-after(.,'hostiaire')"/></xsl:if>
       <xsl:if test="matches(.,'^Hostiaire(\w*)$')">Ostiaire<xsl:value-of select="substring-after(.,'Hostiaire')"/></xsl:if>
       <xsl:if test="matches(.,'^HOSTIAIRE(\w*)$')">OSTIAIRE<xsl:value-of select="substring-after(.,'HOSTIAIRE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^grandz$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]randz$')"><xsl:value-of select="substring-before(.,'randz')"/>rands</xsl:if>
       <xsl:if test="matches(.,'^GRANDZ$')">GRANDS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^es$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^es$')">ès</xsl:if>
       <xsl:if test="matches(.,'^Es$')">Ès</xsl:if>
       <xsl:if test="matches(.,'^ES$')">ÈS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^auseroie$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^auseroie$')">oserais</xsl:if>
    <xsl:if test="matches(.,'^Auseroie$')">Oserais</xsl:if>
    <xsl:if test="matches(.,'^AUSEROIE$')">OSERAIS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^soubhaitt(\w+)$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^[Ss]oubhaitt(\w+)$')"><xsl:value-of select="substring-before(.,'oubhaitt')"/>ouhait<xsl:value-of select="substring-after(.,'oubhaitt')"/></xsl:if>
       <xsl:if test="matches(.,'^SOUBHAITT(\w+)$')">SOUHAIT<xsl:value-of select="substring-after(.,'SOUBHAITT')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^beuvans$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]euvans$')"><xsl:value-of select="substring-before(.,'euvans')"/>uvant<xsl:value-of select="substring-after(.,'euvans')"/></xsl:if>
       <xsl:if test="matches(.,'^BEUVANS(\w+)$')">BUVANT<xsl:value-of select="substring-after(.,'BEUVANS')"/></xsl:if></reg>
</xsl:when>
            <xsl:when test="matches(.,'^beuveries?$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]euveries?$')"><xsl:value-of select="substring-before(.,'euverie')"/>euverie<xsl:value-of select="substring-after(.,'euverie')"/></xsl:if>
                    <xsl:if test="matches(.,'^BEUVERIES?$')">BEUVERIE<xsl:value-of select="substring-after(.,'BEUVERIE')"/></xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^beuv(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]euv(\w+)$')"><xsl:value-of select="substring-before(.,'euv')"/>uv<xsl:value-of select="substring-after(.,'euv')"/></xsl:if>
       <xsl:if test="matches(.,'^BEUV(\w+)$')">BUV<xsl:value-of select="substring-after(.,'BEUV')"/></xsl:if></reg>
</xsl:when>
            <xsl:when test="matches(.,'^beu$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]eu$')"><xsl:value-of select="substring-before(.,'eu')"/>u</xsl:if>
                    <xsl:if test="matches(.,'^BEU$')">BU</xsl:if></reg>
            </xsl:when>
<xsl:when test="matches(.,'^calumni(\w+)$', 'i')"><reg type="modernisation">
    <xsl:if test="matches(.,'^[Cc]alumni(\w+)$')"><xsl:value-of select="substring-before(.,'alumni')"/>alomni<xsl:value-of select="substring-after(.,'alumni')"/></xsl:if>
       <xsl:if test="matches(.,'^CALUMNI(\w+)$')">CALOMNI<xsl:value-of select="substring-after(.,'CALUMNI')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^caffars$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]affars$')"><xsl:value-of select="substring-before(.,'affars')"/>afards</xsl:if>
       <xsl:if test="matches(.,'^CAFFARS$')">CAFFARDS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^excluse(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^excluse(\w*)$')">écluse<xsl:value-of select="substring-after(.,'excluse')"/></xsl:if>
       <xsl:if test="matches(.,'^Excluse(\w*)$')">Écluse<xsl:value-of select="substring-after(.,'Excluse')"/></xsl:if>
       <xsl:if test="matches(.,'^EXCLUSE(\w*)$')">ÉCLUSE<xsl:value-of select="substring-after(.,'EXCLUSE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^goubel(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]oubel(\w+)$')"><xsl:value-of select="substring-before(.,'oubel')"/>obel<xsl:value-of select="substring-after(.,'oubel')"/></xsl:if>
       <xsl:if test="matches(.,'^GOUBEL(\w+)$')">GOBEL<xsl:value-of select="substring-after(.,'GOUBEL')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^assiet$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]ssiet$')"><xsl:value-of select="substring-before(.,'ssiet')"/>ssied</xsl:if>
       <xsl:if test="matches(.,'^ASSIET$')">ASSIED</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^mylieu$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ylieu$')"><xsl:value-of select="substring-before(.,'ylieu')"/>ilieu</xsl:if>
       <xsl:if test="matches(.,'^MYLIEU$')">MILIEU</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^joly(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Jj]oly(\w*)$')"><xsl:value-of select="substring-before(.,'oly')"/>oli<xsl:value-of select="substring-after(.,'oly')"/></xsl:if>
       <xsl:if test="matches(.,'^JOLY(\w*)$')">JOLI<xsl:value-of select="substring-after(.,'JOLY')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^moisy(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]oisy(\w*)$')"><xsl:value-of select="substring-before(.,'oisy')"/>oisi<xsl:value-of select="substring-after(.,'oisy')"/></xsl:if>
       <xsl:if test="matches(.,'^MOISY(\w*)$')">MOISI<xsl:value-of select="substring-after(.,'MOISY')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^cere(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ere(\w*)$')"><xsl:value-of select="substring-before(.,'ere')"/>ire<xsl:value-of select="substring-after(.,'ere')"/></xsl:if>
       <xsl:if test="matches(.,'^CERE(\w*)$')">CIRE<xsl:value-of select="substring-after(.,'CERE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^poine(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]oine(\w*)$')"><xsl:value-of select="substring-before(.,'oine')"/>eine<xsl:value-of select="substring-after(.,'oine')"/></xsl:if>
       <xsl:if test="matches(.,'^POINE(\w*)$')">PEINE<xsl:value-of select="substring-after(.,'POINE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^povoi(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ovoi(\w*)$')"><xsl:value-of select="substring-before(.,'ovoi')"/>ouvai<xsl:value-of select="substring-after(.,'ovoi')"/></xsl:if>
       <xsl:if test="matches(.,'^POVOI(\w*)$')">POUVAI<xsl:value-of select="substring-after(.,'POVOI')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^reconoître$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]econoître$')"><xsl:value-of select="substring-before(.,'econoître')"/>econnaître</xsl:if>
       <xsl:if test="matches(.,'^RECONOÎTRE$')">RECONNAÎTRE</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^ranc$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]anc$')"><xsl:value-of select="substring-before(.,'anc')"/>ang</xsl:if>
       <xsl:if test="matches(.,'^RANC$')">RANG</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^fuz$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]uz$')"><xsl:value-of select="substring-before(.,'uz')"/>us</xsl:if>
       <xsl:if test="matches(.,'^FUZ$')">FUS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^practiquant(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]ractiquant(\w*)$')"><xsl:value-of select="substring-before(.,'ractiquant')"/>ratiquant<xsl:value-of select="substring-after(.,'ractiquant')"/></xsl:if>
       <xsl:if test="matches(.,'^PRACTIQUANT(\w*)$')">PRATIQUANT<xsl:value-of select="substring-after(.,'PRACTIQUANT')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^practicant(\w*)$', 'i')"><reg type="modernisation">
      <xsl:if test="matches(.,'^[Pp]racticant(\w*)$')"><xsl:value-of select="substring-before(.,'racticant')"/>ratiquant<xsl:value-of select="substring-after(.,'racticant')"/></xsl:if>
      <xsl:if test="matches(.,'^PRACTICANT(\w*)$')">PRATIQUANT<xsl:value-of select="substring-after(.,'PRACTICANT')"/></xsl:if></reg>
                </xsl:when>
<xsl:when test="matches(.,'^translatay(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Tt]ranslatay(\w*)$')"><xsl:value-of select="substring-before(.,'ranslatay')"/>ranslatai<xsl:value-of select="substring-after(.,'ranslatay')"/></xsl:if>
       <xsl:if test="matches(.,'^TRANSLATAY(\w*)$')">TRANSLATAI<xsl:value-of select="substring-after(.,'TRANSLATAY')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^contien$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]ontien$')"><xsl:value-of select="substring-before(.,'ontien')"/>ontient</xsl:if>
       <xsl:if test="matches(.,'^CONTIEN$')">CONTIENT</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^goubel(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Gg]oubel(\w+)$')"><xsl:value-of select="substring-before(.,'oubel')"/>obel<xsl:value-of select="substring-after(.,'oubel')"/></xsl:if>
       <xsl:if test="matches(.,'^GOUBEL(\w+)$')">GOBEL<xsl:value-of select="substring-after(.,'GOUBEL')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^ded(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ed(\w+)$')"><xsl:value-of select="substring-before(.,'ed')"/>éd<xsl:value-of select="substring-after(.,'ed')"/></xsl:if>
       <xsl:if test="matches(.,'^DED(\w+)$')">DÉD<xsl:value-of select="substring-after(.,'DED')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^dialoge(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Dd]ialoge(\w*)$')"><xsl:value-of select="substring-before(.,'ialoge')"/>ialogue<xsl:value-of select="substring-after(.,'ialoge')"/></xsl:if>
       <xsl:if test="matches(.,'^DIALOGE(\w*)$')">DIALOGUE<xsl:value-of select="substring-after(.,'DIALOGE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^apothecaire(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Aa]pothecaire(\w*)$')"><xsl:value-of select="substring-before(.,'pothecaire')"/>pothicaire<xsl:value-of select="substring-after(.,'pothecaire')"/></xsl:if>
       <xsl:if test="matches(.,'^APOTHECAIRE(\w*)$')">APOTHICAIRE<xsl:value-of select="substring-after(.,'APOTHECAIRE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^bridez$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]ridez$')"><xsl:value-of select="substring-before(.,'ridez')"/>ridés</xsl:if>
       <xsl:if test="matches(.,'^BRIDEZ$')">BRIDÉS</xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^boucqs?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]oucqs?(\w*)$')"><xsl:value-of select="substring-before(.,'oucq')"/>ouc<xsl:value-of select="substring-after(.,'oucq')"/></xsl:if>
       <xsl:if test="matches(.,'^BOUCQS?(\w*)$')">BOUC<xsl:value-of select="substring-after(.,'BOUCQ')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^pinture(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Pp]inture(\w*)$')"><xsl:value-of select="substring-before(.,'inture')"/>einture<xsl:value-of select="substring-after(.,'inture')"/></xsl:if>
       <xsl:if test="matches(.,'^PINTURE(\w*)$')">PEINTURE<xsl:value-of select="substring-after(.,'PINTURE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^rustics?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Rr]ustics?(\w*)$')"><xsl:value-of select="substring-before(.,'ustic')"/>ustique<xsl:value-of select="substring-after(.,'ustic')"/></xsl:if>
       <xsl:if test="matches(.,'^RUSTICS?(\w*)$')">RUSTIQUE<xsl:value-of select="substring-after(.,'RUSTIC')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^boytes?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Bb]oytes?(\w*)$')"><xsl:value-of select="substring-before(.,'oyte')"/>oite<xsl:value-of select="substring-after(.,'oyte')"/></xsl:if>
       <xsl:if test="matches(.,'^BOYTES?(\w*)$')">BOITE<xsl:value-of select="substring-after(.,'BOYTE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^facille(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]acille(\w*)$')"><xsl:value-of select="substring-before(.,'acille')"/>acile<xsl:value-of select="substring-after(.,'acille')"/></xsl:if>
       <xsl:if test="matches(.,'^FACILLE(\w*)$')">FACILE<xsl:value-of select="substring-after(.,'FACILLE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^mocqu(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Mm]ocqu(\w+)$')"><xsl:value-of select="substring-before(.,'ocqu')"/>oqu<xsl:value-of select="substring-after(.,'ocqu')"/></xsl:if>
       <xsl:if test="matches(.,'^MOCQU(\w+)$')">MOQU<xsl:value-of select="substring-after(.,'MOCQU')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^correspondente(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Cc]orrespondente(\w*)$')"><xsl:value-of select="substring-before(.,'orrespondente')"/>orrespondante<xsl:value-of select="substring-after(.,'orrespondente')"/></xsl:if>
       <xsl:if test="matches(.,'^CORRESPONDENTE(\w*)$')">CORRESPONDANTE<xsl:value-of select="substring-after(.,'CORRESPONDENTE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^interpreter(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ii]nterpreter(\w*)$')"><xsl:value-of select="substring-before(.,'nterpreter')"/>nterpréter<xsl:value-of select="substring-after(.,'nterpreter')"/></xsl:if>
       <xsl:if test="matches(.,'^INTERPRETER(\w*)$')">INTERPRÉTER<xsl:value-of select="substring-after(.,'INTERPRETER')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^sugce(\w*)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ss]ugce(\w*)$')"><xsl:value-of select="substring-before(.,'ugce')"/>uce<xsl:value-of select="substring-after(.,'ugce')"/></xsl:if>
       <xsl:if test="matches(.,'^SUGCE(\w*)$')">SUCE<xsl:value-of select="substring-after(.,'SUGCE')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^lecons?$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ll]econs?(\w*)$')"><xsl:value-of select="substring-before(.,'econ')"/>eçon<xsl:value-of select="substring-after(.,'econ')"/></xsl:if>
       <xsl:if test="matches(.,'^LECONS?(\w*)$')">LEÇON<xsl:value-of select="substring-after(.,'LECON')"/></xsl:if></reg>
</xsl:when>
<xsl:when test="matches(.,'^freque(\w+)$', 'i')"><reg type="modernisation">
       <xsl:if test="matches(.,'^[Ff]reque(\w+)$')"><xsl:value-of select="substring-before(.,'reque')"/>réque<xsl:value-of select="substring-after(.,'reque')"/></xsl:if>
       <xsl:if test="matches(.,'^FREQUE(\w+)$')">FRÉQUE<xsl:value-of select="substring-after(.,'FREQUE')"/></xsl:if></reg>
</xsl:when>
                <xsl:when test="matches(.,'^sustan(\w+)$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Ss]ustan(\w+)$')"><xsl:value-of select="substring-before(.,'ustan')"/>ubstan<xsl:value-of select="substring-after(.,'ustan')"/></xsl:if>
                                <xsl:if test="matches(.,'^SUSTAN(\w+)$')">SUBSTAN<xsl:value-of select="substring-after(.,'SUSTAN')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w+)icq$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w+)icq$')"><xsl:value-of select="substring-before(.,'icq')"/>ique<xsl:value-of select="substring-after(.,'icq')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w+)ICQ$')"><xsl:value-of select="substring-before(.,'ICQ')"/>IQUE<xsl:value-of select="substring-after(.,'ICQ')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^evang(\w+)$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^evang(\w+)$')"><xsl:value-of select="substring-before(.,'evang')"/>évang<xsl:value-of select="substring-after(.,'evang')"/></xsl:if>
                                <xsl:if test="matches(.,'^Evang(\w+)$')"><xsl:value-of select="substring-before(.,'Evang')"/>Évang<xsl:value-of select="substring-after(.,'Evang')"/></xsl:if>
                                <xsl:if test="matches(.,'^EVANG(\w+)$')">ÉVANG<xsl:value-of select="substring-after(.,'EVANG')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w*)monstrer$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w*)[Mm]onstrer$')"><xsl:value-of select="substring-before(.,'onstrer')"/>ontrer<xsl:value-of select="substring-after(.,'onstrer')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w*)MONSTRER$')"><xsl:value-of select="substring-before(.,'MONSTRER')"/>MONTRER<xsl:value-of select="substring-after(.,'MONSTRER')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w+)controi(\w+)$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w+)controi(\w+)$')"><xsl:value-of select="substring-before(.,'controi')"/>contrai<xsl:value-of select="substring-after(.,'controi')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w+)CONTROI(\w+)$')"><xsl:value-of select="substring-before(.,'CONTROI')"/>CONTRAI<xsl:value-of select="substring-after(.,'CONTROI')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^refec(\w+)$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Rr]efec(\w+)$')"><xsl:value-of select="substring-before(.,'efec')"/>éfec<xsl:value-of select="substring-after(.,'efec')"/></xsl:if>
                                <xsl:if test="matches(.,'^REFEC(\w+)$')">RÉFEC<xsl:value-of select="substring-after(.,'REFEC')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^delec(\w+)$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Dd]elec(\w+)$')"><xsl:value-of select="substring-before(.,'elec')"/>élec<xsl:value-of select="substring-after(.,'elec')"/></xsl:if>
                                <xsl:if test="matches(.,'^DELEC(\w+)$')">DÉLEC<xsl:value-of select="substring-after(.,'DELEC')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w+)eiforme(\w*)$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w+)eiforme(\w*)$')"><xsl:value-of select="substring-before(.,'eiforme')"/>éiforme<xsl:value-of select="substring-after(.,'eiforme')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w+)EIFORME(\w*)$')"><xsl:value-of select="substring-before(.,'EIFORME')"/>ÉIFORME<xsl:value-of select="substring-after(.,'EIFORME')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^autorite(\w*)$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Aa]utorite(\w*)$')"><xsl:value-of select="substring-before(.,'utorite')"/>utorité<xsl:value-of select="substring-after(.,'utorite')"/></xsl:if>
                                <xsl:if test="matches(.,'^AUTORITE(\w*)$')">AUTORITÉ<xsl:value-of select="substring-after(.,'AUTORITE')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w*)reserv(\w*)$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w*)[Rr]eserv(\w*)$')"><xsl:value-of select="substring-before(.,'eserv')"/>éserv<xsl:value-of select="substring-after(.,'eserv')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w*)RESERV(\w*)$')"><xsl:value-of select="substring-before(.,'RESERV')"/>RÉSERV<xsl:value-of select="substring-after(.,'RESERV')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^fossez$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Ff]ossez(\w*)$')"><xsl:value-of select="substring-before(.,'ossez')"/>ossés<xsl:value-of select="substring-after(.,'ossez')"/></xsl:if>
                                <xsl:if test="matches(.,'^FOSSEZ$')">FOSSÉS<xsl:value-of select="substring-after(.,'FOSSEZ')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w*)entroi(\w*)$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w*)[Ee]ntroi(\w*)$')"><xsl:value-of select="substring-before(.,'ntroi')"/>ntrai<xsl:value-of select="substring-after(.,'ntroi')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w*)ENTROI(\w*)$')"><xsl:value-of select="substring-before(.,'ENTROI')"/>ENTRAI<xsl:value-of select="substring-after(.,'ENTROI')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^flaccon(\w*)$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Ff]laccon(\w*)$')"><xsl:value-of select="substring-before(.,'laccon')"/>lacon<xsl:value-of select="substring-after(.,'laccon')"/></xsl:if>
                                <xsl:if test="matches(.,'^FLACCON(\w*)$')">FLACON<xsl:value-of select="substring-after(.,'FLACCON')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w*)ouvroi(\w*)$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w*)[Oo]uvroi(\w*)$')"><xsl:value-of select="substring-before(.,'uvroi')"/>uvrai<xsl:value-of select="substring-after(.,'uvroi')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w*)OUVROI(\w*)$')"><xsl:value-of select="substring-before(.,'OUVROI')"/>OUVRAI<xsl:value-of select="substring-after(.,'OUVROI')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^avoient$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Aa]voient$')"><xsl:value-of select="substring-before(.,'voient')"/>vaient</xsl:if>
                                <xsl:if test="matches(.,'^AVOIENT$')">AVAIENT</xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w+)joust(\w*)$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w+)joust(\w*)$')"><xsl:value-of select="substring-before(.,'joust')"/>jout<xsl:value-of select="substring-after(.,'joust')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w+)JOUST(\w*)$')"><xsl:value-of select="substring-before(.,'OUVROI')"/>JOUT<xsl:value-of select="substring-after(.,'JOUST')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^arrous(\w+)$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Aa]rrous(\w+)$')"><xsl:value-of select="substring-before(.,'rrous')"/>rros<xsl:value-of select="substring-after(.,'rrous')"/></xsl:if>
                                <xsl:if test="matches(.,'^ARROUS(\w+)$')">ARROS<xsl:value-of select="substring-after(.,'ARROUS')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^(\w*)pesch(\w+)$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^(\w*)[Pp]esch(\w+)$')"><xsl:value-of select="substring-before(.,'esch')"/>êch<xsl:value-of select="substring-after(.,'esch')"/></xsl:if>
                                <xsl:if test="matches(.,'^(\w*)PESCH(\w+)$')"><xsl:value-of select="substring-before(.,'PESCH')"/>PÊCH<xsl:value-of select="substring-after(.,'PESCH')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^(al)?leich(\w+)$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^(al|Al)?[Ll]eich(\w+)$')"><xsl:value-of select="substring-before(.,'eich')"/>éch<xsl:value-of select="substring-after(.,'eich')"/></xsl:if>
                                <xsl:if test="matches(.,'^(AL)?LEICH(\w+)$')"><xsl:value-of select="substring-before(.,'LEICH')"/>LÉCH<xsl:value-of select="substring-after(.,'LEICH')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^fleich(\w+)$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Ff]leich(\w+)$')"><xsl:value-of select="substring-before(.,'leich')"/>lèch<xsl:value-of select="substring-after(.,'leich')"/></xsl:if>
                                <xsl:if test="matches(.,'^FLEICH(\w+)$')">FLÈCH<xsl:value-of select="substring-after(.,'FLEICH')"/></xsl:if></reg>
                </xsl:when>
                <xsl:when test="matches(.,'^guaig(\w+)$', 'i')"><reg type="modernisation">
                                <xsl:if test="matches(.,'^[Gg]uaig(\w+)$')"><xsl:value-of select="substring-before(.,'uaig')"/>ag<xsl:value-of select="substring-after(.,'uaig')"/></xsl:if>
                                <xsl:if test="matches(.,'^GUAIG(\w+)$')">GAG<xsl:value-of select="substring-after(.,'GUAIG')"/></xsl:if></reg>
                </xsl:when>             
            <xsl:when test="matches(.,'^(\w*)chauf[^f](\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Cc]hauf[^f](\w*)$')"><xsl:value-of select="substring-before(.,'hauf')"/>hauff<xsl:value-of select="substring-after(.,'hauf')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)CHAUF[^F](\w*)$')"><xsl:value-of select="substring-before(.,'CHAUF')"/>CHAUFF<xsl:value-of select="substring-after(.,'CHAUF')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^noveau(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Nn]oveau(\w*)$')"><xsl:value-of select="substring-before(.,'oveau')"/>ouveau<xsl:value-of select="substring-after(.,'oveau')"/></xsl:if>
                    <xsl:if test="matches(.,'^NOVEAU(\w*)$')">NOUVEAU<xsl:value-of select="substring-after(.,'NOVEAU')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^baisler$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]aisler$')"><xsl:value-of select="substring-before(.,'aisler')"/>aîller</xsl:if>
                    <xsl:if test="matches(.,'^BAISLER$')">BAÎLLER</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^hou?stage(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^hou?stage(\w*)$')">otage<xsl:value-of select="substring-after(.,'stage')"/></xsl:if>
                    <xsl:if test="matches(.,'^Hou?stage(\w*)$')">Otage<xsl:value-of select="substring-after(.,'stage')"/></xsl:if>
                    <xsl:if test="matches(.,'^HOU?STAGE(\w*)$')">OTAGE<xsl:value-of select="substring-after(.,'STAGE')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^quas$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^quas$')">cas</xsl:if>
                    <xsl:if test="matches(.,'^Quas$')">Cas</xsl:if>
                    <xsl:if test="matches(.,'^QUAS$')">CAS</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)enoille(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)enoille(\w*)$')"><xsl:value-of select="substring-before(.,'enoille')"/>enouille<xsl:value-of select="substring-after(.,'enoille')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w+)ENOILLE(\w*)$')"><xsl:value-of select="substring-before(.,'ENOILLE')"/>ENOUILLE<xsl:value-of select="substring-after(.,'ENOILLE')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^sauconduit(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ss]auconduit(\w*)$')"><xsl:value-of select="substring-before(.,'auconduit')"/>auf-conduit<xsl:value-of select="substring-after(.,'auconduit')"/></xsl:if>
                    <xsl:if test="matches(.,'^SAUCONDUIT(\w*)$')">SAUF-CONDUIT<xsl:value-of select="substring-after(.,'SAUCONDUIT')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)ousch(\w+)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)ousch(\w+)$')"><xsl:value-of select="substring-before(.,'ousch')"/>ouch<xsl:value-of select="substring-after(.,'ousch')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w+)OUSCH(\w+)$')"><xsl:value-of select="substring-before(.,'OUSCH')"/>OUCH<xsl:value-of select="substring-after(.,'OUSCH')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^gueret(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Gg]ueret(\w*)$')"><xsl:value-of select="substring-before(.,'ueret')"/>uéret<xsl:value-of select="substring-after(.,'ueret')"/></xsl:if>
                    <xsl:if test="matches(.,'^GUERET(\w*)$')">GUÉRET<xsl:value-of select="substring-after(.,'GUERET')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^aer$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Aa]er$')"><xsl:value-of select="substring-before(.,'er')"/>ir</xsl:if>
                    <xsl:if test="matches(.,'^AER$')">AIR</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^conclud$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Cc]onclud$')"><xsl:value-of select="substring-before(.,'onclud')"/>onclu</xsl:if>
                    <xsl:if test="matches(.,'^CONCLUD$')">CONCLU</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)crioi(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Cc]rioi(\w*)$')"><xsl:value-of select="substring-before(.,'rioi')"/>riai<xsl:value-of select="substring-after(.,'rioi')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)CRIOI(\w*)$')"><xsl:value-of select="substring-before(.,'CRIOI')"/>CRIAI<xsl:value-of select="substring-after(.,'CRIOI')"/></xsl:if></reg>
            </xsl:when>
            
            <xsl:when test="matches(.,'^poyvr(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Pp]oyvr(\w*)$')"><xsl:value-of select="substring-before(.,'oyvr')"/>oivr<xsl:value-of select="substring-after(.,'oyvr')"/></xsl:if>
                    <xsl:if test="matches(.,'^POYVR(\w*)$')">POIVR<xsl:value-of select="substring-after(.,'POYVR')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^b?efro(\w+)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]?[Ee]fro(\w+)$')"><xsl:value-of select="substring-before(.,'fro')"/>ffro<xsl:value-of select="substring-after(.,'fro')"/></xsl:if>
                    <xsl:if test="matches(.,'^B?EFRO(\w+)$')"><xsl:value-of select="substring-before(.,'EFRO')"/>EFFRO<xsl:value-of select="substring-after(.,'EFRO')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^triumph(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Tt]riumph(\w*)$')"><xsl:value-of select="substring-before(.,'riumph')"/>riomph<xsl:value-of select="substring-after(.,'riumph')"/></xsl:if>
                    <xsl:if test="matches(.,'^TRIUMPH(\w*)$')">TRIOMPH<xsl:value-of select="substring-after(.,'TRIUMPH')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)eroi(en)?t$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)eroi(en)?t$')"><xsl:value-of select="substring-before(.,'eroi')"/>erai<xsl:value-of select="substring-after(.,'eroi')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w+)EROI(EN)?T$')"><xsl:value-of select="substring-before(.,'EROI')"/>ERAI<xsl:value-of select="substring-after(.,'EROI')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)cocq(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Cc]ocq(\w*)$')"><xsl:value-of select="substring-before(.,'ocq')"/>oq<xsl:value-of select="substring-after(.,'ocq')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)COCQ(\w*)$')"><xsl:value-of select="substring-before(.,'COCQ')"/>COQ<xsl:value-of select="substring-after(.,'COCQ')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^toust$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Tt]oust$')"><xsl:value-of select="substring-before(.,'oust')"/>ôt</xsl:if>
                    <xsl:if test="matches(.,'^TOUST$')">TÔT</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^espo[^i](\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^espo[^i](\w*)$')">épo<xsl:value-of select="substring-after(.,'spo')"/></xsl:if>
                    <xsl:if test="matches(.,'^Espo[^i](\w*)$')">Épo<xsl:value-of select="substring-after(.,'spo')"/></xsl:if>
                    <xsl:if test="matches(.,'^ESPO[^I](\w*)$')">ÉPO<xsl:value-of select="substring-after(.,'ESPO')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^troigne(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Tt]roigne(\w*)$')"><xsl:value-of select="substring-before(.,'roigne')"/>rogne<xsl:value-of select="substring-after(.,'roigne')"/></xsl:if>
                    <xsl:if test="matches(.,'^TROIGNE(\w*)$')">TROGNE<xsl:value-of select="substring-after(.,'TROIGNE')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^doz$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Dd]oz$')"><xsl:value-of select="substring-before(.,'oz')"/>os</xsl:if>
                    <xsl:if test="matches(.,'^DOZ$')">DOS</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^frot[ae](\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ff]rot[ae](\w*)$')"><xsl:value-of select="substring-before(.,'rot')"/>rott<xsl:value-of select="substring-after(.,'rot')"/></xsl:if>
                    <xsl:if test="matches(.,'^FROT[AE](\w*)$')">FROTT<xsl:value-of select="substring-after(.,'FROT')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^engrois(\w+)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ee]ngrois(\w+)$')"><xsl:value-of select="substring-before(.,'ngrois')"/>ngros<xsl:value-of select="substring-after(.,'ngrois')"/></xsl:if>
                    <xsl:if test="matches(.,'^ENGROIS(\w+)$')">ENGROS<xsl:value-of select="substring-after(.,'ENGROIS')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^grois(\w*)$', 'i')">
                <choice><orig><xsl:value-of select="."/></orig><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Gg]rois(\w*)$')"><xsl:value-of select="substring-before(.,'rois')"/>ros<xsl:value-of select="substring-after(.,'rois')"/></xsl:if>
                    <xsl:if test="matches(.,'^GROIS(\w*)$')">GROS<xsl:value-of select="substring-after(.,'GROIS')"/></xsl:if></reg></choice>
            </xsl:when>
            <xsl:when test="matches(.,'^revoluë$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Rr]evoluë$')"><xsl:value-of select="substring-before(.,'evoluë')"/>évolue</xsl:if>
                    <xsl:if test="matches(.,'^REVOLUË$')">RÉVOLUE</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^revol(\w+)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Rr]evol(\w+)$')"><xsl:value-of select="substring-before(.,'evol')"/>évol<xsl:value-of select="substring-after(.,'evol')"/></xsl:if>
                    <xsl:if test="matches(.,'^REVOL(\w+)$')">RÉVOL<xsl:value-of select="substring-after(.,'REVOL')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)nuyct(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Nn]uyct(\w*)$')"><xsl:value-of select="substring-before(.,'uyct')"/>uit<xsl:value-of select="substring-after(.,'uyct')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)NUYCT(\w*)$')"><xsl:value-of select="substring-before(.,'NUYCT')"/>NUIT<xsl:value-of select="substring-after(.,'NUYCT')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^allega(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Aa]llega(\w*)$')"><xsl:value-of select="substring-before(.,'llega')"/>llégua<xsl:value-of select="substring-after(.,'llega')"/></xsl:if>
                    <xsl:if test="matches(.,'^ALLEGA(\w*)$')">ALLÉGUA<xsl:value-of select="substring-after(.,'ALLEGA')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)leg[ai](\w+)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Ll]eg[ai](\w+)$')"><xsl:value-of select="substring-before(.,'eg')"/>ég<xsl:value-of select="substring-after(.,'eg')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)LEG[AI](\w+)$')"><xsl:value-of select="substring-before(.,'LEG')"/>LÉG<xsl:value-of select="substring-after(.,'LEG')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^ause$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^ause$')"><xsl:value-of select="substring-before(.,'ause')"/>ose</xsl:if>
                    <xsl:if test="matches(.,'^Ause$')"><xsl:value-of select="substring-before(.,'Ause')"/>Ose</xsl:if>
                    <xsl:if test="matches(.,'^AUSE$')">OSE</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)ennans$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)ennans$')"><xsl:value-of select="substring-before(.,'ennans')"/>ennant</xsl:if>
                    <xsl:if test="matches(.,'^(\w+)ENNANS$')"><xsl:value-of select="substring-before(.,'ENNANS')"/>ENNANT</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^vefv(\w+)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Vv]efv(\w+)$')"><xsl:value-of select="substring-before(.,'efv')"/>euv<xsl:value-of select="substring-after(.,'efv')"/></xsl:if>
                    <xsl:if test="matches(.,'^VEFV(\w+)$')">VEUV<xsl:value-of select="substring-after(.,'VEFV')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^cropp(\w+)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Cc]ropp(\w+)$')"><xsl:value-of select="substring-before(.,'ropp')"/>roup<xsl:value-of select="substring-after(.,'ropp')"/></xsl:if>
                    <xsl:if test="matches(.,'^CROPP(\w+)$')">CROUP<xsl:value-of select="substring-after(.,'CROPP')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^acrop(\w+)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Aa]crop(\w+)$')"><xsl:value-of select="substring-before(.,'crop')"/>ccroup<xsl:value-of select="substring-after(.,'crop')"/></xsl:if>
                    <xsl:if test="matches(.,'^ACROP(\w+)$')">ACCROUP<xsl:value-of select="substring-after(.,'ACROP')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^crop(\w+)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Cc]rop(\w+)$')"><xsl:value-of select="substring-before(.,'rop')"/>roup<xsl:value-of select="substring-after(.,'rop')"/></xsl:if>
                    <xsl:if test="matches(.,'^CROP(\w+)$')">CROUP<xsl:value-of select="substring-after(.,'CROP')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^mariz$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Mm]ariz')"><xsl:value-of select="substring-before(.,'ariz')"/>aris</xsl:if>
                    <xsl:if test="matches(.,'^MARIZ$')">MARIS</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^desb(\w+)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Dd]esb(\w+)$')"><xsl:value-of select="substring-before(.,'esb')"/>éb<xsl:value-of select="substring-after(.,'esb')"/></xsl:if>
                    <xsl:if test="matches(.,'^DESB(\w+)$')">DÉB<xsl:value-of select="substring-after(.,'DESB')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^heri(\w+)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Hh]eri(\w+)$')"><xsl:value-of select="substring-before(.,'eri')"/>éri<xsl:value-of select="substring-after(.,'eri')"/></xsl:if>
                    <xsl:if test="matches(.,'^HERI(\w+)$')">HÉRI<xsl:value-of select="substring-after(.,'HERI')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^courbeau(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Cc]ourbeau(\w*)$')"><xsl:value-of select="substring-before(.,'ourbeau')"/>orbeau<xsl:value-of select="substring-after(.,'ourbeau')"/></xsl:if>
                    <xsl:if test="matches(.,'^COURBEAU(\w*)$')">CORBEAU<xsl:value-of select="substring-after(.,'COURBEAU')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)oultre(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Oo]ultre(\w*)$')"><xsl:value-of select="substring-before(.,'ultre')"/>utre<xsl:value-of select="substring-after(.,'ultre')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)OULTRE(\w*)$')"><xsl:value-of select="substring-before(.,'OULTRE')"/>OUTRE<xsl:value-of select="substring-after(.,'OULTRE')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^pilots?$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Pp]ilots?(\w*)$')"><xsl:value-of select="substring-before(.,'ilot')"/>ilote<xsl:value-of select="substring-after(.,'ilot')"/></xsl:if>
                    <xsl:if test="matches(.,'^PILOTS?$')">PILOTE<xsl:value-of select="substring-after(.,'PILOT')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)deront$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)deront$')"><xsl:value-of select="substring-before(.,'deront')"/>dront</xsl:if>
                    <xsl:if test="matches(.,'^(\w+)DERONT$')"><xsl:value-of select="substring-before(.,'DERONT')"/>DRONT</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^raport(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Rr]aport(\w*)$')"><xsl:value-of select="substring-before(.,'aport')"/>apport<xsl:value-of select="substring-after(.,'aport')"/></xsl:if>
                    <xsl:if test="matches(.,'^RAPORT(\w*)$')">RAPPORT<xsl:value-of select="substring-after(.,'RAPORT')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^fauldr(\w+)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ff]auldr(\w+)$')"><xsl:value-of select="substring-before(.,'auldr')"/>audr<xsl:value-of select="substring-after(.,'auldr')"/></xsl:if>
                    <xsl:if test="matches(.,'^FAULDR(\w+)$')">FAUDR<xsl:value-of select="substring-after(.,'FAULDR')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^tortre$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Tt]ortre$')"><xsl:value-of select="substring-before(.,'ortre')"/>ordre</xsl:if>
                    <xsl:if test="matches(.,'^TORTRE$')">TORDRE</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^clouse(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Cc]louse(\w*)$')"><xsl:value-of select="substring-before(.,'louse')"/>lose<xsl:value-of select="substring-after(.,'louse')"/></xsl:if>
                    <xsl:if test="matches(.,'^CLOUSE(\w*)$')">CLOSE<xsl:value-of select="substring-after(.,'CLOUSE')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^escapp(\w+)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^escapp(\w+)$')">échapp<xsl:value-of select="substring-after(.,'escapp')"/></xsl:if>
                    <xsl:if test="matches(.,'^Escapp(\w+)$')">Échapp<xsl:value-of select="substring-after(.,'Escapp')"/></xsl:if>
                    <xsl:if test="matches(.,'^ESCAPP(\w+)$')">ÉCHAPP<xsl:value-of select="substring-after(.,'ESCAPP')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^apresdinées?$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Aa]presdinées?$')"><xsl:value-of select="substring-before(.,'presdinée')"/>pres-dinée<xsl:value-of select="substring-after(.,'presdinée')"/></xsl:if>
                    <xsl:if test="matches(.,'^APRESDINÉES?$')">APRES-DINÉE<xsl:value-of select="substring-after(.,'APRESDINÉE')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^febvrier$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ff]ebvrier$')"><xsl:value-of select="substring-before(.,'ebvrier')"/>évrier</xsl:if>
                    <xsl:if test="matches(.,'^FEBVRIER$')">FÉVRIER</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^engress(\w+)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ee]ngress(\w+)$')"><xsl:value-of select="substring-before(.,'ngress')"/>ngraiss<xsl:value-of select="substring-after(.,'ngress')"/></xsl:if>
                    <xsl:if test="matches(.,'^ENGRESS(\w+)$')">ENGRAISS<xsl:value-of select="substring-after(.,'ENGRESS')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)rdy$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)rdy$')"><xsl:value-of select="substring-before(.,'rdy')"/>rdi</xsl:if>
                    <xsl:if test="matches(.,'^(\w+)RDY$')"><xsl:value-of select="substring-before(.,'RDY')"/>RDI</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^commemo(\w+)$', 'i')"><reg type="modernisation">
                <xsl:if test="matches(.,'^[Cc]ommemo(\w+)$')"><xsl:value-of select="substring-before(.,'ommemo')"/>ommémo<xsl:value-of select="substring-after(.,'ommemo')"/></xsl:if>
                    <xsl:if test="matches(.,'^COMMEMO(\w+)$')">COMMÉMO<xsl:value-of select="substring-after(.,'COMMEMO')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)acion$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)acion$')"><xsl:value-of select="substring-before(.,'acion')"/>ation</xsl:if>
                    <xsl:if test="matches(.,'^(\w+)ACION$')"><xsl:value-of select="substring-before(.,'ACION')"/>ATION</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(in)?dec(\w+)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(in|In)?[Dd]ec(\w+)$')"><xsl:value-of select="substring-before(.,'ec')"/>éc<xsl:value-of select="substring-after(.,'ec')"/></xsl:if>
                    <xsl:if test="matches(.,'^(IN)?DEC(\w+)$')"><xsl:value-of select="substring-before(.,'DEC')"/>DÉC<xsl:value-of select="substring-after(.,'DEC')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^gue$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Gg]ue$')"><xsl:value-of select="substring-before(.,'ue')"/>ué</xsl:if>
                    <xsl:if test="matches(.,'^GUE$')">GUÉ</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^beveurs?$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Bb]eveurs?$')"><xsl:value-of select="substring-before(.,'eveur')"/>uveur<xsl:value-of select="substring-after(.,'eveur')"/></xsl:if>
                    <xsl:if test="matches(.,'^BEVEURS?$')">BUVEUR<xsl:value-of select="substring-after(.,'BEVEUR')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)neues?$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Nn]eues?$')"><xsl:value-of select="substring-before(.,'eue')"/>ue<xsl:value-of select="substring-after(.,'eue')"/></xsl:if>
                <xsl:if test="matches(.,'^(\w*)NEUES?$')"><xsl:value-of select="substring-before(.,'NEUE')"/>NUE<xsl:value-of select="substring-after(.,'NEUE')"/></xsl:if></reg>
            </xsl:when>
             <!--Addition cogneu(e)(s) => connu(e)(s)-->
             <xsl:when test="matches(.,'^(re)?con?g?neue?s?$', 'i')">
               <reg type="modernisation">
                    <xsl:if test="matches(.,'^(re)?con?g?neue?s?$')"><xsl:value-of select="substring-before(.,'eu')"/>u<xsl:value-of select="substring-after(.,'eu')"/></xsl:if>
                    <xsl:if test="matches(.,'^(RE)?CON?G?NEUE?S?$')"><xsl:value-of select="substring-before(.,'EU')"/>U<xsl:value-of select="substring-after(.,'UE')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)commend(\w+)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Cc]ommend(\w+)$')"><xsl:value-of select="substring-before(.,'ommend')"/>ommand<xsl:value-of select="substring-after(.,'ommend')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)COMMEND(\w+)$')"><xsl:value-of select="substring-before(.,'COMMEND')"/>COMMAND<xsl:value-of select="substring-after(.,'COMMEND')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)ndoi(en)?t$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)ndoi(en)?t$')"><xsl:value-of select="substring-before(.,'ndoi')"/>ndai<xsl:value-of select="substring-after(.,'ndoi')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w+)NDOI(EN)?T$')"><xsl:value-of select="substring-before(.,'NDOI')"/>NDAI<xsl:value-of select="substring-after(.,'NDOI')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^masts?$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Mm]asts?$')"><xsl:value-of select="substring-before(.,'ast')"/>ât<xsl:value-of select="substring-after(.,'ast')"/></xsl:if>
                    <xsl:if test="matches(.,'^MASTS?$')">MÂT<xsl:value-of select="substring-after(.,'MAST')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^masch(\w+)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Mm]asch(\w+)$')"><xsl:value-of select="substring-before(.,'asch')"/>âch<xsl:value-of select="substring-after(.,'asch')"/></xsl:if>
                    <xsl:if test="matches(.,'^MASCH(\w+)$')"><xsl:value-of select="substring-before(.,'MASCH')"/>MÂCH<xsl:value-of select="substring-after(.,'MASCH')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^mangeue$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Mm]angeue$')"><xsl:value-of select="substring-before(.,'angeue')"/>ange</xsl:if>
                    <xsl:if test="matches(.,'^MANGEUE$')">MANGE</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^seze$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ss]eze$')"><xsl:value-of select="substring-before(.,'eze')"/>eize</xsl:if>
                    <xsl:if test="matches(.,'^SEZE$')">SEIZE</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w+)uss?ars?$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w+)uss?ars?$')"><xsl:value-of select="substring-before(.,'ar')"/>ard<xsl:value-of select="substring-after(.,'ar')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w+)USS?ARS?$')"><xsl:value-of select="substring-before(.,'AR')"/>ARD<xsl:value-of select="substring-after(.,'AR')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)doivoi(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Dd]oivoi(\w*)$')"><xsl:value-of select="substring-before(.,'oivoi')"/>evai<xsl:value-of select="substring-after(.,'oivoi')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)DOIVOI(\w*)$')"><xsl:value-of select="substring-before(.,'DOIVOI')"/>DEVAI<xsl:value-of select="substring-after(.,'DOIVOI')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^doulce(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Dd]oulce(\w*)$')"><xsl:value-of select="substring-before(.,'oulce')"/>ouce<xsl:value-of select="substring-after(.,'oulce')"/></xsl:if>
                    <xsl:if test="matches(.,'^DOULCE(\w*)$')">DOUCE<xsl:value-of select="substring-after(.,'DOULCE')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)enyvr(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Ee]nyvr(\w*)$')"><xsl:value-of select="substring-before(.,'nyvr')"/>nivr<xsl:value-of select="substring-after(.,'nyvr')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)ENYVR(\w*)$')"><xsl:value-of select="substring-before(.,'ENYVR')"/>ENIVR<xsl:value-of select="substring-after(.,'ENYVR')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^trote(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Tt]rote(\w*)$')"><xsl:value-of select="substring-before(.,'rote')"/>rotte<xsl:value-of select="substring-after(.,'rote')"/></xsl:if>
                    <xsl:if test="matches(.,'^TROTE(\w*)$')">TROTTE<xsl:value-of select="substring-after(.,'TROTE')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^gualente(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Gg]ualente(\w*)$')"><xsl:value-of select="substring-before(.,'ualente')"/>alante<xsl:value-of select="substring-after(.,'ualente')"/></xsl:if>
                    <xsl:if test="matches(.,'^GUALENTE(\w*)$')">GALANTE<xsl:value-of select="substring-after(.,'GUALENTE')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^fiebvre(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ff]iebvre(\w*)$')"><xsl:value-of select="substring-before(.,'iebvre')"/>ièvre<xsl:value-of select="substring-after(.,'iebvre')"/></xsl:if>
                    <xsl:if test="matches(.,'^FIEBVRE(\w*)$')">FIÈVRE<xsl:value-of select="substring-after(.,'FIEBVRE')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^fy$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ff]y$')"><xsl:value-of select="substring-before(.,'y')"/>i</xsl:if>
                    <xsl:if test="matches(.,'^FY$')">FI</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)mulle(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Mm]ulle(\w*)$')"><xsl:value-of select="substring-before(.,'ulle')"/>ule<xsl:value-of select="substring-after(.,'ulle')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)MULLE(\w*)$')"><xsl:value-of select="substring-before(.,'MULLE')"/>MULE<xsl:value-of select="substring-after(.,'MULLE')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(\w*)brevi(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(\w*)[Bb]revi(\w*)$')"><xsl:value-of select="substring-before(.,'revi')"/>révi<xsl:value-of select="substring-after(.,'revi')"/></xsl:if>
                    <xsl:if test="matches(.,'^(\w*)BREVI(\w*)$')"><xsl:value-of select="substring-before(.,'BREVI')"/>BRÉVI<xsl:value-of select="substring-after(.,'BREVI')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^breves?$', 'i')"><reg type="modernisation">
                <xsl:if test="matches(.,'^[Bb]reves?$')"><xsl:value-of select="substring-before(.,'reve')"/>rève<xsl:value-of select="substring-after(.,'reve')"/></xsl:if>
                <xsl:if test="matches(.,'^BREVES?$')">BRÈVE<xsl:value-of select="substring-after(.,'BREVE')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^pech(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Pp]ech(\w*)$')"><xsl:value-of select="substring-before(.,'ech')"/>éch<xsl:value-of select="substring-after(.,'ech')"/></xsl:if>
                    <xsl:if test="matches(.,'^PECH(\w*)$')">PÉCH<xsl:value-of select="substring-after(.,'PECH')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^innocens$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Ii]nnocens$')"><xsl:value-of select="substring-before(.,'nnocens')"/>nnocents</xsl:if>
                    <xsl:if test="matches(.,'^INNOCENS$')">INNOCENTS</xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(as|des)?seich[ée](\w+)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(as|des|As|Des)?[Ss]eich[ée](\w+)$')"><xsl:value-of select="substring-before(.,'eich')"/>éch<xsl:value-of select="substring-after(.,'eich')"/></xsl:if>
                    <xsl:if test="matches(.,'^(AS|DES)?SEICH[ÉE](\w+)$')"><xsl:value-of select="substring-before(.,'EICH')"/>ÉCH<xsl:value-of select="substring-after(.,'EICH')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^(as|des)?seiche$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^(as|des|As|Des)?[Ss]eiche$')"><xsl:value-of select="substring-before(.,'eiche')"/>èche<xsl:value-of select="substring-after(.,'eiche')"/></xsl:if>
                    <xsl:if test="matches(.,'^(AS|DES)?SEICHE$')"><xsl:value-of select="substring-before(.,'SEICHE')"/>SÈCHE<xsl:value-of select="substring-after(.,'SEICHE')"/></xsl:if></reg>
            </xsl:when>
            <xsl:when test="matches(.,'^r?aproch(\w*)$', 'i')"><reg type="modernisation">
                    <xsl:if test="matches(.,'^[Rr]?[Aa]proch(\w*)$')"><xsl:value-of select="substring-before(.,'proch')"/>pproch<xsl:value-of select="substring-after(.,'proch')"/></xsl:if>
                    <xsl:if test="matches(.,'^R?APROCH(\w*)$')"><xsl:value-of select="substring-before(.,'APROCH')"/>APPROCH<xsl:value-of select="substring-after(.,'APROCH')"/></xsl:if></reg>
            </xsl:when>
                     <xsl:otherwise><reg type="modernisation"><xsl:value-of select="."/></reg>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
   
</xsl:stylesheet>